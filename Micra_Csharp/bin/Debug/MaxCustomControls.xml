<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MaxCustomControls</name>
    </assembly>
    <members>
        <member name="T:MaxCustomControls.AdvancedSearch.AdvancedFilter">
            <summary>
            Filtering conditions to determine which nodes should be displayed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.AdvancedFilter.#ctor(MaxCustomControls.AdvancedSearch.ComparisonControlManager)">
            <summary>
            Construct with a ExplorerControl and a ComparisonControlManager.
            </summary>
            <param name="comparisonManager">
            Provides the comparison configurations of nodes' properties.
            </param>
        </member>
        <member name="P:MaxCustomControls.AdvancedSearch.AdvancedFilter.ExplorerDataFacade">
            <summary>
            The datafacade that this advanced filter operates on.
            </summary>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.AdvancedFilter.ShowModal">
            <summary>
            Display a modal dialog for user to modify current filter conditions.
            </summary>
        </member>
        <member name="P:MaxCustomControls.AdvancedSearch.AdvancedFilter.Valid">
            <summary>
            Is the advanced filter currently valid?
            </summary>
            <remarks>
            If there are no advanced filtering conditions, this advanced filter 
            is considered invalid.  Clients should not enable an advanced filter 
            while it is invalid.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.AdvancedSearch.AdvancedFilter.Enabled">
            <summary>
            Determines if this Advanced Filter is used to filter the Explorer's data set.
            </summary>
        </member>
        <member name="P:MaxCustomControls.AdvancedSearch.AdvancedFilter.MatchAll">
            <summary>
            Is the "Match all" check box in the advacned filter dialog checked?
            </summary>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.AdvancedFilter.SaveState(MaxCustomControls.ExplorerCustomizationState)">
            <summary>
            Save current filter data to ExplorerCustomizationState.
            </summary>
            <param name="aState">
            Stores explorer data for serialization.
            </param>
        </member>
        <member name="E:MaxCustomControls.AdvancedSearch.AdvancedFilter.EnabledChanged">
            <summary>
            Occurs when the enabled/disabled state of the advanced filter is changed.
            </summary>
            <remarks>
            For example, the Scene Explorer's dialog responds to this event by 
            updating its Advanced Filter menu item.
            </remarks>
        </member>
        <member name="E:MaxCustomControls.AdvancedSearch.AdvancedFilter.ValidChanged">
            <summary>
            Occurs when the validity state of the advanced filter is changed.
            </summary>
            <seealso cref="P:MaxCustomControls.AdvancedSearch.AdvancedFilter.Valid" />
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.AdvancedFilter.LoadState(MaxCustomControls.ExplorerCustomizationState)">
            <summary>
            Load filter data from ExplorerCustomizationState.
            </summary>
            <param name="aState">
            Stores explorer data for serialization.
            </param>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.AdvancedFilter.HandleOK(System.Object,MaxCustomControls.AdvancedSearch.FinishEventArgs)">
            <summary>
            Handle UI event when user clicked "OK" of "advanced filter" dialog.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="T:MaxCustomControls.AdvancedSearch.ConditionHelper">
            <summary>
            Provides helper functions that are used to obtain Condition fields
            (e.g PropertyDescriptor by Property display name)
            </summary>
            <remarks>
            Class was constructed to encapsulate different helper functions
            that are used to obtain different Condition fields for the AdvancedFilter dialog
            </remarks>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.ConditionHelper.#ctor(ExplorerFramework.DataFacade,MaxCustomControls.AdvancedSearch.ComparisonControlManager)">
            <summary>
            Constructor
            </summary>
            <param name="dataFacade"></param>
            <param name="comparisonManager"></param>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.ConditionHelper.GetPropertyDescriptorByDisplayName(System.String)">
            <summary>
            Gets a PropertyDescriptor by display name
            </summary>
            <param name="propertyName"></param>
            <returns>
            A PropertyDescriptor from the property descriptor collection
              or null if the property name does not correspond to a descriptor
            </returns>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.ConditionHelper.GetComparisonControlByOperatorText(System.ComponentModel.PropertyDescriptor,System.String)">
            <summary>
            Gets a ComparisonControl by operator text
            </summary>
            <param name="currentProperty"></param>
            <param name="operatorText"></param>
            <returns>
            A ComparisonControl that corresponds to the operator text or null 
              if no comparison control is found
            </returns>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.ConditionHelper.GetPropertyDisplayNamesList">
            <summary>
            Gets the Property display names list which is used to 
              populate the property combobox
            </summary>
            <returns>
            A list of objects representing the property display names
            </returns>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.ConditionHelper.GetFirstComparison(System.Type)">
            <summary>
            Gets the first ComparisonControl from the availableComparisons list
            </summary>
            <param name="propertyType"></param>
            <returns>
            The first ComparisonControlPrototypeBase in the list
            </returns>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.ConditionHelper.GetAvailableComparisons(MaxCustomControls.AdvancedSearch.Condition)">
            <summary>
            Get the available comparisons for the current condition, as a ReadOnly Collection 
            </summary>
            <param name="condition"></param>
            <returns>
            A ReadOnlyCollection containing the available comparison controls
            </returns>
        </member>
        <member name="T:MaxCustomControls.AdvancedSearch.ReferenceValueRepositoryItem">
            <summary>
            RepositoryItem specialized to serve its editor from a ComparisonControlPrototypeBase.
            </summary>
            <remarks>
            <para>
            Given an existing RepositoryItemPrototypeBase such as ComparisonBoolIs, the associated 
            Repository Item can be constructed from it.
            </para>
            <para>
            This class is generally used as:
            <code>
            ReferenceValueRepositoryItem rfItem = 
            new ReferenceValueRepositoryItem( ComparisonBoolIsObject );
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.ReferenceValueRepositoryItem.#ctor(MaxCustomControls.AdvancedSearch.ComparisonControlPrototypeBase)">
            <summary>
            Constructor taking the ComparisonControlPrototypeBase object
            </summary>
            <param name="inControl">
            The ComparisonControlPrototypeBase used to construct the RepositoryItem
            </param>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.ReferenceValueRepositoryItem.CreateEditor">
            <summary>
            Overrides the CreateEditor() function to create the editor 
            with our encapsulated BaseEdit() object. 
            </summary>
            <returns>The encapsulated BaseEdit object.</returns>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.ReferenceValueRepositoryItem.CreateViewInfo">
            <summary>
            Overrides the CreateViewInfo() function to create the View 
            based on our encapsulated BaseEdit().Properties.CreateViewInfo(). 
            </summary>
            <returns>
            The BaseEditViewInfo specific to our encapsulated BaseEdit object.
            </returns>
        </member>
        <member name="F:MaxCustomControls.AdvancedSearch.ReferenceValueRepositoryItem.mEditor">
            <summary>
            The encapsulated BaseEdit object. 
            </summary>
        </member>
        <member name="F:MaxCustomControls.AdvancedSearch.SearchForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.SearchForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.AdvancedSearch.SearchForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:MaxCustomControls.AdvancedSearch.ConditionEditor.ConditionValidChanged">
            <summary>
            Occurs when the validity state of the current condition is changed.
            </summary>
            <seealso cref="P:MaxCustomControls.AdvancedSearch.ConditionEditor.ConditionValid" />
        </member>
        <member name="P:MaxCustomControls.AdvancedSearch.ConditionEditor.ConditionValid">
            <summary>
            Is the current condition valid?
            </summary>
            <remarks>
            If not all condition fields are specified, the current condition  
            is considered invalid.  Clients should not create a condition 
            while it is invalid.
            </remarks>
        </member>
        <member name="T:MaxCustomControls.BaseBooleanControls.BooleanExplorerTreeList">
            <summary>
            Specializes the ExplorerTreeList for the Boolean Explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.BooleanExplorerTreeList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.BooleanExplorerTreeList.CreateMaxTreeListHandler">
            <summary>
            Overridden so that we can supply our own implementation of TreeListHandler.
            </summary>
            <returns>A BooleanTreeListHandler object.</returns>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.BooleanExplorerTreeList.HandleCustomDrawNodeCell(System.Object,DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs)">
            <exclude/>
            <summary>
            Changes the name cell appearance to display node property feedback.
            </summary>
            <param name="sender">
            Source of the event.
            </param>
            <param name="e">
            Data about the event. The cell appearance is controlled here.
            </param>
        </member>
        <member name="T:MaxCustomControls.BaseBooleanControls.BooleanFilterDescriptionRegistry">
            <summary>
            This class provides all boolean browser/explorer related filters.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.BooleanFilterDescriptionRegistry.#ctor">
            <summary>
            The default BooleanFilterDescriptionRegistry constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseBooleanControls.BooleanTreeListHandler">
            <summary>
            This class expand ExplorerTreeList and add the ability to allow user click 
            column headers for three times and clear the sort state of that column.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.BooleanTreeListHandler.#ctor(MaxCustomControls.ExplorerTreeList)">
            <summary>
            Contructor.
            </summary>
            <param name="treeList">
            The TreeList that this handler will be associated with.
            </param>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.BooleanTreeListHandler.CreateState(DevExpress.XtraTreeList.TreeListState)">
            <summary>
            The main entry point to overriding State classes which
            handle how the TreeList behaves in specific "states."
            </summary>
            <param name="state">An enumeration value of a state handling 
            object that the treelist needs to create.</param>
            <returns> 
            The control state object that handles a specific TreeList state.
            </returns>
        </member>
        <member name="T:MaxCustomControls.BaseBooleanControls.BooleanColumnPressedState">
            <summary>
            Overridden state used after a mouse up event occurs 
            on a column header.
            </summary>
        </member>
        <member name="F:MaxCustomControls.BaseBooleanControls.BooleanColumnPressedState.mMaxTreeListHandler">
            <summary>
            Storage for MaxTreeListHandler property.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl">
            <summary>
            This is a basic explorer control for boolean explorer
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.#ctor">
            <summary>
            Default constructor.  Not bound to any data set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.#ctor(System.String,ExplorerFramework.DataFacade)">
            <summary>
            Construct with a name and data set.
            </summary>
            <param name="aName">Name for this Explorer.</param>
            <param name="aDataSource">Data set explored by this explorer.</param>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.InitializeComponentLocal">
            <summary>
            Initialize event handlers and controls.  Intended to execute 
            after the designer-generated InitializeComponent.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.CreateExplorerTreeList">
            <summary>
            Override ExplorerControl.CreateExplorerTreeList() to provide with
            the specific Boolean-ExplorerTreeList for ME.
            </summary>
            <returns>The created BooleanExplorerTreeList.</returns>
        </member>
        <member name="P:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.FindHandler">
            <summary>
            Performs quick searches for this explorer control.
            </summary>
            <remarks>
            Overrides the base set implementation to set the MatchedProperty
            according to the Boolean Explorer's requirements.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.CreateState">
            <summary>
            Create a specialized customization state object for this class.
            </summary>
            <returns>
            A specialized customization state object for this class.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.SaveState">
            <summary>
            Create and fill in a customization state object for the current 
            settings.
            </summary>
            <remarks>
            Overrides the base implementation to add properties specific to 
            the General Boolean Explorer.
            </remarks>
            <returns>
            A customization state object for serializing the current settings.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the settings configuration from a serialized state.
            </summary>
            <remarks>
            Overrides the base implementation to handle properties specific
            to the RichBooleanExplorerControl.
            </remarks>
            <param name="aState">
            A serialized customization state containing the desired settings.
            </param>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.LoadAllToolbarStates(MaxCustomControls.ICustomizationState)">
            <summary>
            Load all the toolbar states of this explorer.
            </summary>
            <param name="iState">
            The state object that contains toolbar states of this explorer.
            </param>
        </member>
        <member name="P:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.DisplayThumbnail">
            <summary>
            The display thumbnail state of the tree list
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.InitializeThumbnailControl">
            <summary>
            Set up event handlers for controlling thumbnail icon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.FilterToolbar">
            <summary>
            Toolbar Control containing filter buttons.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.CreateFilterDescriptionRegistry">
            <summary>
            Create a specific filter description registry instance for a derived 
            class of RichBooleanExplorerControl.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.InitializeFilterToolbar">
            <summary>
            Initialize all filters of this control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.UpdateColors">
            <summary>
            Update the Control colors according to the CUI settings.  Implements
            the CuiUpdatable interface.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState">
            <summary>
            This class should store the states of richBooleanExplorerControl such as 
            the filterUnunsedChannel
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.#ctor(System.Int32)">
            <summary>
            Construct with a given number of columns.
            </summary>
            <param name="aColumnCount">
            Number of columns in the explorer.
            </param>
        </member>
        <member name="T:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.RichBooleanExplorerControlKeys">
            <summary>
            Key constants for properties specific to the RichBooleanExplorerControl.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the values from the given dictionary into this customization object.
            Extends the base method to add support for properties specific to the
            RichBooleanExplorerControl.
            </summary>
            <param name="aPropertySet">
            A dictionary mapping keynames to properties.
            </param>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.SaveProperties">
            <summary>
            Creates a dictionary mapping KeyNames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            Extends the base implementation to add support for properties
            specific to RichBooleanExplorerControl.
            </remarks>
            <returns>
            A dictionary mapping keynames to property values.
            </returns>
        </member>
        <member name="P:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.FilterToolbarState">
            <summary>
            ToolBarState of FilterToolbar
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.FilterStates">
            <summary>
            Dictionary used to store filter states
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.SaveFilterStates(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Save filter states to a dictionary
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.LoadFilterStates(System.String)">
            <summary>
            Load filter states from a dictionary
            </summary>
        </member>
        <member name="F:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.mFilterToolbarState">
            <summary>
            Storage for "FilterToolbar" state 
            </summary>
        </member>
        <member name="F:MaxCustomControls.BaseBooleanControls.RichBooleanExplorerControlState.mFilterStates">
            <summary>
            Storage for FilterStates.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseBooleanControls.SelectAllBooleansCommand">
            <summary>
            This command is used to select all the boolean nodes in a RichBooleanExplorerControl
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.SelectAllBooleansCommand.Create">
            <summary>
            A Factory method to create an instance of SelectAllBooleansCommand.
            </summary>
            <returns>
            An instance of SelectAllBooleansCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.SelectAllBooleansCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseBooleanControls.SelectAllBooleansCommand.Cancelable">
            <summary>
            SelectAllBooleansCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseBooleanControls.SelectAllBooleansCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.SelectAllBooleansCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.SelectAllBooleansCommand.Execute">
            <summary>
            When called, selects all the Boolean nodes in the ExplorerControl's treelist.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseBooleanControls.SelectAllBooleansCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            True if the Explorer is present and is of type RichBooleanExplorerControl.
            </returns>
        </member>
        <member name="T:MaxCustomControls.BaseCreaseControls.CreaseExplorerTreeList">
            <summary>
            Specializes the ExplorerTreeList for the Crease Explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.CreaseExplorerTreeList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.CreaseExplorerTreeList.CreateMaxTreeListHandler">
            <summary>
            Overridden so that we can supply our own implementation of TreeListHandler.
            </summary>
            <returns>A CreaseTreeListHandler object.</returns>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.CreaseExplorerTreeList.HandleCustomDrawNodeCell(System.Object,DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs)">
            <exclude/>
            <summary>
            Changes the name cell appearance to display node property feedback.
            </summary>
            <param name="sender">
            Source of the event.
            </param>
            <param name="e">
            Data about the event. The cell appearance is controlled here.
            </param>
        </member>
        <member name="T:MaxCustomControls.BaseCreaseControls.CreaseFilterDescriptionRegistry">
            <summary>
            This class provides all crease browser/explorer related filters.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseCreaseControls.CreaseFilterDescriptionRegistry.FilterKey">
            <summary>
            List of conceptual filters in the filter toolbar of 
            the Crease Explorer/Browser.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.CreaseFilterDescriptionRegistry.#ctor">
            <summary>
            The default CreaseFilterDescriptionRegistry constructor.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.CreaseFilterDescriptionRegistry.VertexCreasesFilter">
            <summary>
            Get the FilterDescription on Vertex Creases
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.CreaseFilterDescriptionRegistry.EdgeCreasesFilter">
            <summary>
            Get the FilterDescription on EdgeCreases
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseCreaseControls.CreaseTreeListHandler">
            <summary>
            This class expand ExplorerTreeList and add the ability to allow user click 
            column headers for three times and clear the sort state of that column.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.CreaseTreeListHandler.#ctor(MaxCustomControls.ExplorerTreeList)">
            <summary>
            Contructor.
            </summary>
            <param name="treeList">
            The TreeList that this handler will be associated with.
            </param>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.CreaseTreeListHandler.CreateState(DevExpress.XtraTreeList.TreeListState)">
            <summary>
            The main entry point to overriding State classes which
            handle how the TreeList behaves in specific "states."
            </summary>
            <param name="state">An enumeration value of a state handling 
            object that the treelist needs to create.</param>
            <returns> 
            The control state object that handles a specific TreeList state.
            </returns>
        </member>
        <member name="T:MaxCustomControls.BaseCreaseControls.CreaseColumnPressedState">
            <summary>
            Overridden state used after a mouse up event occurs 
            on a column header.
            </summary>
        </member>
        <member name="F:MaxCustomControls.BaseCreaseControls.CreaseColumnPressedState.mMaxTreeListHandler">
            <summary>
            Storage for MaxTreeListHandler property.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl">
            <summary>
            This is a basic explorer control for crease explorer
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.#ctor">
            <summary>
            Default constructor.  Not bound to any data set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.#ctor(System.String,ExplorerFramework.DataFacade)">
            <summary>
            Construct with a name and data set.
            </summary>
            <param name="aName">Name for this Explorer.</param>
            <param name="aDataSource">Data set explored by this explorer.</param>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.InitializeComponentLocal">
            <summary>
            Initialize event handlers and controls.  Intended to execute 
            after the designer-generated InitializeComponent.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.CreateExplorerTreeList">
            <summary>
            Override ExplorerControl.CreateExplorerTreeList() to provide with
            the specific Crease-ExplorerTreeList for ME.
            </summary>
            <returns>The created CreaseExplorerTreeList.</returns>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.FindHandler">
            <summary>
            Performs quick searches for this explorer control.
            </summary>
            <remarks>
            Overrides the base set implementation to set the MatchedProperty
            according to the Crease Explorer's requirements.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.CreateState">
            <summary>
            Create a specialized customization state object for this class.
            </summary>
            <returns>
            A specialized customization state object for this class.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.SaveState">
            <summary>
            Create and fill in a customization state object for the current 
            settings.
            </summary>
            <remarks>
            Overrides the base implementation to add properties specific to 
            the General Crease Explorer.
            </remarks>
            <returns>
            A customization state object for serializing the current settings.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the settings configuration from a serialized state.
            </summary>
            <remarks>
            Overrides the base implementation to handle properties specific
            to the RichCreaseExplorerControl.
            </remarks>
            <param name="aState">
            A serialized customization state containing the desired settings.
            </param>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.LoadAllToolbarStates(MaxCustomControls.ICustomizationState)">
            <summary>
            Load all the toolbar states of this explorer.
            </summary>
            <param name="iState">
            The state object that contains toolbar states of this explorer.
            </param>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.DisplayThumbnail">
            <summary>
            The display thumbnail state of the tree list
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.InitializeThumbnailControl">
            <summary>
            Set up event handlers for controlling thumbnail icon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.FilterToolbar">
            <summary>
            Toolbar Control containing filter buttons.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.CreateFilterDescriptionRegistry">
            <summary>
            Create a specific filter description registry instance for a derived 
            class of RichCreaseExplorerControl.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.InitializeFilterToolbar">
            <summary>
            Initialize all filters of this control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.RaiseDisplayVertexCreasesChanged">
            <summary>
            Handles the traversal empty maps changed event and update UI.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.RaiseDisplayEdgeCreasesChanged">
            <summary>
            Handles the traversal empty maps changed event and update UI.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.UpdateColors">
            <summary>
            Update the Control colors according to the CUI settings.  Implements
            the CuiUpdatable interface.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState">
            <summary>
            This class should store the states of richCreaseExplorerControl such as 
            the filterUnunsedChannel
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.#ctor(System.Int32)">
            <summary>
            Construct with a given number of columns.
            </summary>
            <param name="aColumnCount">
            Number of columns in the explorer.
            </param>
        </member>
        <member name="T:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.RichCreaseExplorerControlKeys">
            <summary>
            Key constants for properties specific to the RichCreaseExplorerControl.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the values from the given dictionary into this customization object.
            Extends the base method to add support for properties specific to the
            RichCreaseExplorerControl.
            </summary>
            <param name="aPropertySet">
            A dictionary mapping keynames to properties.
            </param>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.SaveProperties">
            <summary>
            Creates a dictionary mapping KeyNames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            Extends the base implementation to add support for properties
            specific to RichCreaseExplorerControl.
            </remarks>
            <returns>
            A dictionary mapping keynames to property values.
            </returns>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.FilterToolbarState">
            <summary>
            ToolBarState of FilterToolbar
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.FilterStates">
            <summary>
            Dictionary used to store filter states
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.SaveFilterStates(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Save filter states to a dictionary
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.LoadFilterStates(System.String)">
            <summary>
            Load filter states from a dictionary
            </summary>
        </member>
        <member name="F:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.mFilterToolbarState">
            <summary>
            Storage for "FilterToolbar" state 
            </summary>
        </member>
        <member name="F:MaxCustomControls.BaseCreaseControls.RichCreaseExplorerControlState.mFilterStates">
            <summary>
            Storage for FilterStates.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseCreaseControls.SelectAllCreasesCommand">
            <summary>
            This command is used to select all the crease nodes in a RichCreaseExplorerControl
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.SelectAllCreasesCommand.Create">
            <summary>
            A Factory method to create an instance of SelectAllCreasesCommand.
            </summary>
            <returns>
            An instance of SelectAllCreasesCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.SelectAllCreasesCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.SelectAllCreasesCommand.Cancelable">
            <summary>
            SelectAllCreasesCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.SelectAllCreasesCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.SelectAllCreasesCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.SelectAllCreasesCommand.Execute">
            <summary>
            When called, selects all the Crease nodes in the ExplorerControl's treelist.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.SelectAllCreasesCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            True if the Explorer is present and is of type RichCreaseExplorerControl.
            </returns>
        </member>
        <member name="T:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand">
            <summary>
            This command toggles the "DisplayVertexCreases" option of scene crease explorer
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand.Create">
            <summary>
            Creates a new ToggleDisplayVertexCreasesCommand.
            </summary>
            <returns>
            The resultant command.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand.Cancelable">
            <summary>
            ToggleDisplayVertexCreasesCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand.Execute">
            <summary>
            When called, invert the "DisplayVertexCreases" property.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand.HandleShowVertexCreasesChanged(System.Object,System.EventArgs)">
            <summary>
            This function will be called when the DisplayVertexCreases property of the 
            explorer is changed by some other objects. This command will update its 
            checked state in this function.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.BaseCreaseControls.ToggleDisplayVertexCreasesCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseCustomizationState">
            <summary>
            A base class which provides the basic implementation of ICustomizationState.Client's
            CustomizationState object should derive from this class.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCustomizationState.AddChild(MaxCustomControls.ICustomizationState)">
            <summary>
            Add a child customizationState object to the current object.
            </summary>
            <param name="stateObject">The child state object</param>
            <returns>
            Return true if successful, false otherwise.
            </returns>
        </member>
        <member name="P:MaxCustomControls.BaseCustomizationState.ChildrenCount">
            <summary>
            Get the count of child states.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseCustomizationState.ParentState">
            <summary>
            Get or set the parent customizationState of current one.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCustomizationState.GetChildByIndex(System.Int32)">
            <summary>
            Get the index-th child state object.
            </summary>
            <param name="index">the child state's index</param>
            <returns>
            If the index is valid, return the child state. null otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseCustomizationState.GetChildByName(System.String)">
            <summary>
            Get the child state object by its state name.
            </summary>
            <remarks>
            Client should use this method to get the correct child state object.
            </remarks>
            <param name="name">the name of the child state object.</param>
            <returns>
            If the name is valid, return the child state. null otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseCustomizationState.RemoveChildByIndex(System.Int32)">
            <summary>
            Remove the index-th child state object.
            </summary>
            <param name="index">the index of the child state object.</param>
            <returns>
            Return true if successful, false otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseCustomizationState.RemoveChildByName(System.String)">
            <summary>
            Remove the child state object by its state name.
            </summary>
            <param name="name">the name of the child state object to be removed.</param>
            <returns>
            Return true if successful, false otherwise.
            </returns>
        </member>
        <member name="P:MaxCustomControls.BaseCustomizationState.StateName">
            <summary>
            Get or set the name of the current ICustomizationState instance.
            the StateName should be unique among all sibling state objects.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseCustomizationState.BasePropertyKeys">
            <summary>
            List of properties that this State class serializes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseCustomizationState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Given a dictionary mapping keyNames to properties, loads the properties into
            this CustomizationState object.
            </summary>
            <remarks>
            It is the client's responsibility to serialize and deserialize custom properties,
            since the Value type in the Dictionary is a String.
            </remarks>
            <param name="aPropertySet">A dictionary mapping keyNames to properties.</param>
            <returns>Return true if loading successfully; otherwise false.</returns>
        </member>
        <member name="M:MaxCustomControls.BaseCustomizationState.SaveProperties">
            <summary>
            Create a dictionary mapping keyNames to properties, saves the properties into
            this dictionary.
            </summary>
            <remarks>
            <para>It is the client's responsibility to serialize and deserialize custom properties,
            since the Value type in the Dictionary is a String.</para>
            </remarks>
            <returns>
            Return a dictionary mapping keyNames to properties. If failed, return null.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseCustomizationState.CheckUnique(System.String)">
            <summary>
            Check if there are name conflicts in the current state object.
            </summary>
            <param name="name">name to be checked</param>
            <returns>Return true if unique, false otherwise</returns>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ChangeThumbnailTypeCommand.Create(MaxMaterialBindings.ThumbnailIconType,System.String)">
            <summary>
            Create an instance of ChangeThumbnailTypeCommand with appropriate wrapper.
            </summary>
            <param name="targetThumbnailType">
            The target thumbnail icon type.
            </param>
            <param name="name">
            The internationalized name of this command.
            </param>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.ChangeThumbnailTypeCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.ChangeThumbnailTypeCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ChangeThumbnailTypeCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ChangeThumbnailTypeCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ChangeThumbnailTypeCommand.HandleThumbnailIconTypeChanged(System.Object,System.EventArgs)">
            <summary>
            This function will be called when the thumbnail icon type of the explorer is changed by 
            some other objects. This command will update its checked state in this function.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ChangeThumbnailTypeCommand.#ctor(MaxMaterialBindings.ThumbnailIconType,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="targetThumbnailType">
            The target thumbnail icon type.
            </param>
            <param name="name">
            The internationalized name of this command.
            </param>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.MaterialFilterDescriptionRegistry">
            <summary>
            This class provides all material browser/explorer related filters.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.MaterialFilterDescriptionRegistry.FilterKey">
            <summary>
            List of conceptual filters in the filter toolbar of 
            the Material Explorer/Browser.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.MaterialFilterDescriptionRegistry.#ctor">
            <summary>
            The default MaterialFilterDescriptionRegistry constructor.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.MaterialFilterDescriptionRegistry.TexmapsFilter">
            <summary>
            Get the FilterDescription on Texmaps
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.MaterialFilterDescriptionRegistry.MaterialsFilter">
            <summary>
            Get the FilterDescription on Materials
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.MaterialExplorerTreeList">
            <summary>
            Specializes the ExplorerTreeList for the Material Explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.MaterialExplorerTreeList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.MaterialExplorerTreeList.CreateMaxTreeListHandler">
            <summary>
            Overridden so that we can supply our own implementation of TreeListHandler.
            </summary>
            <returns>A MaterialTreeListHandler object.</returns>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.MaterialExplorerTreeList.HandleCustomDrawNodeCell(System.Object,DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs)">
            <exclude/>
            <summary>
            Changes the name cell appearance to display node property feedback.
            </summary>
            <param name="sender">
            Source of the event.
            </param>
            <param name="e">
            Data about the event. The cell appearance is controlled here.
            </param>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.MaterialTreeListHandler">
            <summary>
            This class expand ExplorerTreeList and add the ability to allow user click 
            column headers for three times and clear the sort state of that column.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.MaterialTreeListHandler.#ctor(MaxCustomControls.ExplorerTreeList)">
            <summary>
            Contructor.
            </summary>
            <param name="treeList">
            The TreeList that this handler will be associated with.
            </param>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.MaterialTreeListHandler.CreateState(DevExpress.XtraTreeList.TreeListState)">
            <summary>
            The main entry point to overriding State classes which
            handle how the TreeList behaves in specific "states."
            </summary>
            <param name="state">An enumeration value of a state handling 
            object that the treelist needs to create.</param>
            <returns> 
            The control state object that handles a specific TreeList state.
            </returns>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.MaterialColumnPressedState">
            <summary>
            Overridden state used after a mouse up event occurs 
            on a column header.
            </summary>
        </member>
        <member name="F:MaxCustomControls.BaseMaterialControls.MaterialColumnPressedState.mMaxTreeListHandler">
            <summary>
            Storage for MaxTreeListHandler property.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.SelectAllMaterialsCommand">
            <summary>
            This command is used to select all the Material nodes in a RichMaterialExplorerControl
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.SelectAllMaterialsCommand.Create">
            <summary>
            A Factory method to create an instance of SelectAllMaterialsCommand.
            </summary>
            <returns>
            An instance of SelectAllMaterialsCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.SelectAllMaterialsCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.SelectAllMaterialsCommand.Cancelable">
            <summary>
            SelectAllMaterialsCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.SelectAllMaterialsCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.SelectAllMaterialsCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.SelectAllMaterialsCommand.Execute">
            <summary>
            When called, selects all the Material nodes in the ExplorerControl's treelist.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.SelectAllMaterialsCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            True if the Explorer is present and is of type RichMaterialExplorerControl.
            </returns>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.SelectAllTexmapsCommand">
            <summary>
            This command is used to select all the Texmap nodes in a RichMaterialExplorerControl
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.SelectAllTexmapsCommand.Create">
            <summary>
            A Factory method to create an instance of SelectAllTexmapsCommand.
            </summary>
            <returns>
            An instance of SelectAllTexmapsCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.SelectAllTexmapsCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.SelectAllTexmapsCommand.Cancelable">
            <summary>
            SelectAllTexmapsCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.SelectAllTexmapsCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.SelectAllTexmapsCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.SelectAllTexmapsCommand.Execute">
            <summary>
            When called, selects all the Texmap nodes in the ExplorerControl's treelist.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.SelectAllTexmapsCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            True if the Explorer is present and is of type RichMaterialExplorerControl.
            </returns>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.ToggleDisplayThumbnailCommand">
            <summary>
            This command is used to toggle the DisplayThumbnail state of an ExplorerControl
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleDisplayThumbnailCommand.Create">
            <summary>
            Create an instance of ToggleDisplayThumbnailCommand.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.ToggleDisplayThumbnailCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.ToggleDisplayThumbnailCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleDisplayThumbnailCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleDisplayThumbnailCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleDisplayThumbnailCommand.HandleDisplayThumbnailChanged(System.Object,System.EventArgs)">
            <summary>
            This function will be called when the DisplayThumbnail state of the explorer is changed by 
            some other objects. This command will update its checked state in this function.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleDisplayThumbnailCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleDisplayThumbnailCommand.#cctor">
            <summary>
            The static constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand">
            <summary>
            This command toggle the "TraversalEmptyMaps" option of material explorer
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand.Create">
            <summary>
            Creates a new ToggleShowObjectNodeCommand.
            </summary>
            <returns>
            The resultant command.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand.Cancelable">
            <summary>
            ToggleShowObjectNodeCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand.Execute">
            <summary>
            When called, invert the "TraversalEmptyMaps" property.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand.HandleTraversalEmptyMapsChanged(System.Object,System.EventArgs)">
            <summary>
            This function will be called when the TraversalEmptyMaps property of the 
            explorer is changed by some other objects. This command will update its 
            checked state in this function.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.ToggleTraversalEmptyMapsCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState">
            <summary>
            This class should store the states of richMaterialExplorerControl such as 
            the filterUnunsedChannel, thumbnail size.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.#ctor(System.Int32)">
            <summary>
            Construct with a given number of columns.
            </summary>
            <param name="aColumnCount">
            Number of columns in the explorer.
            </param>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.RichMaterialExplorerControlKeys">
            <summary>
            Key constants for properties specific to the RichMaterialExplorerControl.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the values from the given dictionary into this customization object.
            Extends the base method to add support for properties specific to the
            RichMaterialExplorerControl.
            </summary>
            <param name="aPropertySet">
            A dictionary mapping keynames to properties.
            </param>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.SaveProperties">
            <summary>
            Creates a dictionary mapping KeyNames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            Extends the base implementation to add support for properties
            specific to RichMaterialExplorerControl.
            </remarks>
            <returns>
            A dictionary mapping keynames to property values.
            </returns>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.ThumbnailType">
            <summary>
            Determine the icon size of the nodes.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.FilterToolbarState">
            <summary>
            ToolBarState of FilterToolbar
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.FilterStates">
            <summary>
            Dictionary used to store filter states
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.TraversalEmptyMaps">
            <summary>
            Determine if the unused map channels are displayed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.SaveFilterStates(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Save filter states to a dictionary
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.LoadFilterStates(System.String)">
            <summary>
            Load filter states from a dictionary
            </summary>
        </member>
        <member name="F:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.mThumbnailType">
            <summary>
            The thumbnail icon type of the material explorer.
            </summary>
        </member>
        <member name="F:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.mFilterToolbarState">
            <summary>
            Storage for "FilterToolbar" state 
            </summary>
        </member>
        <member name="F:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControlState.mFilterStates">
            <summary>
            Storage for FilterStates.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.RepositoryCustomizedComboBoxViewInfo">
            <summary>
            Specializes ComboBoxViewInfo to control when buttons are drawn
            in the editor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RepositoryCustomizedComboBoxViewInfo.#ctor(DevExpress.XtraEditors.Repository.RepositoryItem)">
            <summary>
            Constructor.
            </summary>
            <param name="item">An item to build the view info on.</param>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.RepositoryCustomizedComboBoxViewInfo.IsDrawButtons">
            <summary>
            Overridden to prevent drawing buttons if the editor is read-only
            or unfocused.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl">
            <summary>
            This is a basic explorer control for material explorer and material browser.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.#ctor">
            <summary>
            Default constructor.  Not bound to any data set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.#ctor(System.String,ExplorerFramework.DataFacade)">
            <summary>
            Construct with a name and data set.
            </summary>
            <param name="aName">Name for this Explorer.</param>
            <param name="aDataSource">Data set explored by this explorer.</param>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.InitializeComponentLocal">
            <summary>
            Initialize event handlers and controls.  Intended to execute 
            after the designer-generated InitializeComponent.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.CreateExplorerTreeList">
            <summary>
            Override ExplorerControl.CreateExplorerTreeList() to provide with
            the specific Material-ExplorerTreeList for ME.
            </summary>
            <returns>The created MaterialExplorerTreeList.</returns>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.FindHandler">
            <summary>
            Performs quick searches for this explorer control.
            </summary>
            <remarks>
            Overrides the base set implementation to set the MatchedProperty
            according to the Material Explorer's requirements.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.CreateState">
            <summary>
            Create a specialized customization state object for this class.
            </summary>
            <returns>
            A specialized customization state object for this class.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.SaveState">
            <summary>
            Create and fill in a customization state object for the current 
            settings.
            </summary>
            <remarks>
            Overrides the base implementation to add properties specific to 
            the General Material Explorer.
            </remarks>
            <returns>
            A customization state object for serializing the current settings.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the settings configuration from a serialized state.
            </summary>
            <remarks>
            Overrides the base implementation to handle properties specific
            to the RichMaterialExplorerControl.
            </remarks>
            <param name="aState">
            A serialized customization state containing the desired settings.
            </param>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.LoadAllToolbarStates(MaxCustomControls.ICustomizationState)">
            <summary>
            Load all the toolbar states of this explorer.
            </summary>
            <param name="iState">
            The state object that contains toolbar states of this explorer.
            </param>
        </member>
        <member name="E:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.ThumbnailIconTypeChanged">
            <summary>
            This event will be invoked after the thumbnail icon type changed.
            </summary>
        </member>
        <member name="E:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.DisplayThumbnailChanged">
            <summary>
            This event will be invoked after the DisplayThumbnail state is changed.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.ThumbnailType">
            <summary>
            The thumbnail icon type of the tree list.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.DisplayThumbnail">
            <summary>
            The display thumbnail state of the tree list
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.HandleThumbnailUpdated(System.Object,System.EventArgs)">
            <summary>
            When one thumbnail icon property is changed, this function will be called.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.HandleTraversalListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Respond to traversal list change event and invalidate all deferred rendering 
            commands.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.HandleTreeListPaintBegin(System.Object,System.EventArgs)">
            <summary>
            Prepare for the beginning of treelist.OnPaint.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.HandleTreeListPaintEnd(System.Object,System.EventArgs)">
            <summary>
            This is invoked at the end of treelist.OnPaint.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.InitializeThumbnailControl">
            <summary>
            Set up event handlers for controlling thumbnail icon.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.ApplyRepositoryItem(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Handler for TreeListColumn.CollectionChanged event.
            </summary>
            <param name="sender">the source of the event</param>
            <param name="e">event args for this event</param>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.FilterToolbar">
            <summary>
            Toolbar Control containing filter buttons.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.CreateFilterDescriptionRegistry">
            <summary>
            Create a specific filter description registry instance for a derived 
            class of RichMaterialExplorerControl.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.InitializeFilterToolbar">
            <summary>
            Initialize all filters of this control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.RaiseTraversalEmptyMapsChanged">
            <summary>
            Handles the traversal empty maps changed event and update UI.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.UpdateColors">
            <summary>
            Update the Control colors according to the CUI settings.  Implements
            the CuiUpdatable interface.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RichMaterialExplorerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.CustomizedComboBoxEdit">
            <summary>
            The class expanded devexpress ComboBoxEdit and is used for editing 
            MaxMaterialBindings.IComboBoxDataSource.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BaseMaterialControls.CustomizedComboBoxEdit.EditValue">
            <summary>
            Set or get the current IComboBoxDataSource that being edit by this 
            editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BaseMaterialControls.RepositoryCustomizedComboBox">
            <summary>
            Overrides the standard DevExpress RepositoryItemComboBox. 
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RepositoryCustomizedComboBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RepositoryCustomizedComboBox.Clone">
            <summary>
            Override of the Clone method to return this derived class.
            </summary>
            <returns> A clone of this object.</returns>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RepositoryCustomizedComboBox.CreateEditor">
            <summary>
            Creates a CustomizedComboBox for this repository item's number type.
            </summary>
            <returns>
            A new CustomizedComboBox for this repository item's number type.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BaseMaterialControls.RepositoryCustomizedComboBox.CreateViewInfo">
            <summary>
            Creates and returns a RepositoryCustomizedComboBoxViewInfo object based on this spinner.
            </summary>
            <returns>Returns a RepositoryCustomizedComboBoxViewInfo object based on this spinner.</returns>
        </member>
        <member name="T:MaxCustomControls.BooleanExplorerControls.BooleanExplorerCustomizationState">
            <summary>
            CustomizationState class for saving and loading BooleanExplorer's states.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerCustomizationState.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MaxCustomControls.BooleanExplorerControls.BooleanExplorerCustomizationState.BooleanExplorerPropertyKeys">
            <summary>
            Key constants for properties specific to the Boolean Explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerCustomizationState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerCustomizationState.SaveProperties">
            <summary>
            Creates a dictionary mapping keynames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            Extends the base implementation to add support for properties
            specific to Boolean Explorer.
            </remarks>
            <returns>
            A dictionary mapping keynames to property values.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerCustomizationState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the values from the given dictionary into this customization object.
            Extends the base method to add support for properties specific to the
            Boolean Explorer.
            </summary>
            <param name="dictionary">
            A dictionary mapping keynames to properties.
            </param>
        </member>
        <member name="P:MaxCustomControls.BooleanExplorerControls.BooleanExplorerCustomizationState.SplitterDistance">
            <summary>
            The splitter distance of the splitContainer
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.#ctor(System.String)">
            <summary>
            Construct with a name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.AppendCustomizeMenuItem(System.Windows.Forms.ToolStripMenuItem)">
            <exclude/>
            <summary>
            Append a menu item to the end of the Customize menu.
            </summary>
            <remarks>
            This method is only used internally.
            </remarks>
            <param name="menuItem">The menu item to append to Customize menu</param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.InitializeComponentLocal(System.String)">
            <summary>
            Construct controls and bind event handlers.
            </summary>
            <remarks>
            Intended to run after the designer-generated InitializeComponent 
            method.
            </remarks>
            <param name="name">Passed on to the ExplorerControl.</param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.ConfigureSceneBooleanExplorerContextMenu">
            <summary>
            Configures the right-click menu for the Scene Boolean Explorer control
            </summary>
        </member>
        <member name="P:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.ExplorerControl">
            <summary>
            The ExplorerControl inside this dialog.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.OnSceneBooleanExplorerControlRemoved">
            <summary>
            Called when the old Scene Boolean Explorer Control is going to be removed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.OnSceneBooleanExplorerControlSetup">
            <summary>
            Called when a new Scene Boolean Explorer Control is set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.SaveState">
            <summary>
            Create and fill the states of Boolean Explorer Dialog.
            </summary>
            <returns>
            A CustomizationState object containing Boolean Explorer's states.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the Boolean Explorer's states.
            </summary>
            <param name="stateToLoad">
            The object which contains the states of the Boolean Explorer.
            </param>
            <returns>Return true if load successfully, false otherwise</returns>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.CreateState">
            <summary>
            A factory method for creating the state object that represents this form.
            Clients deriving from this class should override this method and return
            their own derived State object.
            </summary>
            <returns>An empty State object that is used to persist and serialize
            the state of this object.</returns>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.HandleSceneBooleanFindToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the find toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.HandleSceneBooleanSelectionToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the selection toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.HandleSceneBooleanToolsToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the tools toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="F:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.BooleanExplorerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BooleanExplorerControls.ChangeSortStrategyCommand">
            <summary>
            This command changes the sort strategy of SceneBooleanExplorer
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.ChangeSortStrategyCommand.Create(System.String,MaxBooleanBindings.SceneBooleanSortStrategy)">
            <summary>
            Creates a new ChangeSortStrategyCommand.
            </summary>
            <param name="name">
            The name of the command.
            </param>
            <param name="targetSortStrategy">
            The target sort strategy.
            </param>
            <returns>
            The resultant command.
            </returns>
        </member>
        <member name="P:MaxCustomControls.BooleanExplorerControls.ChangeSortStrategyCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BooleanExplorerControls.ChangeSortStrategyCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.ChangeSortStrategyCommand.Execute">
            <summary>
            When called, set the sort strategy to target sort strategy.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.ChangeSortStrategyCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.ChangeSortStrategyCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.ChangeSortStrategyCommand.HandleSortStrategyChanged(System.Object,System.EventArgs)">
            <summary>
            This function will be called when the sort strategy of the explorer is changed by 
            some other objects. This command will update its checked state in this function.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.ChangeSortStrategyCommand.#ctor(System.String,MaxBooleanBindings.SceneBooleanSortStrategy)">
            <summary>
            Constructor.
            </summary>
            <param name="name">
            The name of the command.
            </param>
            <param name="targetSortStrategy">
            The target sort strategy.
            </param>
        </member>
        <member name="T:MaxCustomControls.BooleanExplorerControls.DefaultBooleanExplorerCustomizationState">
            <summary>
            Default configuration settings for Boolean Explorers.
            This class is used if no configuration file is found.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DefaultBooleanExplorerCustomizationState.#ctor">
            <summary>
            Initializes a new instance with default settings.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DefaultBooleanExplorerCustomizationState.LoadDefaults">
            <summary>
            Initialize the standard settings with default values.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DefaultBooleanExplorerCustomizationState.LoadRawProperties">
            <summary>
            Initialize properties for which no explicit key exists in the enum to
            default values.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BooleanExplorerControls.DefaultSceneBooleanExplorerState">
            <summary>
            Default configuration settings for SceneBooleanExplorer control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DefaultSceneBooleanExplorerState.#ctor">
            <summary>
            Initializes a new SceneBooleanExplorer control with default settings.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DefaultSceneBooleanExplorerState.LoadDefaults">
            <summary>
            Initialize the standard settings with default values.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler">
            <summary>
            This class helps a max explorer container handle the drag and drop related events 
            The drag and drop could occur between different explorers or from explorer to max
            viewport.
            </summary>
            <remarks>
            <para>
            Besides the "NodeCommand", user could register additional node command to be executed
            during drag and drop. The DragDropNodeCommandEventHandler always use the first valid
            node command(IsValid method return true) to respond to the drag and drop events. The 
            sequence is first check "NodeCommand", then the additional node commands as the sequence 
            they were registered.
            </para>
            <para>
            If you want make sure a specific node command will be used first, set it to "NodeCommand".
            </para>
            </remarks>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.#ctor">
            <summary>
            Constructs an empty event handler.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.HandleNodeEvent(System.Object,ExplorerFramework.TraversalNodeEventArgs)">
            <summary>
            Event handler any Node Event.  Fires the given NodeCommand.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">
            Data about this event containing the affected node.
            </param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.HandleDragOverNode(System.Object,ExplorerFramework.TraversalNodeActionQueryEventArgs)">
            <summary>
            Handles the DragOver event on the ExplorerContainer that it is monitoring.  
            Will call IsValid method on each node command and set the result in 
            TraversalNodeDragEventArgs.DragActionIsValid to true if any IsValid method
            return true.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments for this event.  The arguments contain the
            current target node and property that allows this handler to indicate whether
            the NodeCommand is valid for this target.</param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.HandleBeforeDragNodes(System.Object,System.EventArgs)">
            <summary>
            Handles the BeforeDragNodes event on the TreeList that it is monitoring.  
            It gets the explorer from which the event is raised and set it to all the 
            registered node commands.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments for this event.</param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.HandleDragEnterTreeList(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Handles the DragEnter event on the TreeList that it is monitoring.  
            It will try to get the source explorer from which the drag and drop 
            was raised. And update all the node commands' Explorer property accordingly.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments for this event.  The arguments contain the
            source explorer from which the drag and drop operation is first raised.
            </param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.HandleQueryContinueDrag(System.Object,System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Handles the QueryContinueDrag event on the TreeList that it is monitoring.  
            It is used to handle drag and drop from explorer to viewport.
            It first check if the cursor is over any viewport of 3ds Max. Then it try
            to get the objects that the cursor is over. Afterwards, if dragging, it call
            the will check if any registered node command could handle the operation and 
            set the cursor accordingly. If dropped, it will execute the first valid node 
            command.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments for this event.</param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.RegisterAdditionalNodeCommand(ExplorerFramework.NodeCommand)">
            <summary>
            Register an additional node command and update its Explorer property.
            </summary>
            <param name="cmd">
            The NodeCommand to be registered.
            </param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.UnregisterAdditionalNodeCommand(ExplorerFramework.NodeCommand)">
            <summary>
            Unregister an additional node command.
            </summary>
            <param name="cmd">
            The NodeCommand to be unregistered.
            </param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.UnregisterAllAdditionalCommands">
            <summary>
            Unregister all the additional node commands.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.CanDropOnNode(ExplorerFramework.TraversalNode)">
            <summary>
            Decide if the drop operation can be performed or not.
            </summary>
            <param name="node"> The target node of the drop operation </param>
            <returns>
            true if the drop operation is valid, false otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.DoDropOnNodes(ExplorerFramework.TraversalNode,ExplorerFramework.TraversalNode[])">
            <summary>
            Try to call each command to handle the drop operation.
            <remarks>
            If there are more than one command could handle the drop operation, one solution is 
            to pop up a dialog to let user decide to run which command or use a hotkey combination. 
            But for now, there is no such conflict.
            </remarks>
            </summary>
            <param name="node">The target node of the node command</param>
            <param name="nodes">If the node command will work on a group of nodes,
            pass them by this param.
            </param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.TryToExecuteNodeCommand(ExplorerFramework.NodeCommand,ExplorerFramework.TraversalNode,ExplorerFramework.TraversalNode[])">
            <summary>
            Try to execute the node command.
            </summary>
            <param name="cmd">The node command to be executed</param>
            <param name="node">The target node of the node command</param>
            <param name="nodes">If the node command will work on a group of nodes,
            pass them by this param.
            </param>
            <returns>
            If the node command is executed, return true. false otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.FindExplorerFromControl(System.Windows.Forms.Control)">
            <summary>
            This method browses the parent hierarchy a control until it find 
            a Explorer control.
            </summary>
            <param name="ctrl">
            The control from which we start to find a Explorer control
            </param>
            <returns>
            If found, return the Explorer control, else return null.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.DragDropBooleanCommandEventHandler.FindDragSourceExplorer(System.Windows.Forms.DragEventArgs)">
            <summary>
            Find the drag source explorer
            </summary>
            <param name="e"> DragEventArgs </param>
            <returns>
            The drag source explorer if found.
            </returns>
        </member>
        <member name="T:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl">
            <summary>
            Specializes the RichBooleanExplorerControl for the top part of ME. This explores
            the info of all the boolean used in the current scene.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.#ctor">
            <summary>
            Default constructor.  Not bound to any data set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.#ctor(System.String,ExplorerFramework.DataFacade)">
            <summary>
            Construct with a name and data set.
            </summary>
            <param name="aName">Name for this Explorer.</param>
            <param name="aDataSource">Data set explored by this explorer.</param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.CreateState">
            <summary>
            Create a specialized customization state object for this class.
            </summary>
            <returns>
            A specialized customization state object for this class.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.SaveState">
            <summary>
            Create and fill in a customization state object for the current 
            settings.
            </summary>
            <remarks>
            Overrides the base implementation to add properties specific to 
            the SceneBooleanExplorerControl.
            </remarks>
            <returns>
            A customization state object for serializing the current settings.
            </returns>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the settings configuration from a serialized state.
            </summary>
            <remarks>
            Overrides the base implementation to handle properties specific
            to the SceneBooleanExplorerControl.
            </remarks>
            <param name="aState">
            A serialized customization state containing the desired settings.
            </param>
        </member>
        <member name="P:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.DisplayObjects">
            <summary>
            Is the boolean explorer show "objects" node?
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.RaiseDisplayObjectsChanged">
            <summary>
            Handles the show object changed event and update UI.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.SortStrategy">
            <summary>
            Is the boolean explorer sort by object nodes?
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.RaiseSortStrategyChanged">
            <summary>
            Handles the sort by object changed event and update UI.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.CreateFilterDescriptionRegistry">
            <summary>
            Create a specific filter description registry instance.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.InitializeComponentLocal">
            <summary>
            Initialize event handlers and controls.  Intended to execute 
            after the designer-generated InitializeComponent.   
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.InitializeToolbars">
            <summary>
            Initialize all the toolbars for this ExplorerControl
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.CreateExplorerTreeList">
            <summary>
            Override RichBooleanExplorerControl.CreateExplorerTreeList() to provide with
            the specific ExplorerTreeList for scene boolean explorer.
            </summary>
            <returns>The created SceneExplorerTreeList.</returns>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerFilterRegistry">
            <summary>
            This class provides all scene boolean explorer related filters.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerFilterRegistry.#ctor">
            <summary>
            The default SceneCreaseExplorerFilterRegistry constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerState.#ctor(System.Int32)">
            <summary>
            Construct with a given number of columns.
            </summary>
            <param name="aColumnCount">
            Number of columns in the explorer.
            </param>
        </member>
        <member name="T:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerState.SceneBooleanExplorerKeys">
            <summary>
            Key constants for properties specific to the SceneBooleanExplorer control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the values from the given dictionary into this customization object.
            Extends the base method to add support for properties specific to the
            SceneBooleanExplorer control.
            </summary>
            <param name="aPropertySet">
            A dictionary mapping keynames to properties.
            </param>
        </member>
        <member name="M:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerState.SaveProperties">
            <summary>
            Creates a dictionary mapping KeyNames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            Extends the base implementation to add support for properties
            specific to SceneBooleanExplorer control.
            </remarks>
            <returns>
            A dictionary mapping keynames to property values.
            </returns>
        </member>
        <member name="P:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerState.SortStrategy">
            <summary>
            Determine whether the tree list is sorted by boolean or by object.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BooleanExplorerControls.SceneBooleanExplorerState.DisplayObjects">
            <summary>
            Determine whether the tree list show "object" node
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneBooleanExplorerExpandState">
            <summary>
            This class is used to determine the default expand state of a specific 
            node.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneBooleanExplorerExpandState.#ctor(MaxCustomControls.ExplorerControl)">
            <summary>
            Constructor.
            </summary>
            <param name="explorerControl">
            The explorerControl, used to fetch the traversal node 
            from an id.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneBooleanExplorerExpandState.IsExpanded(System.Int32)">
            <summary>
            Check if a specific node is expanded in default.
            </summary>
            <param name="nodeID">
            The given node id.
            </param>
            <returns>
            True if it is expanded, false otherwise.
            </returns>
            <remarks>
            Default behavior: always returns true.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.SceneBooleanExplorerExpandState.CheckIfRecordState(System.Int32)">
            <summary>
            Check if a specific node's expand state should be recorded.
            </summary>
            <param name="nodeID">
            The given node id.
            </param>
            <returns>
            True if it should be recorded, false otherwise.
            </returns>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.CommandUtilites">
            <summary>
            This utility class helps create Menu Item(s) with given command(s).
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandUtilites.CreateCommandMenuItem(ExplorerFramework.Command,MaxCustomControls.ExplorerControl)">
            <summary>
            Create a command menu item according to the type of the command.
            </summary>
            <param name="command">
            The given command.
            </param>
            <param name="explorer">
            The explorer the command resides in.
            </param>
            <returns>
            The resultant command menu-item.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandUtilites.CreateCommandsGroupMenuItem(System.String,System.Collections.Generic.IEnumerable{ExplorerFramework.Command},MaxCustomControls.ExplorerControl)">
            <summary>
            Creates a menu item which contains a group of sub menu items with given commands.
            </summary>
            <param name="MenuItemDescription">
            The menu item description for the group of commands.
            </param>
            <param name="commands">
            The group of commands.
            </param>
            <param name="explorer">
            The explorer the command resides in.
            </param>
            <returns>
            The menu item that contains the group of CommandMenusItems for the 
            group of commands.
            </returns>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.ToggleLockEditingCommand">
            <summary>
            This command is used to toggle the EditingEnabled property of a ExplorerControl
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleLockEditingCommand.Create">
            <summary>
            Creates a new ToggleLockEditingCommand
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ToggleLockEditingCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ToggleLockEditingCommand.Explorer">
            <summary>
            Override Base.Explorer to bind/unbind local event handler to
            external checked-changed event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleLockEditingCommand.IsValid">
            <summary>
            Are the operands for this Command in a valid state for it to Execute?
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleLockEditingCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleLockEditingCommand.IsChecked">
            <summary>
            Get the internal check state.
            </summary>
            <returns>
            Returns true if the Editing is disabled, returns false otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleLockEditingCommand.HandleEditingEnableChanged(System.Object,System.EventArgs)">
            <summary>
            This function updates the status and appearance of UI items 
            according to the status of EditingEnabled.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleLockEditingCommand.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleLockEditingCommand.#cctor">
            <summary>
            The static constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.SelectAllCommand">
            <summary>
            This command is used to select all the nodes in the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectAllCommand.Create">
            <summary>
            A Factory method to create an instance of SelectAllCommand.
            </summary>
            <returns>
            An instance of SelectAllCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectAllCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.SelectAllCommand.Cancelable">
            <summary>
            SelectAllCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.SelectAllCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectAllCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectAllCommand.Execute">
            <summary>
            When called, selects all the nodes in the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectAllCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.SelectInvertCommand">
            <summary>
            This command is used to invert the selection of the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectInvertCommand.Create">
            <summary>
            A Factory method to create an instance of SelectInvertCommand.
            </summary>
            <returns>
            An instance of SelectInvertCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectInvertCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.SelectInvertCommand.Cancelable">
            <summary>
            SelectInvertCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.SelectInvertCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectInvertCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectInvertCommand.Execute">
            <summary>
            When called, invert current selection in the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectInvertCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.ToggleSelectChildrenCommand">
            <summary>
            This command toggles the "Select Children" state of an Explorer
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleSelectChildrenCommand.Create">
            <summary>
            Creates a new ToggleSelectChildrenCommand.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ToggleSelectChildrenCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ToggleSelectChildrenCommand.Explorer">
            <summary>
            Override Base.Explorer to bind/unbind local event handler to
            external checked-changed event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleSelectChildrenCommand.IsValid">
            <summary>
            Are the operands for this Command in a valid state for it to Execute?
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleSelectChildrenCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleSelectChildrenCommand.IsChecked">
            <summary>
            Get the internal check state.
            </summary>
            <returns>
            Returns true if the SelectChild state is true, returns false
            otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleSelectChildrenCommand.HandleSelectOptionsChanged(System.Object,System.EventArgs)">
            <summary>
            This function updates the status and appearance of UI items 
            according to the status of SelectChildren.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleSelectChildrenCommand.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleSelectChildrenCommand.#cctor">
            <summary>
            The static constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.InvertToggleFilterCommand">
            <summary>
            The Checked state of this command is true if its filter is disabled,
            And it Checked state is false otherwise.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.InvertToggleFilterCommand.IsChecked">
            <summary>
            Get the internal check state.
            </summary>
            <returns>
            Returns true if this filter is disabled, returns false
            otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.InvertToggleFilterCommand.Create(System.String,ExplorerFramework.IFilterItem)">
            <summary>
            Creates a new InvertToggleFilterCommand.
            </summary>
            <param name="name">
            The name of this command.
            </param>
            <param name="filter">
            The filter of this command.
            </param>
            <returns>
            The resultant filter.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.InvertToggleFilterCommand.#ctor(System.String,ExplorerFramework.IFilterItem)">
            <summary>
            The default constructor.
            </summary>
            <param name="name">
            Internationalized name of this command.
            </param>
            <param name="filter">
            The filter of this command.
            </param>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.ToggleFilterCommandCreator">
            <summary>
            This utility class helps create a toggleFilterCommand according
            to a given filterDescription.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleFilterCommandCreator.Create(MaxCustomControls.FilterDescription)">
            <summary>
            Create the ToggleFilterCommand.
            </summary>
            <param name="filterDescription">
            The given filterDescription.
            </param>
            <returns>
            The resultant command.
            </returns>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.ChangeExpandStateCommand">
            <summary>
            This class can be used to collapse or expand a set of tree list nodes 
            which satisfy a specific condition.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ChangeExpandStateCommand.Create(System.Predicate{ExplorerFramework.TraversalNode},System.Boolean,System.String)">
            <summary>
            Create a ChangeExpandStateCommand instance.
            </summary>
            <param name="predicate">
            The condition. The a node satisfy this condition, the node will be 
            collapsed or expanded.
            </param>
            <param name="expand">
            Expand or collapse the node?
            </param>
            <param name="name">
            The internationalized name of this command.
            </param>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ChangeExpandStateCommand.#ctor(System.Predicate{ExplorerFramework.TraversalNode},System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="predicate">
            The condition. The a node satisfy this condition, the node will be 
            collapsed or expanded.
            </param>
            <param name="expand">
            Expand or collapse the node?
            </param>
            <param name="name">
            The internationalized name of this command.
            </param>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ChangeExpandStateCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ChangeExpandStateCommand.Execute">
            <summary>
            When called, do the collpase/expand operation on each node that satisfy our condition.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.ChangeExpandStateOperation">
            <summary>
            This class can be used to collapse or expand a set of tree list nodes 
            which satisfy a specific condition.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ChangeExpandStateOperation.#ctor(System.Predicate{ExplorerFramework.TraversalNode},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="predicate">
            The condition. The a node satisfy this condition, the node will be 
            collapsed or expanded.
            </param>
            <param name="expand">
            Expand or collapse the node?
            </param>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ChangeExpandStateOperation.DataFacade">
            <summary>
            The datafacade, used for obtaining TraversalNode from a TreeListNode.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ChangeExpandStateOperation.Execute(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Execute the operation on a tree list node.
            </summary>
            <param name="node">
            The given tree list node.
            </param>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.CheckableCommand">
            <summary>
            This command is an abstract for those commands which have an internal
            state that can be checked.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CheckableCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.CheckableCommand.Checked">
            <summary>
            Get and set the checked state of the command.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.CheckableCommand.Explorer">
            <summary>
            Override Base.Explorer to bind/unbind local event handler to
            external checked-changed event.
            </summary>
        </member>
        <member name="E:MaxCustomControls.CommandSystem.CheckableCommand.CheckedChanged">
            <summary>
            The event handler will be invoked whenever the internal check state changes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CheckableCommand.UpdateCheckedState">
            <summary>
            This function will be called if the checked state of this command internally changed. 
            This will notify corresponding UI items to update their appearance.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CheckableCommand.IsChecked">
            <summary>
            Get the internal check state.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CheckableCommand.RaiseCheckedChanged">
            <summary>
            Raise the checked-changed event. So UI items that interested in this command can 
            update their appearance.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.CollapseAllCommand">
            <summary>
            This command is used to expand all the nodes in the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CollapseAllCommand.Create">
            <summary>
            A Factory method to create an instance of CollapseAllCommand.
            </summary>
            <returns>
            An instance of CollapseAllCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CollapseAllCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.CollapseAllCommand.Cancelable">
            <summary>
            CollapseAllCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.CollapseAllCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CollapseAllCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CollapseAllCommand.Execute">
            <summary>
            When called, collapse all the nodes in the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CollapseAllCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.CollapseSelectedCommand">
            <summary>
            This command is used to expand all the selected nodes in the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CollapseSelectedCommand.Create">
            <summary>
            A Factory method to create an instance of CollapseSelectedCommand.
            </summary>
            <returns>
            An instance of CollapseSelectedCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CollapseSelectedCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.CollapseSelectedCommand.Cancelable">
            <summary>
            CollapseSelectedCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.CollapseSelectedCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CollapseSelectedCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CollapseSelectedCommand.Execute">
            <summary>
            When called, collapse all the selected nodes in the explorerTreeList.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.CollapseSelectedCommand.Explorer">
            <summary>
            Override Base.Explorer to bind/unbind local event handler.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CollapseSelectedCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            If there are nodes selected in explorer, return true; false otherwise.
            </returns>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.CommandMenuItem">
            <summary>
            Menu Item encapsulating an ExplorerFramework Command.  When clicked, 
            executes the Command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandMenuItem.#ctor">
            <summary>
            Constructs the menu item.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandMenuItem.#ctor(ExplorerFramework.Command)">
            <summary>
            Constructs the menu item with a framework Command object.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandMenuItem.ExecuteCommand(System.Object,System.EventArgs)">
            <summary>
            Executes the command.  This handler is hooked into the menu item's
            Click event.
            </summary>
            <param name="sender">The source of the event - "this"</param>
            <param name="e">The arguments passed to handler - not used.</param>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.CommandMenuItem.Enabled">
            <summary>
            Overridden to call the internal Command.IsValid method.
            The Enabled property is used to determine whether the menu
            item should be greyed out or not.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.CommandMenuItem.Command">
            <summary>
            The wrapped Command object.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandMenuItem.HandleCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            This event handler will be called when the internal checked state of 
            command is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:MaxCustomControls.CommandSystem.CommandMenuItem.mCommand">
            <summary>
            Storage for the Command property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.CommandSystem.CommandMenuItem.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandMenuItem.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandMenuItem.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.CommandToolStripButton">
            <summary>
            ToolStripButton specialization of a command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandToolStripButton.#ctor">
            <summary>
            Constructs the button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.CommandToolStripButton.Command">
            <summary>
            The wrapped Command object.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandToolStripButton.ExecuteCommand(System.Object,System.EventArgs)">
            <summary>
            Executes the command.  This handler is hooked into the menu item's
            Click event.
            </summary>
            <param name="sender">The source of the event - "this"</param>
            <param name="e">The arguments passed to handler - not used.</param>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.CommandToolStripButton.Enabled">
            <summary>
            Overridden to call the internal Command.IsValid method.
            The Enabled property is used to determine whether the menu
            item should be greyed out or not.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandToolStripButton.UpdateColors">
            <summary>
            Implements CuiUpdatable interface - updates colors to those designated
            by the application CUI system.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandToolStripButton.UpdateEnabledStatus(System.Object,System.EventArgs)">
            <summary>
            Force an update of the button enabled status.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.CommandToolStripButton.HandleCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            This event handler will be called when the internal checked state of 
            command is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ConfigAdvancedFilterCommand.Create">
            <summary>
            Creates a new ConfigAdvancedFilterCommand.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ConfigAdvancedFilterCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ConfigAdvancedFilterCommand.IsValid">
            <summary>
            Are the operands for this Command in a valid state for it to Execute?
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ConfigAdvancedFilterCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ConfigAdvancedFilterCommand.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ConfigAdvancedFilterCommand.#cctor">
            <summary>
            The static constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.DisableAllFiltersCommand">
            <summary>
            This command aims for disabling all filters in the filter control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.DisableAllFiltersCommand.Create(System.String)">
            <summary>
            Factory method. Creates a DisableAllFiltersCommand.
            </summary>
            <param name="name">
            The internationalized name of this command.
            </param>
            <returns>
            A new DisableAllFiltersCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.DisableAllFiltersCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.DisableAllFiltersCommand.#ctor(System.String)">
            <summary>
            The default constructor.
            </summary>
            <param name="name">
            The name of this command.
            </param>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.EnableAllFiltersCommand">
            <summary>
            This command aims for enabling all filters in the filter control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.EnableAllFiltersCommand.Create(System.String)">
            <summary>
            Factory method. Creates a EnableAllFiltersCommand.
            </summary>
            <param name="name">
            The internationalized name of this command.
            </param>
            <returns>
            A new EnableAllFiltersCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.EnableAllFiltersCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.EnableAllFiltersCommand.#ctor(System.String)">
            <summary>
            The default constructor.
            </summary>
            <param name="name">
            The internationalized name of this command.
            </param>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.ExpandAllCommand">
            <summary>
            This command is used to expand all the nodes in the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ExpandAllCommand.Create">
            <summary>
            A Factory method to create an instance of ExpandAllCommand.
            </summary>
            <returns>
            An instance of ExpandAllCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ExpandAllCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ExpandAllCommand.Cancelable">
            <summary>
            ExpandAllCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ExpandAllCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ExpandAllCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ExpandAllCommand.Execute">
            <summary>
            When called, expand all the nodes in the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ExpandAllCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.ExpandSelectedCommand">
            <summary>
            This command is used to expand all the selected nodes in the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ExpandSelectedCommand.Create">
            <summary>
            A Factory method to create an instance of ExpandSelectedCommand.
            </summary>
            <returns>
            An instance of ExpandSelectedCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ExpandSelectedCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ExpandSelectedCommand.Cancelable">
            <summary>
            ExpandSelectedCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ExpandSelectedCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ExpandSelectedCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ExpandSelectedCommand.Execute">
            <summary>
            When called, expand all the selected nodes in the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ExpandSelectedCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            If there are nodes selected in explorer, return true; false otherwise.
            </returns>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.InvertAllFiltersCommand">
            <summary>
            This command aims for inverting all the filters in the filter control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.InvertAllFiltersCommand.Create(System.String)">
            <summary>
            Factory method. Creates a InvertAllFiltersCommand.
            </summary>
            <param name="name">
            The internationalized name of this command.
            </param>
            <returns>
            A new InvertAllFiltersCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.InvertAllFiltersCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.InvertAllFiltersCommand.#ctor(System.String)">
            <summary>
            The default constructor.
            </summary>
            <param name="name">
            The internationalized name of this command.
            </param>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.LaunchColumnChooserCommand">
            <summary>
            This command aims for launching the column chooser of
            the explorer control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.LaunchColumnChooserCommand.Create">
            <summary>
            Factory method. Creates a LaunchColumnChooserCommand.
            </summary>
            <returns>
            A new LaunchColumnChooserCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.LaunchColumnChooserCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.LaunchColumnChooserCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.LaunchColumnChooserCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.LaunchColumnChooserCommand.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.OperateAllFiltersCommand">
            <summary>
            This command is an intermidate class for operating on all filters in the 
            filter registry.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.OperateAllFiltersCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.OperateAllFiltersCommand.IsValid">
            <summary>
            Check if this command is valid.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.OperateAllFiltersCommand.#ctor(System.String)">
            <summary>
            The default constructor.
            </summary>
            <param name="name">
            The internationalized name of this command.
            </param>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.OperateAllFiltersCommand.FilterModel">
            <summary>
            Get the filter model from Explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.OperateAllFiltersCommand.FilterDescriptionRegistry">
            <summary>
            Get the filter registry from Explorer.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.ShowNameEditorCommand">
            <summary>
            This command is used to activate the cell editor to 
            batch edit all the selected nodes' names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ShowNameEditorCommand.Create">
            <summary>
            A Factory method to create an instance of RenameNodesCommand.
            </summary>
            <returns>
            An instance of RenameNodesCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ShowNameEditorCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ShowNameEditorCommand.Cancelable">
            <summary>
            RenameNodesCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ShowNameEditorCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ShowNameEditorCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ShowNameEditorCommand.Execute">
            <summary>
            When called, it active the name editor for the focused node.
            then the treelist will handle the name edit properly.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ShowNameEditorCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Return true if the name column is visible.
            </returns>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.StubCommand">
            <summary>
            The StubCommand performs all default operations for 
            a derived version of it. i.e,it provide stub function
            for Command.
            </summary>
            <remarks>
            For e.g, if a derived version of it does not implement 
            the Cancel() entry of Command, the StubCommand.Cancel()
            will be invoked and it simply does nothing.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.StubCommand.Cancelable">
            <summary>
            Can this Command be canceled before it completes?
            Always false.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.StubCommand.IsValid">
            <summary>
            Are the operands for this Command in a valid state for it to Execute?
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.StubCommand.Cancel">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleAdvancedFilterCommand.Create">
            <summary>
            Creates a new ToggleAdvancedFilterCommand.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ToggleAdvancedFilterCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ToggleAdvancedFilterCommand.Explorer">
            <summary>
            Override Base.Explorer to bind/unbind local event handler to
            external checked-changed event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleAdvancedFilterCommand.IsValid">
            <summary>
            Are the operands for this Command in a valid state for it to Execute?
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleAdvancedFilterCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleAdvancedFilterCommand.IsChecked">
            <summary>
            Get the internal check state.
            </summary>
            <returns>
            Returns true if the advanced filter is enabled, returns false
            otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleAdvancedFilterCommand.HandleAdvancedFilterEnableChanged(System.Object,System.EventArgs)">
            <summary>
            This function updates the status and apperance of UI items 
            according to the status of AdvancedFilter.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleAdvancedFilterCommand.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleAdvancedFilterCommand.#cctor">
            <summary>
            The static constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.ToggleControlVisibleCommand">
            <summary>
            This command aims for toggling the display of the given control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleControlVisibleCommand.Create(System.String,System.Windows.Forms.Control)">
            <summary>
            Creates a new ToggleControlVisibleCommand.
            </summary>
            <param name="name">
            The name of the command.
            </param>
            <param name="control">
            The given control
            </param>
            <returns>
            The resultant command.
            </returns>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ToggleControlVisibleCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleControlVisibleCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleControlVisibleCommand.IsChecked">
            <summary>
            Get the internal check state.
            </summary>
            <returns>
            Returns true if this control is visible, returns false
            otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleControlVisibleCommand.HandleControlVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the visible changed event is
            invoked by the control.
            </summary>
            <param name="sender">
            The event sender
            </param>
            <param name="e">
            The event args.
            </param>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleControlVisibleCommand.#ctor(System.String,System.Windows.Forms.Control)">
            <summary>
            The default constructor.
            </summary>
            <param name="name">
            The name of the command.
            </param>
            <param name="control">
            The given control.
            </param>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.ToggleFilterCommand">
            <summary>
            This command aims for toggling a filter.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleFilterCommand.Create(System.String,ExplorerFramework.IFilterItem)">
            <summary>
            Creates a new ToggleFilterCommand.
            </summary>
            <param name="name">
            The name of this command.
            </param>
            <param name="filter">
            The filter of this command.
            </param>
            <returns>
            The resultant filter.
            </returns>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.ToggleFilterCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleFilterCommand.IsValid">
            <summary>
            Are the operands for this Command in a valid state for it to Execute?
            </summary>
            <returns>
            Returns true if the filter corresponding to the specified filter key
            exists. Returns false otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleFilterCommand.Execute">
            <summary>
            Run this command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleFilterCommand.IsChecked">
            <summary>
            Get the internal check state.
            </summary>
            <returns>
            Returns true if this filter is enabled, returns false
            otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleFilterCommand.FilterDescriptionRegistry">
            <summary>
            Get the global filter description registry
            </summary>
            <returns>
            the filter description registry from the associated explorer control 
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleFilterCommand.HandleFilterChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the event when the filter changed.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event args.
            </param>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.ToggleFilterCommand.#ctor(System.String,ExplorerFramework.IFilterItem)">
            <summary>
            The default constructor.
            </summary>
            <param name="name">
            Internationalized name of this command.
            </param>
            <param name="filter">
            The filter of this command.
            </param>
        </member>
        <member name="T:MaxCustomControls.CommandSystem.SelectNoneCommand">
            <summary>
            This command is used to clear the selection of the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectNoneCommand.Create">
            <summary>
            A Factory method to create an instance of SelectNoneCommand.
            </summary>
            <returns>
            An instance of SelectNoneCommand.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectNoneCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.SelectNoneCommand.Cancelable">
            <summary>
            SelectNoneCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CommandSystem.SelectNoneCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectNoneCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectNoneCommand.Execute">
            <summary>
            When called, unselect all the nodes in the explorerTreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CommandSystem.SelectNoneCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="T:MaxCustomControls.CreaseExplorerControls.ChangeSortStrategyCommand">
            <summary>
            This command changes the sort strategy of SceneCreaseExplorer
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ChangeSortStrategyCommand.Create(System.String,MaxCreaseBindings.SceneCreaseSortStrategy)">
            <summary>
            Creates a new ChangeSortStrategyCommand.
            </summary>
            <param name="name">
            The name of the command.
            </param>
            <param name="targetSortStrategy">
            The target sort strategy.
            </param>
            <returns>
            The resultant command.
            </returns>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.ChangeSortStrategyCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.ChangeSortStrategyCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ChangeSortStrategyCommand.Execute">
            <summary>
            When called, set the sort strategy to target sort strategy.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ChangeSortStrategyCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ChangeSortStrategyCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ChangeSortStrategyCommand.HandleSortStrategyChanged(System.Object,System.EventArgs)">
            <summary>
            This function will be called when the sort strategy of the explorer is changed by 
            some other objects. This command will update its checked state in this function.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ChangeSortStrategyCommand.#ctor(System.String,MaxCreaseBindings.SceneCreaseSortStrategy)">
            <summary>
            Constructor.
            </summary>
            <param name="name">
            The name of the command.
            </param>
            <param name="targetSortStrategy">
            The target sort strategy.
            </param>
        </member>
        <member name="T:MaxCustomControls.CreaseExplorerControls.CreaseExplorerCustomizationState">
            <summary>
            CustomizationState class for saving and loading CreaseExplorer's states.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerCustomizationState.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MaxCustomControls.CreaseExplorerControls.CreaseExplorerCustomizationState.CreaseExplorerPropertyKeys">
            <summary>
            Key constants for properties specific to the Crease Explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerCustomizationState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerCustomizationState.SaveProperties">
            <summary>
            Creates a dictionary mapping keynames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            Extends the base implementation to add support for properties
            specific to Crease Explorer.
            </remarks>
            <returns>
            A dictionary mapping keynames to property values.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerCustomizationState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the values from the given dictionary into this customization object.
            Extends the base method to add support for properties specific to the
            Crease Explorer.
            </summary>
            <param name="dictionary">
            A dictionary mapping keynames to properties.
            </param>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.CreaseExplorerCustomizationState.SplitterDistance">
            <summary>
            The splitter distance of the splitContainer
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.#ctor(System.String)">
            <summary>
            Construct with a name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.AppendCustomizeMenuItem(System.Windows.Forms.ToolStripMenuItem)">
            <exclude/>
            <summary>
            Append a menu item to the end of the Customize menu.
            </summary>
            <remarks>
            This method is only used internally.
            </remarks>
            <param name="menuItem">The menu item to append to Customize menu</param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.InitializeComponentLocal(System.String)">
            <summary>
            Construct controls and bind event handlers.
            </summary>
            <remarks>
            Intended to run after the designer-generated InitializeComponent 
            method.
            </remarks>
            <param name="name">Passed on to the ExplorerControl.</param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.ConfigureSceneCreaseExplorerContextMenu">
            <summary>
            Configures the right-click menu for the Scene Crease Explorer control
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.ExplorerControl">
            <summary>
            The ExplorerControl inside this dialog.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.OnSceneCreaseExplorerControlRemoved">
            <summary>
            Called when the old Scene Crease Explorer Control is going to be removed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.OnSceneCreaseExplorerControlSetup">
            <summary>
            Called when a new Scene Crease Explorer Control is set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.SaveState">
            <summary>
            Create and fill the states of Crease Explorer Dialog.
            </summary>
            <returns>
            A CustomizationState object containing Crease Explorer's states.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the Crease Explorer's states.
            </summary>
            <param name="stateToLoad">
            The object which contains the states of the Crease Explorer.
            </param>
            <returns>Return true if load successfully, false otherwise</returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.CreateState">
            <summary>
            A factory method for creating the state object that represents this form.
            Clients deriving from this class should override this method and return
            their own derived State object.
            </summary>
            <returns>An empty State object that is used to persist and serialize
            the state of this object.</returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.HandleSceneCreaseFindToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the find toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.HandleSceneCreaseSelectionToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the selection toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.HandleSceneCreaseToolsToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the tools toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="F:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.CreaseExplorerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CreaseExplorerControls.DefaultCreaseExplorerCustomizationState">
            <summary>
            Default configuration settings for Crease Explorers.
            This class is used if no configuration file is found.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.DefaultCreaseExplorerCustomizationState.#ctor">
            <summary>
            Initializes a new instance with default settings.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.DefaultCreaseExplorerCustomizationState.LoadDefaults">
            <summary>
            Initialize the standard settings with default values.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.DefaultCreaseExplorerCustomizationState.LoadRawProperties">
            <summary>
            Initialize properties for which no explicit key exists in the enum to
            default values.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CreaseExplorerControls.DefaultSceneCreaseExplorerState">
            <summary>
            Default configuration settings for SceneCreaseExplorer control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.DefaultSceneCreaseExplorerState.#ctor">
            <summary>
            Initializes a new SceneCreaseExplorer control with default settings.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.DefaultSceneCreaseExplorerState.LoadDefaults">
            <summary>
            Initialize the standard settings with default values.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl">
            <summary>
            Specializes the RichCreaseExplorerControl for the top part of ME. This explores
            the info of all the creases used in the current scene.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.#ctor">
            <summary>
            Default constructor.  Not bound to any data set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.#ctor(System.String,ExplorerFramework.DataFacade)">
            <summary>
            Construct with a name and data set.
            </summary>
            <param name="aName">Name for this Explorer.</param>
            <param name="aDataSource">Data set explored by this explorer.</param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.CreateState">
            <summary>
            Create a specialized customization state object for this class.
            </summary>
            <returns>
            A specialized customization state object for this class.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.SaveState">
            <summary>
            Create and fill in a customization state object for the current 
            settings.
            </summary>
            <remarks>
            Overrides the base implementation to add properties specific to 
            the SceneCreaseExplorerControl.
            </remarks>
            <returns>
            A customization state object for serializing the current settings.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the settings configuration from a serialized state.
            </summary>
            <remarks>
            Overrides the base implementation to handle properties specific
            to the SceneCreaseExplorerControl.
            </remarks>
            <param name="aState">
            A serialized customization state containing the desired settings.
            </param>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.DisplayObjects">
            <summary>
            Is the crease explorer show "objects" node?
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.RaiseDisplayObjectsChanged">
            <summary>
            Handles the show object changed event and update UI.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.SortStrategy">
            <summary>
            Is the crease explorer sort by object nodes?
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.RaiseSortStrategyChanged">
            <summary>
            Handles the sort by object changed event and update UI.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.CreateFilterDescriptionRegistry">
            <summary>
            Create a specific filter description registry instance.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.InitializeComponentLocal">
            <summary>
            Initialize event handlers and controls.  Intended to execute 
            after the designer-generated InitializeComponent.   
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.InitializeToolbars">
            <summary>
            Initialize all the toolbars for this ExplorerControl
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.ToggleFilterVertexCreasesCommand">
            <summary>
            Get the toggle filter command for Vertex Creases
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.ToggleFilterEdgeCreasesCommand">
            <summary>
            Get the toggle filter command for Edge Creases
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.CreateExplorerTreeList">
            <summary>
            Override RichCreaseExplorerControl.CreateExplorerTreeList() to provide with
            the specific ExplorerTreeList for scene crease explorer.
            </summary>
            <returns>The created SceneExplorerTreeList.</returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerFilterRegistry">
            <summary>
            This class provides all scene crease explorer related filters.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerFilterRegistry.#ctor">
            <summary>
            The default SceneCreaseExplorerFilterRegistry constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerState.#ctor(System.Int32)">
            <summary>
            Construct with a given number of columns.
            </summary>
            <param name="aColumnCount">
            Number of columns in the explorer.
            </param>
        </member>
        <member name="T:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerState.SceneCreaseExplorerKeys">
            <summary>
            Key constants for properties specific to the SceneCreaseExplorer control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the values from the given dictionary into this customization object.
            Extends the base method to add support for properties specific to the
            SceneCreaseExplorer control.
            </summary>
            <param name="aPropertySet">
            A dictionary mapping keynames to properties.
            </param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerState.SaveProperties">
            <summary>
            Creates a dictionary mapping KeyNames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            Extends the base implementation to add support for properties
            specific to SceneCreaseExplorer control.
            </remarks>
            <returns>
            A dictionary mapping keynames to property values.
            </returns>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerState.SortStrategy">
            <summary>
            Determine whether the tree list is sorted by crease or by object.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerState.DisplayVertexCreases">
            <summary>
            Determine whether the tree list show "vertex creases" node
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerState.DisplayEdgeCreases">
            <summary>
            Determine whether the tree list show "edge creases" node
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.SceneCreaseExplorerState.DisplayObjects">
            <summary>
            Determine whether the tree list show "object" node
            </summary>
        </member>
        <member name="T:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand">
            <summary>
            This command toggles the "DisplayEdgeCreases" option of scene crease explorer
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand.Create">
            <summary>
            Creates a new ToggleDisplayEdgeCreasesCommand.
            </summary>
            <returns>
            The resultant command.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand.Cancelable">
            <summary>
            ToggleDisplayEdgeCreasesCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand.Execute">
            <summary>
            When called, invert the "DisplayEdgeCreases" property.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand.HandleShowEdgeCreasesChanged(System.Object,System.EventArgs)">
            <summary>
            This function will be called when the DisplayEdgeCreases property of the 
            explorer is changed by some other objects. This command will update its 
            checked state in this function.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayEdgeCreasesCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand">
            <summary>
            This command toggle the "DisplayObjects" option of scene crease explorer
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand.Create">
            <summary>
            Creates a new ToggleDisplayObjectsCommand.
            </summary>
            <returns>
            The resultant command.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand.Cancelable">
            <summary>
            ToggleDisplayObjectsCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand.Execute">
            <summary>
            When called, invert the "DisplayObjects" property.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand.HandleShowObjectNodeChanged(System.Object,System.EventArgs)">
            <summary>
            This function will be called when the DisplayObjects property of the 
            explorer is changed by some other objects. This command will update its 
            checked state in this function.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.CreaseExplorerControls.ToggleDisplayObjectsCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneCreaseExplorerExpandState">
            <summary>
            This class is used to determine the default expand state of a specific 
            node.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneCreaseExplorerExpandState.#ctor(MaxCustomControls.ExplorerControl)">
            <summary>
            Constructor.
            </summary>
            <param name="explorerControl">
            The explorerControl, used to fetch the traversal node 
            from an id.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneCreaseExplorerExpandState.IsExpanded(System.Int32)">
            <summary>
            Check if a specific node is expanded in default.
            </summary>
            <param name="nodeID">
            The given node id.
            </param>
            <returns>
            True if it is expanded, false otherwise.
            </returns>
            <remarks>
            Default behavior: always returns true.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.SceneCreaseExplorerExpandState.CheckIfRecordState(System.Int32)">
            <summary>
            Check if a specific node's expand state should be recorded.
            </summary>
            <param name="nodeID">
            The given node id.
            </param>
            <returns>
            True if it should be recorded, false otherwise.
            </returns>
        </member>
        <member name="T:MaxCustomControls.ExplorerTreeListHandler">
            <summary>
            The handler for explorer treelist.
            </summary>
            <remarks>
            This class is overridden here to obtain the TraversalNode version 
            of the multi-select anchor node.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ExplorerTreeListHandler.MultiSelectAnchorTraversalNode">
            <summary>
            The traversal node counterpart of the multi-select anchor treelist node.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeListHandler.RefeshMultiSelectAnchorTraversalNode">
            <summary>
            Refresh mMultiSelectAnchorTraversalNode according to the newly set MultiSelectAnchorNode.
            </summary>
        </member>
        <member name="T:MaxCustomControls.IShowEditorConfig">
            <summary>
            This interface might be implemented by any DevExpress.EditViewInfo.When a specific typed
            EditViewInfo is implemented with this interface, the cell with this EditViewInfo would be
            quired to determine if its editor should be shown based on the mouse position within this cell.
            </summary>
        </member>
        <member name="M:MaxCustomControls.IShowEditorConfig.IfMouseClickInAcceptedRegion(System.Drawing.Point)">
            <summary>
            This function determine if an editor should be shown based on the given
            mouse location.
            </summary>
            <param name="mouseClickLocation">The given mouse location</param>
            <returns>True if to show the editor, false otherwise.</returns>
        </member>
        <member name="T:MaxCustomControls.MaxRepositoryItemCheckEdit">
            <summary>
            DOCS: The RepositoryItemCheckEdit class provides properties, methods and events appropriate to check edit controls (CheckEdit class objects). 
            The editor's CheckEdit.Properties property should be used to access these settings.
            The RepositoryItemCheckEdit class enables you to control the editor's look and feel, check box alignment and display style, 
            the availability of a third "indeterminate" state, caption text, custom images to represent editor states, the manner in 
            which the focus rectangle is displayed, values for each check state, etc. Please refer to the CheckEdit control description 
            for details on the functionality available when using check editors.
            
            Override the default MaxRepositoryItemCheckEdit to customize the images.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemCheckEdit.#ctor(MaxCustomControls.MaxTreeList)">
            <summary>
            Constructor
            </summary>
            <param name="tree">The TreeList to which this belongs</param>
        </member>
        <member name="F:MaxCustomControls.MaxRepositoryItemCheckEdit.mTreeList">
            <summary>
            The TreeList that ultimately owns this instance
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemCheckEdit.CloseEditorOnEvent(System.Object,System.EventArgs)">
            <summary>
            Callback event handler. Called when the editor state is changed
            </summary>
            <param name="sender">An instance of the repository item</param>
            <param name="e"></param>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemCheckEdit.SetIcons">
            <summary>
            Override in a sub-class to customize the icons based on the theme and flavor (max or design)
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemCheckEdit.SetIndeterminateIcon(MaxCustomControls.IndeterminateType)">
            <summary>
            Sets the indeterminate check icon based on the theme and flavor (max or design)
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxHiddenCheckEdit">
            <summary>
            Customized with a light bulb icon
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxFrozenCheckEdit">
            <summary>
            Customized with a snow flake icon
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxRenderCheckEdit">
            <summary>
            Customized with a Teapot icon
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxDisplayBoxCheckEdit">
            <summary>
            Customized with a wireframe box icon
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxToolStripState">
            <summary>
            This class record the location and status of a toolstrip in its parent panel.
            </summary>
            <remarks>
            The location of a toolstrip in its parent panel cannot be precisely saved and 
            loaded. If you save the location of a toolstrip and load it from your customized 
            file, the location of the toolbar may not be the same location that you stored in 
            your file. According to msdn forum, this is "as designed"! 
            For that reason, I just save and load the visibility property of toolbars. To save
            and load other properties such as location and floating status, we should upgrade 
            our program to XtraBar and XtraBarManager.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.MaxToolStripState.Visible">
            <summary>
            The visible property of ToolStrip.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripState.ToString(System.String)">
            <summary>
            Convert MaxToolStripState to a string.
            </summary>
            <returns>
            The state string.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripState.TryParse(System.String,System.Char[])">
            <summary>
            Load MaxToolStripState from a string.
            </summary>
            <param name="value">
            String value of MaxToolStripState.
            </param>
            <param name="separator">
            Chars used to separate the sub-strings.
            </param>
            <returns>
            The MaxToolStripState object created from the state string. 
            </returns>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.ChangeSortStrategyCommand">
            <summary>
            This command changes the sort strategy of SceneMaterialExplorer
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ChangeSortStrategyCommand.Create(System.String,MaxMaterialBindings.SceneMaterialSortStrategy)">
            <summary>
            Creates a new ChangeSortStrategyCommand.
            </summary>
            <param name="name">
            The name of the command.
            </param>
            <param name="targetSortStrategy">
            The target sort strategy.
            </param>
            <returns>
            The resultant command.
            </returns>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.ChangeSortStrategyCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.ChangeSortStrategyCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ChangeSortStrategyCommand.Execute">
            <summary>
            When called, set the sort strategy to target sort strategy.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ChangeSortStrategyCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ChangeSortStrategyCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ChangeSortStrategyCommand.HandleSortStrategyChanged(System.Object,System.EventArgs)">
            <summary>
            This function will be called when the sort strategy of the explorer is changed by 
            some other objects. This command will update its checked state in this function.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ChangeSortStrategyCommand.#ctor(System.String,MaxMaterialBindings.SceneMaterialSortStrategy)">
            <summary>
            Constructor.
            </summary>
            <param name="name">
            The name of the command.
            </param>
            <param name="targetSortStrategy">
            The target sort strategy.
            </param>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand">
            <summary>
            This command toggle the "DisplayObjects" option of scene material explorer
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand.Create">
            <summary>
            Creates a new ToggleDisplayObjectsCommand.
            </summary>
            <returns>
            The resultant command.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand.Cancelable">
            <summary>
            ToggleDisplayObjectsCommand is not cancelable.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand.Cancel">
            <summary>
            Do nothing since this command is not cancelable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand.Execute">
            <summary>
            When called, invert the "DisplayObjects" property.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand.IsValid">
            <summary>
            Tell whether the command is valid to be called.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand.HandleShowObjectNodeChanged(System.Object,System.EventArgs)">
            <summary>
            This function will be called when the DisplayObjects property of the 
            explorer is changed by some other objects. This command will update its 
            checked state in this function.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleDisplayObjectsCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.DefaultSceneMaterialExplorerState">
            <summary>
            Default configuration settings for SceneMaterialExplorer control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.DefaultSceneMaterialExplorerState.#ctor">
            <summary>
            Initializes a new SceneMaterialExplorer control with default settings.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.DefaultSceneMaterialExplorerState.LoadDefaults">
            <summary>
            Initialize the standard settings with default values.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.DefaultSelectedMaterialExplorerState">
            <summary>
            Default configuration settings for SelectedMaterialExplorer control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.DefaultSelectedMaterialExplorerState.#ctor">
            <summary>
            Initializes the SelectedMaterialExplorer control with default settings.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.DefaultSelectedMaterialExplorerState.LoadDefaults">
            <summary>
            Initialize the standard settings with default values.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerFilterRegistry">
            <summary>
            This class provides all scene material explorer related filters.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerFilterRegistry.#ctor">
            <summary>
            The default SceneMaterialExplorerFilterRegistry constructor.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerFilterRegistry.SubMaterialsAndMapsFilter">
            <summary>
            Get the FilterDescription on SubMaterialsMaps
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerState.#ctor(System.Int32)">
            <summary>
            Construct with a given number of columns.
            </summary>
            <param name="aColumnCount">
            Number of columns in the explorer.
            </param>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerState.SceneMaterialExplorerKeys">
            <summary>
            Key constants for properties specific to the SceneMaterialExplorer control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the values from the given dictionary into this customization object.
            Extends the base method to add support for properties specific to the
            SceneMaterialExplorer control.
            </summary>
            <param name="aPropertySet">
            A dictionary mapping keynames to properties.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerState.SaveProperties">
            <summary>
            Creates a dictionary mapping KeyNames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            Extends the base implementation to add support for properties
            specific to SceneMaterialExplorer control.
            </remarks>
            <returns>
            A dictionary mapping keynames to property values.
            </returns>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerState.SortStrategy">
            <summary>
            Determine whether the tree list is sorted by material or by object.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerState.DisplayObjects">
            <summary>
            Determine whether the tree list show "object" node
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerFilterRegistry">
            <summary>
            This class provides all selected material explorer related filters.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerFilterRegistry.#ctor">
            <summary>
            The default SelectedMaterialExplorerFilterRegistry constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerState.#ctor(System.Int32)">
            <summary>
            Construct with a given number of columns.
            </summary>
            <param name="aColumnCount">
            Number of columns in the explorer.
            </param>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerState.SelectedMaterialExplorerPropertyKeys">
            <summary>
            Key constants for properties specific to the Selected Material Explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerState.SaveProperties">
            <summary>
            Creates a dictionary mapping keynames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            Extends the base implementation to add support for properties
            specific to Selected Material Explorer.
            </remarks>
            <returns>
            A dictionary mapping keynames to property values.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the values from the given dictionary into this customization object.
            Extends the base method to add support for properties specific to the
            Selected Material Explorer.
            </summary>
            <param name="dictionary">
            A dictionary mapping keynames to properties.
            </param>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerState.SyncToMaterialExplorer">
            <summary>
            Determine if the bottom tree list will be updated
            after the focus node of top tree list changes.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerState.SyncToMaterialLevel">
            <summary>
            Determine if the bottom tree list will display the full material tree 
            for the selected material regardless of which node in the tree is selected
            in the top tree list. 
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerState.mMaterialToolsToolbarState">
            <summary>
            Storage for "MaterialTools" toolbar state 
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialLevelCommand">
            <summary>
            This command is used to toggle the "SyncToMaterialLevel" property of selected 
            material explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialLevelCommand.Create">
            <summary>
            Create an instance of ToggleSyncToMaterialLevelCommand.
            </summary>
            <returns>
            A new instance of ToggleSyncToMaterialLevelCommand.
            </returns>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialLevelCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialLevelCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialLevelCommand.Execute">
            <summary>
            When called, change the "SyncToMaterialLevel" property.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialLevelCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialLevelCommand.HandleSyncToMaterialLevelChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the "SyncToMaterialLevel" changed event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialLevelCommand.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.DefaultMaterialExplorerCustomizationState">
            <summary>
            Default configuration settings for Material Explorers.
            This class is used if no configuration file is found.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.DefaultMaterialExplorerCustomizationState.#ctor">
            <summary>
            Initializes a new instance with default settings.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.DefaultMaterialExplorerCustomizationState.LoadDefaults">
            <summary>
            Initialize the standard settings with default values.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.DefaultMaterialExplorerCustomizationState.LoadRawProperties">
            <summary>
            Initialize properties for which no explicit key exists in the enum to
            default values.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.MaterialExplorerCustomizationState">
            <summary>
            CustomizationState class for saving and loading MaterialExplorer's states.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerCustomizationState.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.MaterialExplorerCustomizationState.MaterialExplorerPropertyKeys">
            <summary>
            Key constants for properties specific to the Material Explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerCustomizationState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerCustomizationState.SaveProperties">
            <summary>
            Creates a dictionary mapping keynames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            Extends the base implementation to add support for properties
            specific to Material Explorer.
            </remarks>
            <returns>
            A dictionary mapping keynames to property values.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerCustomizationState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the values from the given dictionary into this customization object.
            Extends the base method to add support for properties specific to the
            Material Explorer.
            </summary>
            <param name="dictionary">
            A dictionary mapping keynames to properties.
            </param>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.MaterialExplorerCustomizationState.SplitterDistance">
            <summary>
            The splitter distance of the splitContainer
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.#ctor(System.String)">
            <summary>
            Construct with a name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.AppendCustomizeMenuItem(System.Windows.Forms.ToolStripMenuItem)">
            <exclude/>
            <summary>
            Append a menu item to the end of the Customize menu.
            </summary>
            <remarks>
            This method is only used internally.
            </remarks>
            <param name="menuItem">The menu item to append to Customize menu</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.IsSceneMtlNode(ExplorerFramework.TraversalNode)">
            <summary>
            This method is used to check if the input node represents a scene material
            in material explorer.
            </summary>
            <param name="node"> input node </param>
            <returns>true if the node represents a scene material, false otherwise</returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.InitializeComponentLocal(System.String)">
            <summary>
            Construct controls and bind event handlers.
            </summary>
            <remarks>
            Intended to run after the designer-generated InitializeComponent 
            method.
            </remarks>
            <param name="name">Passed on to the ExplorerControl.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.ConfigureSceneMaterialExplorerContextMenu">
            <summary>
            Configures the right-click menu for the Scene Material Explorer control
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.ConfigureSelectedMaterialExplorerContextMenu">
            <summary>
            Configures the right-click menu for the Selected Material Explorer control
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.ExplorerControl">
            <summary>
            The ExplorerControl inside this dialog.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.OnSceneMaterialExplorerControlRemoved">
            <summary>
            Called when the old Scene Material Explorer Control is going to be removed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.OnSceneMaterialExplorerControlSetup">
            <summary>
            Called when a new Scene Material Explorer Control is set.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.SelectedMaterialExplorerControl">
            <summary>
            The SelectedMaterialExplorerControl inside this dialog.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.OnSelectedMaterialExplorerControlRemoved">
            <summary>
            Called when the old Selected Material Explorer Control is going to be removed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.OnSelectedMaterialExplorerControlSetup">
            <summary>
            Called when a new Selected Material Explorer Control is set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.SaveState">
            <summary>
            Create and fill the states of Material Explorer Dialog.
            </summary>
            <returns>
            A CustomizationState object containing Material Explorer's states.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the Material Explorer's states.
            </summary>
            <param name="stateToLoad">
            The object which contains the states of the Material Explorer.
            </param>
            <returns>Return true if load successfully, false otherwise</returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.CreateState">
            <summary>
            A factory method for creating the state object that represents this form.
            Clients deriving from this class should override this method and return
            their own derived State object.
            </summary>
            <returns>An empty State object that is used to persist and serialize
            the state of this object.</returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.HandleSceneMaterialFindToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the find toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.HandleSceneMaterialSelectionToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the selection toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.HandleSceneMaterialToolsToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the tools toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.HandleSceneMaterialExplorerSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            When the selection of scene material browser changed, 
            update the selected material pane accordingly.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.HandleSyncToMaterialExplorerChanged(System.Object,System.EventArgs)">
            <summary>
            When the check state of SyncToMaterialExplorer menu change to true,
            update the bottom tree list view.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.HandleSceneMaterialExplorerDataFacadeReset(System.Object,System.EventArgs)">
            <summary>
            When the data facade of scene material explorer is reset, reset the 
            root node of selectedMaterialExplorerControl.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.HandleSyncToMaterialLevelChanged(System.Object,System.EventArgs)">
            <summary>
            When the check state of SyncToMaterialLevel changed,  
            update the bottom tree list view according to the new state.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.HandleShowSelectedMateriallDisplayToolbarCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the check event of togging on or off the Display toolbar of Selected Material Explorer.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.HandleSelectedMaterialDisplayToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the Display toolbar of Selected Material Explorer.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="F:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.MaterialExplorerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl">
            <summary>
            Specializes the RichMaterialExplorerControl for the top part of ME. This explores
            the info of all the materials used in the current scene.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.#ctor">
            <summary>
            Default constructor.  Not bound to any data set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.#ctor(System.String,ExplorerFramework.DataFacade)">
            <summary>
            Construct with a name and data set.
            </summary>
            <param name="aName">Name for this Explorer.</param>
            <param name="aDataSource">Data set explored by this explorer.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.CreateState">
            <summary>
            Create a specialized customization state object for this class.
            </summary>
            <returns>
            A specialized customization state object for this class.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.SaveState">
            <summary>
            Create and fill in a customization state object for the current 
            settings.
            </summary>
            <remarks>
            Overrides the base implementation to add properties specific to 
            the SceneMaterialExplorerControl.
            </remarks>
            <returns>
            A customization state object for serializing the current settings.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the settings configuration from a serialized state.
            </summary>
            <remarks>
            Overrides the base implementation to handle properties specific
            to the SceneMaterialExplorerControl.
            </remarks>
            <param name="aState">
            A serialized customization state containing the desired settings.
            </param>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.DisplayObjects">
            <summary>
            Is the material explorer show "objects" node?
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.RaiseDisplayObjectsChanged">
            <summary>
            Handles the show object changed event and update UI.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.SortStrategy">
            <summary>
            Is the material explorer sort by object nodes?
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.RaiseSortStrategyChanged">
            <summary>
            Handles the sort by object changed event and update UI.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.CreateFilterDescriptionRegistry">
            <summary>
            Create a specific filter description registry instance.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.InitializeComponentLocal">
            <summary>
            Initialize event handlers and controls.  Intended to execute 
            after the designer-generated InitializeComponent.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.InitializeToolbars">
            <summary>
            Initialize all the toolbars for this ExplorerControl
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.ToggleFilterMaterialsCommand">
            <summary>
            Get the toggle filter command for Materials
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.ToggleFilterMapsCommand">
            <summary>
            Get the toggle filter command for TexMaps
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.ToggleFilterUnusedChannelsCommand">
            <summary>
            Get the toggle filter command for Unused Channels
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.ToggleFilterSubMaterialsMapsCommand">
            <summary>
            Get the toggle filter command for Sub-Materials/Maps
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.CreateExplorerTreeList">
            <summary>
            Override RichMaterialExplorerControl.CreateExplorerTreeList() to provide with
            the specific ExplorerTreeList for scene material explorer.
            </summary>
            <returns>The created SceneExplorerTreeList.</returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SceneMaterialExplorerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl">
            <summary>
            Specializes the RichMaterialExplorerControl for the bottom part of ME.  This shows
            the selected material information such as maps, usage, etc.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.#ctor">
            <summary>
            Default constructor.  Not bound to any data set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.#ctor(System.String,ExplorerFramework.DataFacade)">
            <summary>
            Construct with a name and data set.
            </summary>
            <param name="aName">Name for this Explorer.</param>
            <param name="aDataSource">Data set explored by this explorer.</param>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.FindHandler">
            <summary>
            Performs quick searches for this explorer control.
            </summary>
            <remarks>
            Overrides the base set implementation to set the MatchedProperty
            according to the Material Explorer's requirements.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.CreateState">
            <summary>
            Create a specialized customization state object for this class.
            </summary>
            <returns>
            A specialized customization state object for this class.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.SaveState">
            <summary>
            Create and fill in a customization state object for the current 
            settings.
            </summary>
            <remarks>
            Overrides the base implementation to add properties specific to 
            the SelectedMaterialExplorerControl.
            </remarks>
            <returns>
            A customization state object for serializing the current settings.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the settings configuration from a serialized state.
            </summary>
            <remarks>
            Overrides the base implementation to handle properties specific
            to the SelectedMaterialExplorerControl.
            </remarks>
            <param name="aState">
            A serialized customization state containing the desired settings.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.IsSceneMtlNode(ExplorerFramework.TraversalNode)">
            <summary>
            Method used to determine if a node represents a material in scene.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.LoadAllToolbarStates(MaxCustomControls.ICustomizationState)">
            <summary>
            Load all the toolbar states of this explorer.
            </summary>
            <param name="iState">
            The state object that contains toolbar states of this explorer.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.InitializeComponentLocal">
            <summary>
            Initialize event handlers and controls.  Intended to execute 
            after the designer-generated InitializeComponent.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.CreateExplorerTreeList">
            <summary>
            Override RichMaterialExplorerControl.CreateExplorerTreeList() to provide with
            the specific ExplorerTreeList for selected material explorer.
            </summary>
            <returns>The created SceneExplorerTreeList.</returns>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.CreateFilterDescriptionRegistry">
            <summary>
            Create a specific filter description registry instance.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.ResetRootNode(MaxCustomControls.ExplorerControl)">
            <summary>
            First reset the cached data, then update the root node.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.UpdateRootNode(MaxCustomControls.ExplorerControl)">
            <summary>
            Update the bottom tree list's traversal according to the focused node 
            of the top tree list.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.RootNode">
            <summary>
            The root node of selected material pane's tree list.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.SyncToMaterialExplorer">
            <summary>
            This property is used to determine if the selected material explorer will updates 
            when user selection of scene material explorer get changed.
            </summary>
        </member>
        <member name="E:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.SyncToMaterialExplorerChanged">
            <summary>
            When SyncToMaterialExplorer property is changed, this event will be fired.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.SyncToMaterialLevel">
            <summary>
            This property is used to determine if the selected material explorer will display the 
            exact selected material node as the root node or display the topmost material ancestor 
            of the selected material node as the root node.
            If this property is true, the topmost material ancestor will be displayed as root node.
            If this property is false, the current selected node of scene material explorer will be 
            displayed as root node.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.ToggleFilterMaterialsCommand">
            <summary>
            Get the toggle filter command for Materials
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.ToggleFilterMapsCommand">
            <summary>
            Get the toggle filter command for TexMaps
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.ToggleFilterUnusedChannelsCommand">
            <summary>
            Get the toggle filter command for Unused Channels
            </summary>
        </member>
        <member name="E:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.SyncToMaterialLevelChanged">
            <summary>
            When SyncToMaterialLevel property is changed, this event will be fired.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.InitializeToolbars">
            <summary>
            Initialize all the toolbars
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.SelectedMaterialExplorerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialExplorerCommand">
            <summary>
            This command is used to toggle the "SyncToMaterialExplorer" property of selected 
            material explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialExplorerCommand.Create">
            <summary>
            Create an instance of ToggleSyncToMaterialExplorerCommand.
            </summary>
            <returns>
            A new instance of ToggleSyncToMaterialExplorerCommand.
            </returns>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialExplorerCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialExplorerCommand.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialExplorerCommand.Execute">
            <summary>
            When called, change the "SyncToMaterialExplorer" property.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialExplorerCommand.IsChecked">
            <summary>
            Get the internal check state of the command.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialExplorerCommand.HandleSyncToMaterialExplorerChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the "SyncToMaterialExplorer" changed event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.MaterialExplorerControls.ToggleSyncToMaterialExplorerCommand.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneMaterialExplorerExpandState">
            <summary>
            This class is used to determine the default expand state of a specific 
            node.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneMaterialExplorerExpandState.#ctor(MaxCustomControls.ExplorerControl)">
            <summary>
            Constructor.
            </summary>
            <param name="explorerControl">
            The explorerControl, used to fetch the traversal node 
            from an id.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneMaterialExplorerExpandState.IsExpanded(System.Int32)">
            <summary>
            Check if a specific node is expanded in default.
            </summary>
            <param name="nodeID">
            The given node id.
            </param>
            <returns>
            True if it is expanded, false otherwise.
            </returns>
            <remarks>
            Default behavior: always returns true.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.SceneMaterialExplorerExpandState.CheckIfRecordState(System.Int32)">
            <summary>
            Check if a specific node's expand state should be recorded.
            </summary>
            <param name="nodeID">
            The given node id.
            </param>
            <returns>
            True if it should be recorded, false otherwise.
            </returns>
        </member>
        <member name="T:MaxCustomControls.BeforeDragDropNodeEventArgs">
            <summary>
            This class store the information used for BeforeDragDropNodeEvent.
            </summary>
        </member>
        <member name="M:MaxCustomControls.BeforeDragDropNodeEventArgs.#ctor(System.Drawing.Point,ExplorerFramework.Explorer,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="startPoint">the start point(screen coordinate)</param>
            <param name="sourceExplorer">the explorer where the drag started.</param>
            <param name="canDrag">a flag to decide if it is able to drag.</param>
        </member>
        <member name="P:MaxCustomControls.BeforeDragDropNodeEventArgs.StartPoint">
            <summary>
            Get the start point(screen coordinate).
            </summary>
        </member>
        <member name="P:MaxCustomControls.BeforeDragDropNodeEventArgs.SourceExplorer">
            <summary>
            Get the explorer where the event raised.
            </summary>
        </member>
        <member name="P:MaxCustomControls.BeforeDragDropNodeEventArgs.CanDrag">
            <summary>
            Get or set a flag which indicates if it is valid to drag.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerMenuStrip.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override the WndProc handler, so that the WM_MOUSEACTIVATE message always activates the MenuStrip.
            Otherwise if the host Form is a child window (consider the case of Material Explorer as 
            Extended Viewport), clicking the MenuStrip won't activate the Form . 
            Also, if the host Form is a child window and it's already active, the default .NET MenuStrip
            returns MA_ACTIVATEANDEAT for a WM_MOUSEACTIVATE message. This prevents the message to be 
            properly handled: clicking on menu item won't really "hit" the item.
            Related essay: http://blogs.msdn.com/rickbrew/archive/2006/01/09/511003.aspx
            </summary>
            <param name="m">Window message to be handled</param>
        </member>
        <member name="T:MaxCustomControls.CustomizationUtilities">
            <summary>
            This class is used internally to provide helper functions to 
            load/save from/into a dictionary.
            </summary>
        </member>
        <member name="M:MaxCustomControls.CustomizationUtilities.LoadBoolean(System.String)">
            <summary>
            Parses out a Boolean from a String value
            </summary>
            <param name="value">a String representation of a Boolean</param>
            <returns>true if the parse is successful</returns>
        </member>
        <member name="M:MaxCustomControls.CustomizationUtilities.ConvertSizeToStringArray(System.Drawing.Size)">
            <summary>
            Converts a Size object into a comma-separated String.
            </summary>
            <param name="size">A Size object to convert.</param>
            <returns>A comma-separated String value.</returns>
        </member>
        <member name="M:MaxCustomControls.CustomizationUtilities.ConvertStringArrayToSize(System.String[])">
            <summary>
            Converts an array of two Strings to a Size object.
            </summary>
            <param name="values">An array of at least two Strings. Values past the 1 index are ignored.</param>
            <returns>A Size object or Size.Empty if the passed in parameter is invalid.</returns>
        </member>
        <member name="M:MaxCustomControls.CustomizationUtilities.ConvertStringArrayToPoint(System.String[])">
            <summary>
            Converts an array of two Strings to a Point object.
            </summary>
            <param name="values">An array of at least two Strings. Values past the 1 index are ignored.</param>
            <returns>A Point object or Point.Empty if the passed in parameter is invalid.</returns>
        </member>
        <member name="M:MaxCustomControls.CustomizationUtilities.ConvertTwoIntsToStringArray(System.Int32,System.Int32)">
            <summary>
            Converts two ints into an array of two Strings.
            </summary>
            <param name="value1">The first value to conver.t</param>
            <param name="value2">The second value to convert.</param>
            <returns>An array of two Strings corresponding to the two ints passed in.</returns>
        </member>
        <member name="M:MaxCustomControls.CustomizationUtilities.ConvertValueToWriteSafe(System.String)">
            <summary>
            Converts a String value to a value that is safe to write in a configuration file.
            </summary>
            <remarks>
            Replaces &amp;, = and ,
            </remarks>
            <param name="aValueToWrite">A String to convert</param>
            <returns>The safe-write String</returns>
        </member>
        <member name="M:MaxCustomControls.CustomizationUtilities.ConvertWriteSafeToValue(System.String)">
            <summary>
            Converts back from a safely-written String value to a value that properly represents a value.
            </summary>
            <see>CustomizationUtilities.ConvertValueToWriteSafe(String)</see>
            <param name="aValueToConvert">A String to convert</param>
            <returns>The original String</returns>
        </member>
        <member name="F:MaxCustomControls.CustomizationUtilities.kEqualityReplacer">
            <summary>
            The replacement string for a =
            </summary>
        </member>
        <member name="F:MaxCustomControls.CustomizationUtilities.kCommaReplacer">
            <summary>
            The replacement string for a '
            </summary>
        </member>
        <member name="F:MaxCustomControls.CustomizationUtilities.kAmpersandReplacer">
            <summary>
            The replacement string for a &amp;
            </summary>
        </member>
        <member name="T:MaxCustomControls.ExplorerTreeListHitInfo">
            <exclude/>
            <summary>
            This class store the hit info of an ExplorerTreeList. Used internally.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeListHitInfo.#ctor(System.Drawing.Point,ExplorerFramework.TraversalNode)">
            <summary>
            Constructor
            </summary>
            <param name="position">Position in the ExplorerTreeList control</param>
            <param name="hitNode">Store the hit node. If not hit, set null.</param>
        </member>
        <member name="P:MaxCustomControls.ExplorerTreeListHitInfo.ExplorerTreeListPosition">
            <summary>
            Get the position in the ExplorerTreeList control.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerTreeListHitInfo.HitNode">
            <summary>
            Get the hit node. If not hit any node, null will be returned.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ExtendedResourceManager">
            <summary>
            This class extends MaxCustomControlResources and adds the support to 
            CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExtendedResourceManager.GetMultiIcon(System.String)">
            <summary>
            Get a MultiIcon resource from the assembly's set of resources.
            </summary>
            <param name="key">
            Key string used to identify the desired resource.
            </param>
            <returns>
            The resource specified by the given key, or null if the resource is not
            found.
            </returns>
        </member>
        <member name="T:MaxCustomControls.ISerializable">
            <summary>
            The interface for serializable objects. 
            </summary>
            <remarks>
            Customizable objects could contain other serializable objects 
            as its members or children. For example, a form's
            customizationState could contain several customizationState of
            the controls it contains.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ISerializable.SaveState">
            <summary>
            This method should save all the states of an object. 
            </summary>
            <remarks>
            <para>
            Since an ISerializable objects could contain other ISerializable "children",
            when saving the states, it could call each of the "children"'s SaveState and
            then adds the returned ICustomizationState objects to the "CustomizationStates" 
            list of the current ISerializable object's state object.
            </para>
            <para>
            Client should assign a unique name for each of its child state objects. And 
            use these unique names during LoadState to get the proper child state objects.
            </para>
            </remarks>
            <returns>
            An object deriving from ICustomizationState interface. If failed,
            null will be returned.
            </returns>
        </member>
        <member name="M:MaxCustomControls.ISerializable.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            This method should restore all the states of an object. 
            </summary>
            <remarks>
            <para>
            Since an ISerializable objects could contain other ISerializable "children",
            when loading the states, it could call each of the "children"'s LoadState and
            pass the corresponding CustomizationState objects in the "CustomizationStates"
            List.
            </para>
            <para>
            Client should assign a unique name for each of its child state objects. And 
            use these unique names during LoadState to get the proper child state objects.
            </para>
            </remarks>
            <param name="stateToLoad">
            An object deriving from ICustomizationState interface.
            </param>
            <returns>
            Return true if the object restore its states successfully, 
            false otherwise.
            </returns>
        </member>
        <member name="T:MaxCustomControls.ICustomizationState">
            <summary>
            Interface definition for CustomizationState. 
            </summary>
        </member>
        <member name="M:MaxCustomControls.ICustomizationState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Given a dictionary mapping keyNames to properties, loads the properties into
            this CustomizationState object.
            </summary>
            <remarks>
            <para>It is the client's responsibility to serialize and deserialize custom properties,
            since the Value type in the Dictionary is a String.</para>
            </remarks>
            <param name="aPropertySet">A dictionary mapping keyNames to properties.</param>
            <returns>Return true if loading successfully; otherwise false.</returns>
        </member>
        <member name="M:MaxCustomControls.ICustomizationState.SaveProperties">
            <summary>
            Create a dictionary mapping keyNames to properties, saves the properties into
            this dictionary.
            </summary>
            <remarks>
            <para>It is the client's responsibility to serialize and deserialize custom properties,
            since the Value type in the Dictionary is a String.</para>
            </remarks>
            <returns>
            Return a dictionary mapping keyNames to properties. If failed, return null.
            </returns>
        </member>
        <member name="M:MaxCustomControls.ICustomizationState.AddChild(MaxCustomControls.ICustomizationState)">
            <summary>
            Add a child customizationState object to the current object.
            </summary>
            <param name="stateObject">The child state object</param>
            <returns>
            Return true if successful, false otherwise.
            </returns>
        </member>
        <member name="P:MaxCustomControls.ICustomizationState.ChildrenCount">
            <summary>
            Get the count of child states.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ICustomizationState.GetChildByIndex(System.Int32)">
            <summary>
            Get the index-th child state object.
            </summary>
            <param name="index">the child state's index</param>
            <returns>
            If the index is valid, return the child state. null otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.ICustomizationState.GetChildByName(System.String)">
            <summary>
            Get the child state object by its state name.
            </summary>
            <remarks>
            Client should use this method to get the correct child state object.
            </remarks>
            <param name="name">the name of the child state object.</param>
            <returns>
            If the name is valid, return the child state. null otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.ICustomizationState.RemoveChildByIndex(System.Int32)">
            <summary>
            Remove the index-th child state object.
            </summary>
            <param name="index">the index of the child state object.</param>
            <returns>
            Return true if successful, false otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.ICustomizationState.RemoveChildByName(System.String)">
            <summary>
            Remove the child state object by its state name.
            </summary>
            <param name="name">the name of the child state object to be removed.</param>
            <returns>
            Return true if successful, false otherwise.
            </returns>
        </member>
        <member name="P:MaxCustomControls.ICustomizationState.StateName">
            <summary>
            Get or set the name of the current ICustomizationState instance.
            </summary>
            <remarks>
            The stateName of a CustomizationState object must be unique among all its siblings.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ICustomizationState.ParentState">
            <summary>
            Get or set the parent customizationState of current one.
            </summary>
        </member>
        <member name="T:MaxCustomControls.FormCustomizationState">
            <summary>
            This class stores the states of a form such as size, location.
            </summary>
        </member>
        <member name="M:MaxCustomControls.FormCustomizationState.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.FormCustomizationState.FormPropertyKeys">
            <summary>
            List of properties that this State class serializes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.FormCustomizationState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.FormCustomizationState.SaveProperties">
            <summary>
            Creates a dictionary mapping keynames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            <para>Clients wishing to add properties to their own custom MaxForms should extend
            this class and override this method.  A call to the base implementation
            is still required to persist the core customization properties.</para>
            <para>It is the client's responsibility to serialize and deserialize custom properties,
            since the Value type in the Dictionary is a String.</para>
            </remarks>
            <returns>A dictionary mapping keynames to property values.</returns>
        </member>
        <member name="M:MaxCustomControls.FormCustomizationState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Given a dictionary mapping keyNames to properties, loads the properties into
            this State object.
            </summary>
            <remarks>
            <para>KeyNames not explicitly supported by this State object are ignored.</para>
            <para>Clients wishing to add properties to their own custom MaxForms should extend
            this class and override this method.  A call to the base implementation 
            is still required to persist the core customization properties.</para>
            <para>It is the client's responsibility to serialize and deserialize custom properties,
            since the Value type in the Dictionary is a String.</para>
            </remarks>
            <param name="dictionary">A dictionary mapping keynames to properties.</param>
        </member>
        <member name="M:MaxCustomControls.FormCustomizationState.GetFormStates(System.Windows.Forms.Control)">
            <summary>
            It tries to get the form states information from a control.
            If the control is not a form, it still store the location and size.
            </summary>
            <param name="control">
            The control whose state need be retrieved.
            </param>
        </member>
        <member name="M:MaxCustomControls.FormCustomizationState.SetFormStates(System.Windows.Forms.Control)">
            <summary>
            It tries to set the form states to a control
            if the control is a form. If not, it will just set the 
            control size and location but not WindowState.
            </summary>
            <param name="control">
            The control whose states need be set.
            </param>
        </member>
        <member name="P:MaxCustomControls.FormCustomizationState.FormWindowState">
            <summary>
            A form window state - see MSDN documentation.
            </summary>
            <remarks>
            Maximized, Minimized or Normal.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.FormCustomizationState.FormSize">
            <summary>
            The size of the form, in pixels.
            </summary>
        </member>
        <member name="P:MaxCustomControls.FormCustomizationState.FormLocation">
            <summary>
            The location of the form, in pixels.
            </summary>
        </member>
        <member name="M:MaxCustomControls.FormCustomizationState.CalculateValidFormLocation(System.Drawing.Point)">
            <summary>
            Takes a point object and converts it to a valid point location.
            </summary>
            <remarks>
            This function always returns a valid screen location.  If the passed-in
            Point is valid, it is returned untouched.  If it is not valid, then a 
            a default valid screen location is returned.
            </remarks>
            <param name="aLocation">A screen location to validate.</param>
            <returns>A valid screen location.</returns>
        </member>
        <member name="M:MaxCustomControls.FormCustomizationState.LoadFormWindowState(System.String)">
            <summary>
            Parses out the FormWindowState enum from a String value
            </summary>
            <param name="value">a String representation of a FormWindowState</param>
        </member>
        <member name="M:MaxCustomControls.FormCustomizationState.LoadFormSize(System.String)">
            <summary>
            Parses out a Size object from a String value
            </summary>
            <param name="value">a String representation of a Size</param>
        </member>
        <member name="M:MaxCustomControls.FormCustomizationState.LoadFormLocation(System.String)">
            <summary>
            Parses out a Point object from a String value
            </summary>
            <param name="value">a String representation of a Point</param>
        </member>
        <member name="F:MaxCustomControls.FormCustomizationState.kDefaultLocation">
            <summary>
            The default location
            </summary>
        </member>
        <member name="T:MaxCustomControls.SelectedMaterialExplorerExpandState">
            <summary>
            This class is used to determine the default expand state of a specific 
            node.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SelectedMaterialExplorerExpandState.#ctor(MaxCustomControls.ExplorerControl)">
            <summary>
            Constructor.
            </summary>
            <param name="explorerControl">
            The explorerControl, used to fetch the traversal node 
            from an id.
            </param>
        </member>
        <member name="M:MaxCustomControls.SelectedMaterialExplorerExpandState.IsExpanded(System.Int32)">
            <summary>
            Check if a specific node is expanded in default.
            </summary>
            <param name="nodeID">
            The given node id.
            </param>
            <returns>
            True if it is expanded, false otherwise.
            </returns>
            <remarks>
            Default behavior: always returns true.
            </remarks>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListViewInfo">
            <summary>
            This class override base TreeListViewInfo and add a dirty flag to the 
            ViewInfo.MaxIndent property. Doing so can greatly improve the performance 
            of TreeList operations. 
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListViewInfo.#ctor(DevExpress.XtraTreeList.TreeList)">
            <summary>
            Constructor.
            </summary>
            <param name="treeList">
            The tree list.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListViewInfo.SetMaxColumnIndentDirty">
            <summary>
            Mark the max column indent to "dirty". This function could be called 
            when the collapse/expand state of a node gets changed or the traversal 
            list get changed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListViewInfo.CalcMaxIndents">
            <summary>
            Override the base CalcMaxIndents by first check if the max indent is 
            already calculated. With the dirty flag we avoided duplicate calculation.
            This is useful becuase the time complexity of base.CalcMaxIndents() is 
            O(n), where n is the number of nodes.
            </summary>
        </member>
        <member name="T:MaxCustomControls.NodeDefaultExpandState">
            <summary>
            This class is used to determine the default expand state of a specific 
            node.
            </summary>
        </member>
        <member name="M:MaxCustomControls.NodeDefaultExpandState.IsExpanded(System.Int32)">
            <summary>
            Check if a specific node is expanded in default.
            </summary>
            <param name="nodeID">
            The given node id.
            </param>
            <returns>
            True if it is expanded, false otherwise.
            </returns>
            <remarks>
            Default behavior: always returns true.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.NodeDefaultExpandState.CheckIfRecordState(System.Int32)">
            <summary>
            Check if a specific node's expand state should be recorded.
            </summary>
            <param name="nodeID">
            The given node id.
            </param>
            <returns>
            True if it should be recorded, false otherwise.
            </returns>
        </member>
        <member name="T:MaxCustomControls.NumericSuffixBatchHandler">
            <summary>
            This class is used to handle properties which need to be handled 
            specially during batch edit. 
            </summary>
            <remarks>
            When trying to set a new string value to all the selected nodes' 
            registered properties, the handler will add an increment numeric 
            suffix to the new string value before setting each node's corresponding 
            property value. Renaming multiple nodes in SceneExplorer is an example.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.NumericSuffixBatchHandler.HandleExplorerCellValueChanged(System.Object,MaxCustomControls.ExplorerCellValueChangedEventArgs)">
            <summary>
            A handler of ExplorerCellValueChanged Event. 
            </summary>
            <remarks>
            <para>
            When batch editing all the selected nodes' registered properties, it will 
            add an increment numeric suffix to the new string value before setting
            each node's property value.
            </para>
            <para>
            To use this handler, client should create an instance of this class,
            register the corresponding properties and attach this method to an 
            ExplorerControl's ExplorerCellValueChanged  Event. 
            </para>
            </remarks>
        </member>
        <member name="M:MaxCustomControls.NumericSuffixBatchHandler.RegisterProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Register a property which need be handled by this class during batch edit.
            </summary>
        </member>
        <member name="T:MaxCustomControls.Resources.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.AddToActiveLayerDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.AddToActiveLayerLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.ButtonCheckedBlack">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.ButtonCheckedGrey">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.ButtonIndeterminateBlack">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.ButtonIndeterminateGrey">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.ButtonUnchecked">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.ByLayerDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.ByLayerLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.CreateNewLayerDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.CreateNewLayerLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.dark_checkboxINDET">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.dark_checkboxOFF">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.dark_checkboxON">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.DisplayAsBoxOffDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.DisplayAsBoxOffLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.DisplayAsBoxOnDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.DisplayAsBoxOnLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.DisplayBarHideDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.DisplayBarHideLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.DisplayBarShowDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.DisplayBarShowLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.draglink">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.dragunlink">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FlatCheckboxINDETDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FlatCheckboxINDETLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FlatCheckboxOFFDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FlatCheckboxOFFLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FlatCheckboxONDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FlatCheckboxONLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FreezeAllLayersDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FreezeAllLayersLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.Frozen_ByLayer">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FrozenOff">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FrozenOFFDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FrozenOFFLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FrozenOn">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FrozenONDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.FrozenONLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.HideAllLayersDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.HideAllLayersLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.light_checkboxINDET">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.light_checkboxOFF">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.light_checkboxON">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.PickParentDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.PickParentLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.Renderable_ByLayer">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.RenderableOff">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.RenderableOFFDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.RenderableOFFLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.RenderableOn">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.RenderableONDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.RenderableONLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.SelectChildrenDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.SelectChildrenLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.SetLayerActiveDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.SetLayerActiveLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.Visible_ByLayer">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.VisibleOff">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.VisibleOFFDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.VisibleOFFLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.VisibleOn">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.VisibleONDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Resources.Resource.VisibleONLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.CachedFont">
            <summary>
            This class encapsulates four fonts of different fontStyle for the given Font.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.CachedFont.GetFont(System.Boolean,System.Boolean)">
            <summary>
            Get the font according to the given font style.
            </summary>
            <param name="bold">Is the font bold?</param>
            <param name="italic">Is the font italic?</param>
            <returns>The required font</returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.CachedFont.GetHashCode">
            <summary>
            Get the hash code of this object.
            </summary>
            <returns>
            The hash code of this object.
            </returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.CachedFont.Equals(System.Object)">
            <summary>
            Whether this object is equal to the given object.
            </summary>
            <param name="other">The given object</param>
            <returns>True if it is,false otherwise.</returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.CachedFont.IsEqual(System.Drawing.Font)">
            <summary>
            Is the family and size of the given font same with the default font of this class.
            </summary>
            <param name="otherFont">The given font</param>
            <returns>True if it is,false otherwise.</returns>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.CachedFontContainer">
            <summary>
            This class works as a cache for saving Font.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.CachedFontContainer.GetFont(System.Drawing.Font,System.Boolean,System.Boolean)">
            <summary>
            Try to get a font of required font style from this cache with regard to a candidate font.
            </summary>
            <param name="candidateFont">The candidate font.</param>
            <param name="bold">Is this font bold?</param>
            <param name="italic">Is this font italic?</param>
            <returns></returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.CachedFontContainer.AddFont(System.Drawing.Font)">
            <summary>
            Add a given font to this cache.
            </summary>
            <param name="candidateFont">
            The given font.
            </param>
            <returns>The added CachedFont.</returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.CachedFontContainer.PushNodeToFront(System.Collections.Generic.LinkedListNode{System.Object})">
            <summary>
            Push a given node to the front of the cached font list.
            </summary>
            <param name="node">
            The given node.
            </param>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.ChangeSceneExplorerLayoutCommand">
            <summary>
            This class is used to change the toolbar layout of scene explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ChangeSceneExplorerLayoutCommand.Create(MaxCustomControls.SceneExplorerControls.ToolBarLayout,System.String)">
            <summary>
            Create a ChangeSceneExplorerLayoutCommand instance.
            </summary>
            <param name="layout">
            Target layout.
            </param>
            <param name="name">
            The name of this command.
            </param>
            <returns>
            a ChangeSceneExplorerLayoutCommand instance.
            </returns>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ChangeSceneExplorerLayoutCommand.Name">
            <summary>
            This Command's internationalized name.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ChangeSceneExplorerLayoutCommand.Explorer">
            <summary>
            Override Base.Explorer to bind/unbind local event handler to
            external checked-changed event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ChangeSceneExplorerLayoutCommand.Execute">
            <summary>
            When called, change the layout of explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ChangeSceneExplorerLayoutCommand.IsChecked">
            <summary>
            Get the internal check state.
            </summary>
            <returns>
            Returns true if the ToolBarLayout is the same as the targetLayout, returns false
            otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ChangeSceneExplorerLayoutCommand.#ctor(MaxCustomControls.SceneExplorerControls.ToolBarLayout,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="layout">
            Target layout.
            </param>
            <param name="name">
            The name of this command.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ChangeSceneExplorerLayoutCommand.HandleToolBarLayoutChanged(System.Object,System.EventArgs)">
            <summary>
            This function updates the status and apperance of UI items 
            according to the status of ToolBarLayout.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.ComparisonShadowTypeBase">
            <summary>
            Class that provides a comparison control for the Shadow Type property.
            It wraps a combobox control which contains all the available shadow types.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ComparisonShadowTypeBase.PropertyType">
            <summary>
            The property type associated with this comparison control
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ComparisonShadowTypeBase.DisplayValueText">
            <summary>
            The text that will be displayed in the reference value column
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ComparisonShadowTypeBase.CurrentValue">
            <summary>
            The control that resides in the reference value column
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ComparisonShadowTypeBase.ParseSerializedValueText(System.String)">
            <summary>
            Returns the combobox items that have the same text representation as the
            strings parsed from input parameter.
            </summary>
            <param name="serializedValueText">
            The serialized String to compare against the combobox items
            </param>
            <returns>
            An object containing the selected strings, or an empty array of objects
            if none of the parsed strings matched any combobox item.
            </returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ComparisonShadowTypeBase.GetSerializedValueText">
            <summary>
            Provides a string representation of the currently selected combobox item
            </summary>
            <returns>
            The text from the selected combobox item.
            </returns>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.ContainerToolbar">
            <summary>
            Encapsulates Commands and buttons for Container functionality.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ContainerToolbar.Explorer">
            <summary>
            Target Explorer for the Container Commands.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ContainerToolbar.InvalidateItems">
            <summary>
            Invalidate all Toolbar items, scheduling a refresh for their enabled state.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ContainerToolbar.InitializeComponent">
            <summary>
            Set up controls and handlers for this container toolbar.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.DefaultLayerExplorerCustomizationState">
            <summary>
            Default configuration settings for Scene Explorers.  Every instance is
            initialized upon construction with default values.  This class is used if
            no configuration file is found.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.DefaultLayerExplorerCustomizationState.#ctor">
            <summary>
            Initializes a new instance with default settings.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.DefaultLayerExplorerCustomizationState.LoadMaxDefaults">
            <summary>
            Initialize the standard settings with Max default values.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.DynamicsToolbar">
            <summary>
            Encapsulates Commands and buttons for the physX dynamics functionality.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.DynamicsToolbar.InvalidateItems">
            <summary>
            Invalidate all Toolbar items, scheduling a refresh for their enabled state.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.DynamicsToolbar.InitializeComponent">
            <summary>
            Set up controls and handlers for this container toolbar.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.SceneExplorerCommandTable">
            <summary>
            The specific CommandTable for the scene explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCommandTable.DisplayInTrackviewCommand">
            <summary>
            The DisplayInTrackview Command.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCommandTable.CopyNodesCommand">
            <summary>
            The copy nodes Command.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCommandTable.CutNodesCommand">
            <summary>
            The cut nodes Command.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCommandTable.PasteNodesCommand">
            <summary>
            The paste nodes Command.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.DefaultModalExplorerCustomizationState">
            <summary>
            Default configuration for the Modal Scene Explorer. This class is used if
            no configuration file is found.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.DefaultModalExplorerCustomizationState.LoadMaxDefaults">
            <summary>
            Overridden to supply different default columns and configuration 
            settings.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.DefaultSceneExplorerCustomizationState">
            <summary>
            Default configuration settings for Scene Explorers.  Every instance is
            initialized upon construction with default values.  This class is used if
            no configuration file is found.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.DefaultSceneExplorerCustomizationState.#ctor">
            <summary>
            Initializes a new instance with default settings.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.DefaultSceneExplorerCustomizationState.LoadMaxDefaults">
            <summary>
            Initialize the standard settings with Max default values.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog">
            <summary>
            Modal form of the Scene Explorer dialog.  Often used to ask the user
            to select some nodes.
            </summary>
            <remarks>
            This replaces the old Select by Name dialog.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.#ctor(ExplorerFramework.DataFacade)">
            <summary>
            Construct with DataFacade used to hold the scene data.
            </summary>
            <param name="aFacade">
            Provides the TraversalNodes explored in this dialog.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.#ctor">
            <summary>
            Default constructor.  Constructs its own DataFacade with a 
            SceneExplorer.UntrackedINodeTraveral and SceneExplorer.NodePropertyRegistry.
            </summary>
            <remarks>
            Because it's modal, the ModalSceneExplorerDialog locks the scene state.
            This allows us to optimize for performance by using the UntrackedINodeTraversal.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.InitializeComponentLocal(ExplorerFramework.DataFacade)">
            <summary>
            Initializes resources and handlers.
            </summary>
            <param name="aFacade">
            Provides the TraversalNodes explored in this dialog.  Used to create
            the ExplorerControl.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleShowDisplayToolbarFromButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the check change event of togging on or off the display toolbar from the button.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleDisplayInfluencesCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles a change to the Display Influences check box.  Applies the
            desired setting in the ExplorerControl.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleDisplayDependantsCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Propagates Display Dependants setting to the ExplorerControl.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleSelectInfluencesCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles a change to the Select Influences check box.  Applies the
            desired setting in the ExplorerControl.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleSelectDependantsCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles a change to the Select Dependants check box.  Applies the
            desired setting in the ExplorerControl.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleSelectOptionsChanged(System.Object,System.EventArgs)">
            <summary>
            Handles a change in any of the select options in the ExplorerControl.  
            Applies the settings in the corresponding checkboxes in the UI.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.DefaultTitle">
            <summary>
            Default title for the dialog title bar.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.ExplorerControl">
            <summary>
            The ExplorerControl inside this dialog.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.OkButtonText">
            <summary>
            The text shown in the Ok button.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleNameChanged(System.Object,CSharpUtilities.ValueChangedEventArgs{System.String})">
            <summary>
            Handle a change to the ExplorerControl's instance name.  Updates the 
            title bar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.UpdateDialogTitle">
            <summary>
            Updates the dialog title bar from the ExplorerControl's instance name.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.mSceneExplorerControl">
            <summary>
            The ExplorerControl inside this dialog.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleMenuSearchClick(System.Object,System.EventArgs)">
            <summary>
            Handle a click on the Search menu item.  Launches the AdvanceSearch
            form.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Handle a double click in the explorer.  Confirms and 
            closes the dialog.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleExplorerEditingEnabledChanged(System.Object,System.EventArgs)">
            <summary>
            Handle a change to the ExplorerControl's EditingEnabled setting.
            Editing is not permitted in the Modal Scene Explorer, so this
            resets it to false.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleSyncSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Handle a change to the ExplorerControl's SyncSelection setting.
            SyncSelection is not permitted in the Modal Scene Explorer, so this
            resets it to false.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleShowHierarchyButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle a change to the Show Hierarchy menu item. Reflects this
            change in the ExplorerControl.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleShowHierarchyChanged(System.Object,System.EventArgs)">
            <summary>
            Handle a change to the Show Hierarchy setting in the ExplorerControl.
            Reflects this change in the menu item.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleInvokeAdvancedFilter(System.Object,System.EventArgs)">
            <summary>
            Handle UI event of displaying "advanced filter" dialog
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleEnableAdvancedFilter(System.Object,System.EventArgs)">
            <summary>
            Handle UI event of enable/disable the advanced filter
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleAdvancedFilterEnabledNotification(System.Object,System.EventArgs)">
            <summary>
            Handle notification from any other modules about the change of 
            enable/disable state of the advanced filter to update UI. 
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleAdvancedFilterValidChanged(System.Object,CSharpUtilities.ValueChangedEventArgs{System.Boolean})">
            <summary>
            Notification message from advanced filter to notify its valid/invalid 
            state change.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
            <remarks>
            We simply disabled the menu item of "enable advanced filter" here if 
            the advanced filter is invalid.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleFindToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the find toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleSelectionToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the selection toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleShowDisplayToolbarCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the check event of togging on or off the display toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.HandleDisplayToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the display toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ModalSceneExplorerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm">
            <summary>
            Form enabling the user to add, delete, load, save, and rename Scene 
            Explorers.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.#ctor">
            <summary>
            Initialize a new instance of this class.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.SetListItems(System.Object[])">
            <summary>
            Set the items appearing in this form's list of explorers.
            </summary>
            <param name="items">Items to put in the form's list.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.UpdateButtonsEnabledState">
            <summary>
            Update the enabled state for this form's buttons.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.HandleSelectedIndicesChanged(System.Object,System.EventArgs)">
            <summary>
            Responds to selection changes in the list box to update this
            form's buttons' enabled state.
            </summary>
            <param name="sender">Source of the event (not used).</param>
            <param name="e">Data about the event (not used).</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.HandleDeleteButtonClick(System.Object,System.EventArgs)">
            <summary>
            Deletes the currently selected explorer.
            </summary>
            <param name="sender">Source of the event (not used).</param>
            <param name="e">Data about the event (not used).</param>
        </member>
        <member name="E:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.ActivateInstance">
            <summary>
            Occurs when the user double-clicks an instance name.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs">
            <summary>
            EventArgs for events pertaining to Explorer instances.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs.#ctor(System.String)">
            <summary>
            Construct with the name of the explorer instance affected by
            this event.
            </summary>
            <param name="aInstanceName">
            Name of the explorer instance affected by this event.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs.#ctor(System.String,System.String)">
            <summary>
            Construct for a rename event.  Provides the name of the explorer
            instance affected by this event and the requested new name for the 
            explorer.
            </summary>
            <param name="aInstanceName">
            Name of the explorer instance affected by this event.
            </param>
            <param name="aRenameTo">
            Requested new name for the affected instance.
            </param>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs.InstanceName">
            <summary>
            Name of the explorer instance affected by this event.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs.RenameTo">
            <summary>
            Requested new name for the affected instance.  Only used for
            a rename event.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs.Deletable">
            <summary>
            Request deletable state for the affected instance. Only used for
            a check deletable event.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs.mRenameTo">
            <summary>
            Storage for RenameTo.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs.mInstanceName">
            <summary>
            Storage for InstanceName.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs.mDeletable">
            <summary>
            Storage for Deletable flag
            </summary>
        </member>
        <member name="E:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.CheckInstanceDeletable">
            <summary>
            Occurs when user need to check whether one instance is deletable
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.OnCheckInstanceDeletable(MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs)">
            <summary>
            Raise the CheckInstanceDeletable event.
            </summary>
            <param name="e">
            Data about the event, including the name of the instance affected
            by this event. The deletable state is to be set by the delegate.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.IsInstanceDeletable(System.String)">
            <summary>
            Check whether one instance is deletable
            </summary>
            <param name="aInstanceName">
            Name of the instance to be checked.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.OnActivateInstance(MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs)">
            <summary>
            Raises the ActivateInstance event.
            </summary>
            <param name="e">
            Data about the event, including the name of the instance affected
            by this event.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.RequestActivateInstance(System.String)">
            <summary>
            Raises the ActivateInstance event.
            </summary>
            <param name="aInstanceName">
            Name of the explorer instance affected by this event.
            </param>
        </member>
        <member name="E:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.DeleteInstance">
            <summary>
            Occurs when the user clicks the delete button.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.OnDeleteInstance(MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs)">
            <summary>
            Raises the DeleteInstance event.
            </summary>
            <param name="e">
            Data about the event, including the name of the instance affected
            by this event.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.RequestDeleteInstance(System.String)">
            <summary>
            Raises the DeleteInstance event.
            </summary>
            <param name="aInstanceName">
            Name of the explorer instance affected by this event.
            </param>
        </member>
        <member name="E:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.RenameInstance">
            <summary>
            Occurs when the user clicks the rename button and enters a new name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.OnRenameInstance(MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs)">
            <summary>
            Raises the RenameInstance event.
            </summary>
            <param name="e">
            Data about the event, including the name of the instance affected
            by this event and its new name.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.RequestRenameInstance(System.String,System.String)">
            <summary>
            Raises the RenameInstance event.
            </summary>
            <param name="aInstanceName">
            Name of the explorer instance affected by this event.
            </param>
            <param name="aRenameTo"></param>
        </member>
        <member name="E:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.SaveInstance">
            <summary>
            Occurs when the user clicks the Save button.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.OnSaveInstance(MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InstanceEventArgs)">
            <summary>
            Raises the SaveInstance event.
            </summary>
            <param name="e">
            Data about the event, including the name of the instance affected
            by this event.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.RequestSaveInstance(System.String)">
            <summary>
            Raises the SaveInstance event.
            </summary>
            <param name="aInstanceName">
            Name of the explorer instance affected by this event.
            </param>
        </member>
        <member name="E:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.LoadInstance">
            <summary>
            Occurs when the user clicks the Load button.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.OnLoadInstance(System.EventArgs)">
            <summary>
            Raises the LoadInstance event.
            </summary>
            <param name="e">
            Data about this event.  Usually EventArgs.Empty.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.RequestLoadInstance">
            <summary>
            Raises the LoadInstance event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.HandleDoubleClickListBox(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles a double click in the list box.  Raises an ActivateInstance
            event for the currently selected item.
            </summary>
            <param name="sender">Source of the event. (Not used)</param>
            <param name="e">Data about the event. (Not used)</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.DeleteListBoxItemHandler(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Handles a Delete key press in the list box.  
            </summary>
            <param name="sender">Source of the event. (Not used)</param>
            <param name="e">Data about the event. (Checks for the Delete key)</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.DeleteSelectedItems">
            <summary>
            Deletes the currently selected items in the list box.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.StatusText">
            <summary>
            Text displayed in the status bar at the bottom of this form.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.ClearStatusProc(System.Object,System.EventArgs)">
            <summary>
            Timer tick handler.  Clears the status text after the timer expires.
            </summary>
            <param name="sender">Source of the event.  (Not used.)</param>
            <param name="e">Data about the event.  (Not used.)</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.HandleRenameClick(System.Object,System.EventArgs)">
            <summary>
            Handles a click on the Rename button.  Gets the new name from the
            user, then raises a RenameInstance event.
            </summary>
            <param name="sender">Source of the event. (Not used)</param>
            <param name="e">Data about the event.  (Not used.)</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.HandleLoadButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handles a click on the Load button.  Raises a LoadInstance event.
            </summary>
            <param name="sender">Source of the event. (Not used)</param>
            <param name="e">Data about the event.  (Not used.)</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.HandleSaveButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handles a click on the Save button.  Raises a SaveInstance event for
            the currently selected item.
            </summary>
            <param name="sender">Source of the event. (Not used)</param>
            <param name="e">Data about the event.  (Not used.)</param>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.mStatusTimer">
            <summary>
            Timer used to clear the status bar text.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.ManageSceneExplorerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl">
            <summary>
            Specializes the ExplorerControl for the Scene Explorer.  This explores
            the scene node data set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.#ctor">
            <summary>
            Default constructor.  Not bound to any data set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.#ctor(System.String,ExplorerFramework.DataFacade)">
            <summary>
            Construct with a name and data set.
            </summary>
            <param name="aName">Name for this Explorer.</param>
            <param name="aDataSource">Data set explored by this explorer.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.#ctor(System.String,ExplorerFramework.DataFacade,System.Boolean)">
            <summary>
            Construct with a name and data set.
            </summary>
            <param name="aName">Name for this Explorer.</param>
            <param name="aDataSource">Data set explored by this explorer.</param>
            <param name="isLayerView">True if the explorer is in layher view, false otherwise.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.SetVisibleColumns(System.String[])">
            <exclude/>
            <summary>
            Modifies the width of each visible column so that the contents of its cells 
            are not truncated, if possible.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.GetVisibleColumns">
            <exclude/>
            <summary>
            Get the string arrays of all visible columns.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.DisplayInfluences">
            <summary>
            Determines if influences of the selected nodes are highlighted.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.SelectInfluences">
            <summary>
            Determines if influences of the selected nodes are automatically
            added to the selection set.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.SelectDependants">
            <summary>
            Determines if dependants of the selected nodes are automatically
            added to the selection set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.UpdateColors">
            <summary>
            Update the Control colors according to the CUI settings.  Implements
            the CuiUpdatable interface.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.CreateState">
            <summary>
            Create a specialized customization state object for this class.
            </summary>
            <returns>
            A specialized customization state object for this class.
            </returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.SaveState">
            <summary>
            Create and fill in a customization state object for the current 
            settings.
            </summary>
            <remarks>
            Overrides the base implementation to add properties specific to 
            the Scene Explorer.
            </remarks>
            <returns>
            A customization state object for serializing the current settings.
            </returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the settings configuration from a serialized state.
            </summary>
            <remarks>
            Overrides the base implementation to handle properties specific
            to the Scene Explorer.
            </remarks>
            <param name="aState">
            A serialized customization state containing the desired settings.
            </param>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.InModalSceneExplorerDialog">
            <summary>
            Whether in a Modal SceneExplorer Dialog
            nodes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.LoadAllToolbarStates(MaxCustomControls.ICustomizationState)">
            <summary>
            Load all the toolbar states of this explorer.
            </summary>
            <param name="iState">
            The state object that contains toolbar states of this explorer.
            </param>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.FindHandler">
            <summary>
            Performs quick searches for this explorer control.
            </summary>
            <remarks>
            Overrides the base set implementation to set the MatchedProperty
            according to the Scene Explorer's requirements.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.ObjectTypeFilterToolbar">
            <summary>
            Toolbar Control containing Object Type filter buttons.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.UseObjectFilters">
            <summary>
            Control if the object filters are used (object, camera, light etc). If false, the items are all displayed and the filters ignored but the filters values are kept.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.ContainerToolbar">
            <summary>
            The Container Toolbar that contains the container controls.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.DynamicsToolbar">
            <summary>
            The Dynamics Toolbar that contains the dynamics controls.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.InitializeComponent">
            <summary>
            Initialize event handlers and controls.  Intended to execute 
            after the designer-generated InitializeComponent.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.ConfigureSelectionToolbar">
            <summary>
            Set up controls and handlers for Sync Selection.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleSyncSelectionButtonChecked(System.Object,System.EventArgs)">
            <summary>
            Responds to a UI change to the Sync Selection button.  Reflects the
            change in the SyncSelectionEnabled setting.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleSyncSelectionActiveChanged(System.Object,System.EventArgs)">
            <summary>
            Respond to a change to the transient active setting for Sync Selection.
            Updates the UI.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.AdjustSyncSelectionButtonStates">
            <summary>
            Updates the UI controls to reflect the current Sync Selection setting
            and policy.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleSelectionLockChanged(System.Object,CSharpUtilities.ValueChangedEventArgs{System.Boolean})">
            <summary>
            Responds to a change to the Selection Lock setting in the main
            application.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleSynchSelectionAllowedChanged(System.Object,System.EventArgs)">
            <summary>
            Respond to a change to the policy controlling whether Sync Selection
            is allowed at this time.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.SyncSelectionButtonVisible">
            <summary>
            Determines if the Sync Selection button is shown in the UI.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.PullIfSynchingSelection">
            <summary>
            Pull the Selection from the Scene if Sync Selection is currently
            active.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.SyncSelectionAllowed">
            <summary>
            Policy controlling if Sync Selection may be enabled.
            </summary>
        </member>
        <member name="E:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.SyncSelectionAllowedChanged">
            <summary>
            Occurs when the SyncSelectionAllowed policy changes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.OnSyncSelectionAllowedChanged(System.EventArgs)">
            <summary>
            Raises the SyncSelectionAllowedChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.RaiseSyncSelectionAllowedChanged">
            <summary>
            Raises the SyncSelectionAllowedChanged event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.CreateAdvancedFilter">
            <summary>
            Creates an AdvancedFilter instance configured for the RichSceneExplorerControl's data set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.CreateFilterDescriptionRegistry">
            <summary>
            Creates an FilterDescriptionRegistry instance configured for the 
            RichSceneExplorerControl's data set.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.InitializeSelectionEnabled">
            <summary>
            Determines if this Explorer Control will initialize its selection
            to the current scene selection when the control made visible.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleVisibilityChangePullSelection(System.Object,System.EventArgs)">
            <summary>
            Responds to a visibility change and pulls the current scene selection
            if InitializeSelectionEnabled is true.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.SyncSelectionEnabled">
            <summary>
            Determines if changes to the selection in the scene will be 
            automatically reflected in the Explorer UI and vice-versa.
            NOTE - we are trailing removing this parameter.  It should be deleted by end of Elwood.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.SyncSelectionActive">
            <summary>
            Transient setting for controlling whether SyncSelection is currently
            used.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.DoubleClickObjectSelectionEnable">
            <summary>
            Determines if the double-click object selection functionality is enabled
            in the scene explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.DeactivateSyncSelection">
            <summary>
            Temporarily turns off SyncSelection without affecting the 
            SyncSelectionEnabled setting.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.ToggleSelectionSetFilterCommand">
            <summary>
            The Command for toggling the Filter Selection Set.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.ToggleNonDynamicsFilterCommand">
            <summary>
            The Command for toggling the non-dynamics filter.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.AllToggleFilterCommands">
            <summary>
            All the ToggleFilterCommands of this explorer control.
            </summary>
            <remark>
            This is an readonly property corresponding to the given
            FilterDescriptionRegistry of this explorer control on initiation.
            </remark>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.ResetSyncSelectionActive">
            <summary>
            Resets SyncSelection to its SyncSelectionEnabled setting 
            after it has been deactivated.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.PullSelectionFromScene">
            <summary>
            Pull the current node selection from the scene and select the
            corresponding rows in the Explorer UI.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.PushSelectionToScene">
            <summary>
            Select nodes in the scene corresponding to the nodes currently
            selected in the Explorer UI.
            </summary>
        </member>
        <member name="E:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.SyncSelectionStateChanged">
            <summary>
            Occurs when the SyncSelectionEnabled setting changes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.OnSyncSelectionStateChanged">
            <summary>
            Raises the SyncSelectionStateChanged event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.OnListDoubleClick(System.EventArgs)">
            <summary>
            Overrides OnListDoubleClick() to handle the double click event 
            on any cell in the name column.
            </summary>
            <param name="e">Default event arts.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.CreateExplorerTreeList">
            <summary>
            Override ExplorerControl.CreateExplorerTreeList() to provide with
            the specific Scene-ExplorerTreeList for SE.
            </summary>
            <returns>The created SceneExplorerTreeList.</returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleSyncSelectionStateChanged(System.Object,System.EventArgs)">
            <summary>
            Responds to a SyncSelectionStateChanged event to require confirmation
            in the FindHandler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleTraversalDirty(System.Object,System.EventArgs)">
            <summary>
            Process the event when the event DataFacade.TraversalDirty 
            is invoked
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event args.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.GetNamedSelectionSetNodesList">
            <summary>
            Get the named SelectionSet node list according to the
            selected SelectionSet
            </summary>
            <returns>
            The resultant node list.
            </returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.FillInNamedSelectionSets">
            <summary>
            Fill in the NamedSelectionSetsSelector with names of all named selectino sets.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.UpdateSelectedItemInNamedSelectionSetsSelector(System.Object)">
            <summary>
            Replace the old selected item of NamedSelectionSetsSelector with a new one
            when named selection sets have been changed.
            </summary>
            <param name="namedSelectionSetName"></param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.SelectLayerOfSelection">
            <summary>
            Find and select the first parent layer(s) of the current selection. The selection will be changed to only the layers.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleNamedSelectionSetsListChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the event when named selection sets have been changed.
            </summary>
            <param name="sender">The event sender</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleNamedSelectionSetsNameChanged(System.Object,CSharpUtilities.ValueChangedEventArgs{System.String})">
            <summary>
            Handle the event when the name of a named selection set has been changed.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">
            The event args that contains both the old name and new name of
            the changed named selection set.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleNamedSelectionSetIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the selected item of the NamedSelectionSetSelector is changed.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleGroupByLayerClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the grouping by layer button is clicked.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleGroupByHierarchyClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the grouping by hierarchy button is clicked.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleShowTreeListMenu(System.Object,DevExpress.XtraTreeList.PopupMenuShowingEventArgs)">
            <exclude/>
            <summary>
            Process the event occurred when the column menu in the TreeList control is invoked.
            </summary>
            <param name="sender">
            The object which sends TreeList menu event.
            </param>
            <param name="e">
            TreeList menu event args.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleSortAgeDescendingClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the sort descending age is chosen in the column menu.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleSortAgeAscendingClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the sort ascending age is chosen in the column menu.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleSortNameAscendingClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the sort ascending name is chosen in the column menu.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleSortNameDescendingClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the sort descending name is chosen in the column menu.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleResortClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the sort descending name is chosen in the column menu.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.HandleMiminizeAllColumnWidths(System.Object,System.EventArgs)">
            <summary>
            Sets all columns to their minimum width
            </summary>
            <param name="sender">The Menu Item</param>
            <param name="e">Some generic arguments that are unused</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.OnNamedSelectionSetFilterChanged">
            <summary>
            Process the event when the selection set filter has changed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.RebuildCachedSelectedNamedSelectionSet(System.Collections.Generic.IEnumerable{ExplorerFramework.TraversalNode})">
            <summary>
            Rebuild mCachedSelectedNamedSelectionSet according to the given selectionSet
            when CachedSelectedNamedSelectionSetDirty is true.
            </summary>
            <param name="selectionSet">
            The given named selection set.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.DirtyCachedSelectedNamedSelectionSet">
            <summary>
            Dirty the current mCachedSelectedNamedSelectionSet
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.RichSceneExplorerControl.CachedSelectedNamedSelectionSet">
            <summary>
            The cached SelectedNamedSelectionSet.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.SceneExplorerComparisonManager">
            <summary>
            Extends the ComparisonControlManager to add support for specialized
            comparisons required by the Scene Explorer data.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerComparisonManager.Singleton">
            <summary>
            Access the single instance of this class.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog">
            <summary>
            Presents the Scene node data set as a tree-hierarchy in a modeless
            window.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.#ctor(System.String,ExplorerFramework.DataFacade)">
            <summary>
            Construct a scene explorer with a given name and datafacade.
            </summary>
            <remarks>
            Constructing with a data-facade is used for performance improvements. Since 
            modifing the properties of explorer control is time-consuming when there are 
            a bunch of nodes, and the time complexity of many algorithms of TreeList are 
            O(n), where n is the number of nodes. We try to speed up the initialization 
            process by first providing a "light" datafacade, set up tree list properties, 
            and finally, we replace the "light" datafacade with a real "heavy" datafacade 
            before the dialog becomes visible. This strategy can improve the performance of 
            opening and closing scene explorer by 30% when there are 10,000 nodes.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.ResetCommandMenuItemEnabledStates">
            <summary>
            Updates enabled states for menu items launching Explorer Commands
            according to Sync Selection settings.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleHotkey(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles hotkey key events.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.UpdateDialogTitle">
            <summary>
            Update the dialog title from the Explorer instance name.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.OnSceneExplorerControlRemove">
            <summary>
            Remove the original scene explorer control
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.OnSceneExplorerControlSetup">
            <summary>
            Setup the new scene explorer control.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.ExplorerControl">
            <summary>
            The ExplorerControl inside this dialog.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.InitializeComponentLocal(System.String,ExplorerFramework.DataFacade,System.Boolean)">
            <summary>
            Construct controls and bind event handlers.
            </summary>
            <remarks>
            Intended to run after the designer-generated InitializeComponent 
            method.
            </remarks>
            <param name="name">Passed on to the ExplorerControl.</param>
            <param name="dataFacade">Passed on to the ExplorerControl.</param>
            <param name="isLayerView">Allows to display the explorer organized by layer</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.ConfigureContextMenu">
            <summary>
            Configures the right-click menu for the Explorer control
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleMenuSearchClick(System.Object,System.EventArgs)">
            <summary>
            Handle a click on the Search menu item.  Launches the AdvanceSearch
            form.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleShowHierarchyButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle a change to the Show Hierarchy menu item. Reflects this
            change in the ExplorerControl.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleShowHierarchyChanged(System.Object,System.EventArgs)">
            <summary>
            Handle a change to the Show Hierarchy setting in the ExplorerControl.
            Reflects this change in the menu item.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleInvokeAdvancedFilter(System.Object,System.EventArgs)">
            <summary>
            Handle UI event of displaying "advanced filter" dialog
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleEnableAdvancedFilter(System.Object,System.EventArgs)">
            <summary>
            Handle UI event of enable/disable the advanced filter
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleAdvancedFilterEnabledNotification(System.Object,System.EventArgs)">
            <summary>
            Handle notification from any other modules about the change of 
            enable/disable state of the advanced filter to update UI. 
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleAdvancedFilterValidChanged(System.Object,CSharpUtilities.ValueChangedEventArgs{System.Boolean})">
            <summary>
            Notification message from advanced filter to notify its valid/invalid 
            state change.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
            <remarks>
            We simply disabled the menu item of "enable advanced filter" here if 
            the advanced filter is invalid.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleFindToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the find toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleViewSelectorToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change change event of the find toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleSelectionToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the selection toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleToolsToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of toggling on or off the Tools toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleShowDisplayToolbarCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the check change event of toggling on or off the display toolbar from the menu.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleShowDisplayToolbarFromButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the check change event of toggling on or off the display toolbar from the button.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.WM_MOUSEACTIVATE">
            <summary>
            Window message definition
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override WndProc to deal with WM_MOUSEACTIVATE. 
            We use it to mark this explorer as the active one.
            </summary>
            <param name="m">Current message to handle</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleDisplayToolbarVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the visible change event of the display toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleAutoExpandCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle a change to the Show Hierarchy menu item. Reflects this
            change in the ExplorerControl.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleAutoExpandChanged(System.Object,System.EventArgs)">
            <summary>
            Handle a change to the Show Hierarchy setting in the ExplorerControl.
            Reflects this change in the menu item.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleShownEditor(System.Object,System.EventArgs)">
            <summary>
            Handles when the name editor is shown
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerDialog.HandleHiddenEditor(System.Object,System.EventArgs)">
            <summary>
            Handles when the name editor is hidden
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.ToolBarLayout">
            <summary>
            The predefined layout style of scene explorer.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.ViewType">
            <summary>
            The predefined ways to organize objects.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState">
            <summary>
            Extends ExplorerCustomizationState to include configuration data specific
            to Scene Explorers.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.#ctor(System.Int32)">
            <summary>
            Construct with a given number of columns.
            </summary>
            <param name="aColumnCount">
            Number of columns in the explorer.
            </param>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.SceneExplorerPropertyKeys">
            <summary>
            Key constants for properties specific to the Scene Explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.DisplayInfluences">
            <summary>
            Determines if the selected nodes' influences are highlighted.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.DisplayDependants">
            <summary>
            Determines if the selected nodes' dependants are highlighted.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.SelectInfluences">
            <summary>
            Determines if the selected nodes' influences are automatically added to the 
            selection.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.SelectDependants">
            <summary>
            Determines if the selected nodes' dependants are automatically added to the 
            selection.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.FindStyleOption">
            <summary>
            Determines the quick-find search style: strict, regex or wildcard.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.FindCaseSensitive">
            <summary>
            Determines if quick-find searching is case sensitive.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.SyncSelection">
            <summary>
            Determines if the node selection is automatically kept in sync with
            the scene.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.FilterSelectionSetEnabled">
            <summary>
            Is FilterSelectionSetEnabled  enabled in current scene explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.DisplayToolbarState">
            <summary>
            ToolBarState of DisplayToolbar
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.ContainerToolbarState">
            <summary>
            ToolBarState of ContainerToolbar
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.DynamicsToolbarState">
            <summary>
            ToolBarState of the DynamicsToolbar
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.ToolBarLayout">
            <summary>
            ToolBarLayout of RichSceneExplorerControl
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.ShowFrozen">
            <exclude/>
            <summary>
            This property determines the state of the show-frozen filter.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.ShowHidden">
            <exclude/>
            <summary>
            This property determines the state of the show-hidden filter.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.NonDynamicsVisible">
            <summary>
            Determines whether the nodes unrelated to physX dynamics are visible.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.ShowMissingPlugInEntitiesOnly">
            <summary>
            Determines whether explorer displays missing plug-in entities only.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.OrganizeViewBy">
            <summary>
            Determines which type the view is organized by.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.DockState">
            <summary>
            Stores whether the scene explorer is docked or floating, and if docked what panel. USes the same docking flags as the C++ SDK.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.Visible">
            <summary>
            Stores whether the scene explorer is open or closed 
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.ObjectTypeFilterStates">
            <summary>
            Dictionary used to store Object Type Filter states
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the values from the given dictionary into this customization object.
            Extends the base method to add support for properties specific to the
            Scene Explorer.
            </summary>
            <param name="aPropertySet">
            A dictionary mapping keynames to properties.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.LoadBooleanProperty(System.Collections.Generic.Dictionary{System.String,System.String},MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.SceneExplorerPropertyKeys,System.Boolean@)">
            <summary>
            Loads a value from the dictionary into the given property storage.
            </summary>
            <param name="aPropertySet">
            Dictionary mapping keynames to property values.
            </param>
            <param name="key">
            Key constant used to retrieve a property value from the dictionary.
            </param>
            <param name="propertyVariable">
            Storage for the property value to set.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.LoadIntProperty(System.Collections.Generic.Dictionary{System.String,System.String},MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.SceneExplorerPropertyKeys,System.Int32@)">
            <summary>
            Loads a value from the dictionary into the given property storage.
            </summary>
            <param name="aPropertySet">
            Dictionary mapping key names to property values.
            </param>
            <param name="key">
            Key constant used to retrieve a property value from the dictionary.
            </param>
            <param name="propertyVariable">
            Storage for the property value to set.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.LoadEnumProperty``1(System.Collections.Generic.Dictionary{System.String,System.String},MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.SceneExplorerPropertyKeys,``0@)">
            <summary>
            Loads a value from the dictionary into the given property storage.
            </summary>
            <param name="aPropertySet">
            Dictionary mapping keynames to property values.
            </param>
            <param name="key">
            Key constant used to retrieve a property value from the dictionary.
            </param>
            <param name="propertyVariable">
            Storage for the property value to set.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.LoadDockableToolStripStateProperty(System.Collections.Generic.Dictionary{System.String,System.String},MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.SceneExplorerPropertyKeys,MaxCustomControls.MaxToolStripState@)">
            <summary>
            Loads a value from the dictionary into the given property storage.
            </summary>
            <param name="aPropertySet">
            Dictionary mapping keynames to property values.
            </param>
            <param name="key">
            Key constant used to retrieve a property value from the dictionary.
            </param>
            <param name="propertyVariable">
            Storage for the property value to set.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.SaveProperties">
            <summary>
            Creates a dictionary mapping keynames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            Extends the base implementation to add support for properties
            specific to Scene Explorers.
            </remarks>
            <returns>
            A dictionary mapping keynames to property values.
            </returns>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mToolBarLayout">
            <summary>
            Storage for ToolBarLayout.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mDisplayInfluences">
            <summary>
            Storage for DisplayInfluences.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mDisplayDependants">
            <summary>
            Storage for DisplayDependants.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mSelectInfluences">
            <summary>
            Storage for SelectInfluences.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mSelectDependants">
            <summary>
            Storage for SelectDependants.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mFindStyle">
            <summary>
            Storage for FindStyleOption.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mFindCaseSensitive">
            <summary>
            Storage for Find Case Sensitive.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mSyncSelection">
            <summary>
            Storage for SyncSelection.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mFilterSelectionSetEnabled">
            <summary>
            Storage for FilterSelectionSetEnabled.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mDisplayToolbarState">
            <summary>
            Storage for "Display" DockableToolStrip 
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mTopLevelControlState">
            <summary>
            Storage for its TopLevelContorl's states.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mContainerToolbarState">
            <summary>
            Storage for "Container" DockableToolStrip 
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mDynamicsToolbarState">
            <summary>
            Storage for the "Dynamics" DockableToolStrip 
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mTypeFilterStates">
            <summary>
            Storage for ObjectTypeFilterStates.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mNonDynamicsVisible">
            <summary>
            Storage for the visibility of non-dynamics objects
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mShowMissingPlugInEntitiesOnly">
            <summary>
            Storage for the ShowMissingPluginEntitesOnly flag.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mViewType">
            <summary>
            Storage for the type of objects the view is organized by.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mDockState">
            <summary>
            Storage for the docking state of the scene explorer
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mShowHideIcon">
            <summary>
            Storage for whether to show the hide icon for the 'Select image' to the left of the treelist node.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerCustomizationState.mVisible">
            <summary>
            Storage for whether the scene explorer is open or not. 
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.PropertyIconRegistry">
            <summary>
            Singleton class that stores icons that are used in SceneExplorerFilterDescriptionRegistry.
            More specifically, it stores property types.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.PropertyIconRegistry.instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.PropertyIconRegistry.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.PropertyIconRegistry.Instance">
            <summary>
            Returns singleton instance.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.PropertyIconRegistry.FrozenIcon">
            <summary>
            returns the Frozen icon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.PropertyIconRegistry.HiddenIcon">
            <summary>
            Returns the Hidden icon.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.PropertyIconRegistry.mFrozenIcon">
            <summary>
            The Frozen icon.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.PropertyIconRegistry.mHiddenIcon">
            <summary>
            The Hidden icon.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.SceneExplorerFilterDescriptionRegistry">
            <summary>
            Derive the FilterDescriptionRegistry to customize the initialization info
            for filters in the filter tool-bar of Scene Explorer Control.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.SceneExplorerFilterDescriptionRegistry.FilterKey">
            <summary>
            List of conceptual filters in the filter toolbar of 
            the Scene Explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerFilterDescriptionRegistry.#ctor">
            <summary>
            The default SceneExplorerFilterDescriptionRegistry constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerFilterDescriptionRegistry.CreateObjectTypeFilterDescription(SceneExplorer.RegisteredObjectType,System.String)">
            <summary>
            Create a FilterDescription according to the registered ObjectType 
            and description of a filter.
            </summary>
            <param name="objectType">
            The registered ObjectType
            </param>
            <param name="description">
            The description of a filter.
            </param>
            <returns>
            The resultant ButtonFilterDescription;
            </returns>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerFilterDescriptionRegistry.mObjectTypeProperty">
            <summary>
            PropertyDescriptor for the ObjectType property of a traversal node.
            </summary>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList">
            <exclude/>
            <summary>
            Specializes the ExplorerTreeList for the Scene Explorer. Adds behaviour
            specific to the Scene Explorer such as Node renaming, object list colouring
            for dependants and influences. Knows about the SceneExplorer namespace
            abstraction layer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.#ctor">
            <exclude/>
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.AddNodeSelectIcons">
            <summary>
            Turn on the one of two icons that get displayed to the left of every TreeListNode in the 
            DevExpress TreeList control (from which this class inherits from).
            The INI file determines whether this gets displayed or not. 
            Thus this gets called from a method called LoadState.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.RemoveNodeSelectIcons">
            <summary>
            The modal select by name dialog doesn't show a hierarchy, and it does not need to show
            the hide icon for the nodes select image. So give a chance for the modal explorer to turn it off.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.HandleLeftImageClick(System.Object,DevExpress.XtraTreeList.NodeClickEventArgs)">
            <summary>
            Event handler for when the user clicks the left icon node.
            </summary>
            <param name="sender">The treelist</param>
            <param name="e">some args</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.SetHiddenPropertyOnSelection(System.Boolean)">
            <summary>
            Sets the boolean value on the hidden property for the selected objects
            and all their children.
            </summary>
            <param name="bVal">The new value.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.RecursivelyGetChildren(DevExpress.XtraTreeList.Nodes.TreeListNode,System.Collections.Generic.Dictionary{System.Int32,DevExpress.XtraTreeList.Nodes.TreeListNode}@)">
            <summary>
            Gets children of a node and adds it to an accumulator dictionary.
            Avoids duplicates by checking if the item already exists in the dictionary.
            </summary>
            <param name="n"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.GetThemeHiddenIcon(System.Object)">
            <summary>
            Gets the hidden icon used for the left icon. This needs to respond to the theme, hence
            all the extra logic in it.
            </summary>
            <param name="val">Takes a 3 state value, either a null value (indeterminate) or false or true.</param>
            <returns>Returns a bitmap.</returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.HandleDrawLeftNodeImage(System.Object,DevExpress.XtraTreeList.CustomDrawNodeImagesEventArgs)">
            <summary>
            Paint the left icon to the left of a TreeListNode. 
            See docs online at:
            http://documentation.devexpress.com/#WindowsForms/DevExpressXtraTreeListTreeList_CustomDrawNodeImagestopic
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the MaxTreeList.OnMouseDown() method to avoid
            the SceneExplorerTreeList losing its focus when a text cell 
            in the "name" column is double-clicked so that the ListDoubleClick
            event can be captured by the control. If it
            is not double-clicked, the wait-for-rename operation will be handled.
            </summary>
            <remarks>
            When user double-clicks a text cell,it will get focused for the first
            click and the text editor control will show up and get focused for 
            the second click before the OnMouseDoubleClick() being invoked by the
            TreeList which thus loses its capture for the MouseDoubleClick event.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.IsMultiSelectionOperation">
            <exclude/>
            <summary>
            Is it a multi-select operation?
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.SelectNodeAndChildren(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <exclude/>
            <summary>
            Select the node and its children if not in a multi-select operation.
            Returns true if the nodes were selected, false if it was prevented.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.SelectOnlyNode(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <exclude/>
            <summary>
            Select only the given node.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.PreventNameEdition">
            <exclude/>
            <summary>
            Prevent the name editor from being triggered by the normal
            double-click behaviour in the base class.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.CanShowEditor">
            <summary>
            Gets a value indicating whether the current cell's editor can be invoked.
            </summary>
            <remarks>
            This property is overridden here so that the name cell editor will not be invoked
            when the delay between multiple clicks is too long.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.DisplayInfluences">
            <exclude/>
            <summary>
            Determines if influences of the selected nodes are highlighted.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.SelectInfluences">
            <exclude/>
            <summary>
            Determines if influences of the selected nodes are automatically
            added to the selection set.
            </summary>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.SelectDependants">
            <exclude/>
            <summary>
            Determines if dependants of the selected nodes are automatically
            added to the selection set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.HandleUpdateMarkedNodesOnSelectionChanged(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            Handle a change to the current node selection to update marked nodes lists
            (dependencies, influences)
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.HandleAfterExpand(System.Object,DevExpress.XtraTreeList.NodeEventArgs)">
            <exclude/>
            <summary>
            Take an action on an expand event
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.HandleAfterCollapse(System.Object,DevExpress.XtraTreeList.NodeEventArgs)">
            <exclude/>
            <summary>
            Take an action on a collapse event
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.HandleSelectInfluencesOnUserSelectionChanged(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            Adds influence nodes to the selection set when the user changes
            the node selection with SelectInfluences on.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.HandleSelectDependantsOnUserSelectionChanged(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            Adds dependent nodes to the selection set when the user changes
            the node selection with SelectInfluences on.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.GetUnselectedInfluenceNodes">
            <exclude/>
            <summary>
            Finds all unselected nodes that are influences of the currently 
            selected nodes.
            </summary>
            <returns>A list of unselected influences.</returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.GetUnselectedDependentNodes">
            <exclude/>
            <summary>
            Finds all unselected nodes that are dependants of the currently 
            selected nodes.
            </summary>
            <returns>A list of unselected dependants.</returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.GetSelectionList">
            <exclude/>
            <summary>
            Get a list of TraversalNodes corresponding to the TreeListNodes 
            currently selected in the UI.
            </summary>
            <returns>
            A list of TraversalNodes corresponding to the TreeListNodes 
            currently selected in the UI.
            </returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.GetColorValue(System.Drawing.Color)">
            <summary>
            Get the value component from the HSV space of a color.
            </summary>
            <param name="color">The specified color.</param>
            <returns>The value component of a color.</returns>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.GetDisplayHiddenObjectsColor">
            <summary>
            Get the display color of the frozen objects.
            </summary>
            <returns>The color for displaying frozen objects</returns>
            <remarks>
            To distinguish this color from both row colors and text color, 
            this color is mixed by half of the text color and half of the 
            row color(either even-row color or odd-row color depending on 
            whose value component(i.e., v component in HSV color space)is 
            closer to that of the text color).
            </remarks>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.UpdateColors">
            <exclude/>
            <summary>
            Updates colors of this control according to the current CUI settings.
            </summary>
            <remarks>
            This implements the CuiUpdatable interface.
            </remarks>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.GetExpandedNodesOperation">
            <exclude/>
            <summary>
            A TreeList operation that accumulates all expanded nodes in the treelist.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.GetExpandedNodesOperation.Execute(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <exclude/>
            <summary>
            The Execute method adds expanded nodes to the operation node list.
            </summary>
            <param name="node">The next node to check for addition to the list</param>
        </member>
        <member name="P:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.GetExpandedNodesOperation.Nodes">
            <exclude/>
            <summary>
            The accumulated nodes.
            </summary>
        </member>
        <member name="F:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.GetExpandedNodesOperation.mNodeList">
            <exclude/>
            <summary>
            Encapsulation of the Nodes property.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.HandleCustomDrawNodeCell(System.Object,DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs)">
            <exclude/>
            <summary>
            Changes the name cell appearance to display node property feedback.
            </summary>
            <remarks>
            <list>
            <item>Frozen nodes are grey.</item>
            <item>Hidden nodes are italicized.</item>
            <item>Influenced nodes are blue.</item>
            <item>Dependent nodes are bolded.</item>
            </list>
            </remarks>
            <param name="sender">
            Source of the event.
            </param>
            <param name="e">
            Data about the event. The cell appearance is controlled here.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerControls.SceneExplorerTreeList.SceneExplorerTreeList_ShowingEditor(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Controls whether or not to show an editor for a given cell.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerNodesComparer">
            <summary>
            Overrides DevExpress's base NodesComparer to customize and optimize sorting.
            </summary>
            <remarks>
            MaxNodesComparer sorts all Strings and non-comparable objects according
            to Windows Explorer-style natural sorting, whereby numerical parts of a
            string are sorted numerically instead of lexicographically. In other words,
            101 will come before 1000. Optimizes by avoiding some of the unnecessary
            work done by the base class. We skip Custom sorting through an event, 
            and we omit enhanced sorting, which orders objects by their position in the
            original underlying list.
            </remarks>
        </member>
        <member name="T:MaxCustomControls.FilterDescription">
            <summary>
            The internal filter description class for the filter of a filter-toolbar.
            FilterDescription contains additional initialization info of 
            a filter toggle button corresponding to a given filter.
            </summary>
        </member>
        <member name="M:MaxCustomControls.FilterDescription.#ctor(System.String,ExplorerFramework.IFilterItem,CSharpUtilities.MultiIcon)">
            <summary>
            Default constructor of FilterDescription.
            </summary>
            <param name="description">
            Description of the filter.
            </param>
            <param name="filter">
            The filter.
            </param>
            <param name="icon">
            Icon resource for the corresponding filter toggle button.
            </param>
        </member>
        <member name="M:MaxCustomControls.FilterDescription.#ctor(System.String,ExplorerFramework.IFilterItem,CSharpUtilities.MultiIcon,System.Boolean)">
            <summary>
            Default constructor of FilterDescription.
            </summary>
            <param name="description">
            Description of the filter.
            </param>
            <param name="filter">
            The filter.
            </param>
            <param name="icon">
            Icon resource for the corresponding filter toggle button.
            </param>
            <param name="invertDisplay">
            Whether the display of the enabled state of this filter 
            should be inverted.
            </param>
        </member>
        <member name="P:MaxCustomControls.FilterDescription.Description">
            <summary>
            Description of the filter.
            </summary>
        </member>
        <member name="P:MaxCustomControls.FilterDescription.Filter">
            <summary>
            The filter this description aims for.
            </summary>
        </member>
        <member name="P:MaxCustomControls.FilterDescription.FilterToggleButtonIcon">
            <summary>
            Icon resource of the corresponding filter toggle button
            for the filter.
            </summary>
        </member>
        <member name="P:MaxCustomControls.FilterDescription.InvertDisplay">
            <summary>
            Whether the display of the enabled state of this filter should be inverted.
            </summary>
        </member>
        <member name="T:MaxCustomControls.FilterDescriptionRegistry">
            <summary>
            The class FilterDescriptionRegistry provides detailed description for each filter
            within a filter list. Each filter is related with a specific filter key.
            </summary>
            <remarks>
            FilterDescriptionRegistry serves for the following purpose:
            1.To perform the query for a filter description by a specified filter key.
            2.To provide a user with the whole filter list.
            3.To provide an UI control that performs the filter task with the 
            specific initiation info,which the control required for each filter 
            of the filter list.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.FilterDescriptionRegistry.GetFilterDescriptionByKey(System.Object)">
            <summary>
            Get a filter description according to the filter key.
            </summary>
            <param name="key">
            The filter key.
            </param>
            <returns>
            Returns the filter description to the key if the key exists.
            Otherwise,returns null.
            </returns>
        </member>
        <member name="P:MaxCustomControls.FilterDescriptionRegistry.AllFilters">
            <summary>
            Get all filters inside this registry.
            </summary>
        </member>
        <member name="M:MaxCustomControls.FilterDescriptionRegistry.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the 
            FilterDescription Dictionary.
            </summary>
            <returns>
            The resultant enumerator
            </returns>
        </member>
        <member name="M:MaxCustomControls.FilterDescriptionRegistry.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the 
            FilterDescription Dictionary.
            </summary>
            <returns>
            The resultant enumerator
            </returns>
        </member>
        <member name="M:MaxCustomControls.FilterDescriptionRegistry.AddFilterDescription(System.Object,MaxCustomControls.FilterDescription)">
            <summary>
            Returns the mFilterDescriptionDictionary member.
            </summary>
        </member>
        <member name="F:MaxCustomControls.FilterDescriptionRegistry.mFilterDescriptionDictionary">
            <summary>
            All filters related description is kept in this member for each filter
            indexed by its filter key.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler">
            <summary>
            This class helps a max explorer container handle the drag and drop related events 
            The drag and drop could occur between different explorers or from explorer to max
            viewport.
            </summary>
            <remarks>
            <para>
            Besides the "NodeCommand", user could register additional node command to be executed
            during drag and drop. The DragDropNodeCommandEventHandler always use the first valid
            node command(IsValid method return true) to respond to the drag and drop events. The 
            sequence is first check "NodeCommand", then the additional node commands as the sequence 
            they were registered.
            </para>
            <para>
            If you want make sure a specific node command will be used first, set it to "NodeCommand".
            </para>
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.#ctor">
            <summary>
            Constructs an empty event handler.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.HandleNodeEvent(System.Object,ExplorerFramework.TraversalNodeEventArgs)">
            <summary>
            Event handler any Node Event.  Fires the given NodeCommand.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">
            Data about this event containing the affected node.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.HandleDragOverNode(System.Object,ExplorerFramework.TraversalNodeActionQueryEventArgs)">
            <summary>
            Handles the DragOver event on the ExplorerContainer that it is monitoring.  
            Will call IsValid method on each node command and set the result in 
            TraversalNodeDragEventArgs.DragActionIsValid to true if any IsValid method
            return true.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments for this event.  The arguments contain the
            current target node and property that allows this handler to indicate whether
            the NodeCommand is valid for this target.</param>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.HandleBeforeDragNodes(System.Object,System.EventArgs)">
            <summary>
            Handles the BeforeDragNodes event on the TreeList that it is monitoring.  
            It gets the explorer from which the event is raised and set it to all the 
            registered node commands.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments for this event.</param>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.HandleDragEnterTreeList(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Handles the DragEnter event on the TreeList that it is monitoring.  
            It will try to get the source explorer from which the drag and drop 
            was raised. And update all the node commands' Explorer property accordingly.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments for this event.  The arguments contain the
            source explorer from which the drag and drop operation is first raised.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.HandleQueryContinueDrag(System.Object,System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Handles the QueryContinueDrag event on the TreeList that it is monitoring.  
            It is used to handle drag and drop from explorer to viewport.
            It first check if the cursor is over any viewport of 3ds Max. Then it try
            to get the objects that the cursor is over. Afterwards, if dragging, it call
            the will check if any registered node command could handle the operation and 
            set the cursor accordingly. If dropped, it will execute the first valid node 
            command.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments for this event.</param>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.RegisterAdditionalNodeCommand(ExplorerFramework.NodeCommand)">
            <summary>
            Register an additional node command and update its Explorer property.
            </summary>
            <param name="cmd">
            The NodeCommand to be registered.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.UnregisterAdditionalNodeCommand(ExplorerFramework.NodeCommand)">
            <summary>
            Unregister an additional node command.
            </summary>
            <param name="cmd">
            The NodeCommand to be unregistered.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.UnregisterAllAdditionalCommands">
            <summary>
            Unregister all the additional node commands.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.CanDropOnNode(ExplorerFramework.TraversalNode)">
            <summary>
            Decide if the drop operation can be performed or not.
            </summary>
            <param name="node"> The target node of the drop operation </param>
            <returns>
            true if the drop operation is valid, false otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.DoDropOnNodes(ExplorerFramework.TraversalNode,ExplorerFramework.TraversalNode[])">
            <summary>
            Try to call each command to handle the drop operation.
            <remarks>
            If there are more than one command could handle the drop operation, one solution is 
            to pop up a dialog to let user decide to run which command or use a hotkey combination. 
            But for now, there is no such conflict.
            </remarks>
            </summary>
            <param name="node">The target node of the node command</param>
            <param name="nodes">If the node command will work on a group of nodes,
            pass them by this param.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.TryToExecuteNodeCommand(ExplorerFramework.NodeCommand,ExplorerFramework.TraversalNode,ExplorerFramework.TraversalNode[])">
            <summary>
            Try to execute the node command.
            </summary>
            <param name="cmd">The node command to be executed</param>
            <param name="node">The target node of the node command</param>
            <param name="nodes">If the node command will work on a group of nodes,
            pass them by this param.
            </param>
            <returns>
            If the node command is executed, return true. false otherwise.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.FindExplorerFromControl(System.Windows.Forms.Control)">
            <summary>
            This method browses the parent hierarchy a control until it find 
            a Explorer control.
            </summary>
            <param name="ctrl">
            The control from which we start to find a Explorer control
            </param>
            <returns>
            If found, return the Explorer control, else return null.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxExplorerControls.DragDropNodeCommandEventHandler.FindDragSourceExplorer(System.Windows.Forms.DragEventArgs)">
            <summary>
            Find the drag source explorer
            </summary>
            <param name="e"> DragEventArgs </param>
            <returns>
            The drag source explorer if found.
            </returns>
        </member>
        <member name="T:MaxCustomControls.ExplorerCellValueChangedEventArgs">
            <summary>
            Arguments class used when an Explorer cell value has been changed.
            </summary>
            <see>ExplorerControl.ExplorerCellValueChanged</see>
        </member>
        <member name="P:MaxCustomControls.ExplorerCellValueChangedEventArgs.IsHandled">
            <summary>
            Allows event handlers to signal that the event has
            been "handled" or consumed by the handler.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCellValueChangedEventArgs.FocusedNode">
            <summary>
            The currently focused node on which the cell value has changed.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCellValueChangedEventArgs.SelectedNodes">
            <summary>
            A list of currently selected nodes in the ExplorerControl.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCellValueChangedEventArgs.NewValue">
            <summary>
            The value to which the cell has changed.
            </summary>
            <remarks>
            The type of the value is dependent on the type of property
            that the edited cell represents.  Use the FocusedProperty 
            value to determine the cell value type dynamically.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ExplorerCellValueChangedEventArgs.FocusedProperty">
            <summary>
            Property accessor for the cell being edited.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCellValueChangedEventArgs.mHandled">
            <summary>
            Storage for the IsHandled property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCellValueChangedEventArgs.mFocusedNode">
            <summary>
            Storage for the FocusedNode property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCellValueChangedEventArgs.mSelectedNodes">
            <summary>
            Storage for the SelectedNodes property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCellValueChangedEventArgs.mNewValue">
            <summary>
            Storage for the NewValue property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCellValueChangedEventArgs.mFocusedProperty">
            <summary>
            Storage for the FocusedNode property.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ExplorerTreeList">
            <exclude/>
            <summary>
            Specializes MaxTreeList for use with Explorers. Implements the Explorer
            interface and knows about ExplorerFramework constructs such as DataFacade,
            and TraversalNode.
            Pretty much agnostic of the 3dsmax SDK.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="P:MaxCustomControls.ExplorerTreeList.ExplorerFramework#Explorer#FocusedNode">
            <summary>
            The node that has immediate focus
            </summary>
            <remarks>Instead of a DevExpress TreeListNode, this returns a TraversalNode instead.</remarks>
        </member>
        <member name="P:MaxCustomControls.ExplorerTreeList.DimParents">
            <summary>
            Sets whether unselected parent nodes should be dimmed   
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.CreateMaxTreeListHandler">
            <exclude/>
            <summary>
            Overridden so that we can supply our own implementation of TreeListHandler.
            </summary>
            <returns>A ExplorerTreeListHandler object.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.HandleMultiSelectionAnchorNodeDirty(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            Reset MaxTreeListHandler.MultiSelectAnchorNode on treelist nodes reset.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.ConvertToTreeListNode(ExplorerFramework.TraversalNode)">
            <summary>
            Converts a TraversalNode to a DevExpress TreeListNode. 
            The conversion is made possible by a dictionary that maps traversal nodes to TreeListNode's.
            Both types are pretty much max agnostic
            </summary>
            <param name="dataNode">The node to convert</param>
            <returns>The DevExpress TreeListNode if it exists.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.FindTraversalNode(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Converts a DevExpress TreeListNode to a traversal node
            </summary>
            <param name="treeNode">A DevExpress TreeListNode instance</param>
            <returns>A Traversal node</returns>
        </member>
        <member name="P:MaxCustomControls.ExplorerTreeList.SortFields">
            <exclude/>
            <summary>
            Updated during the StartSorting event. Only guaranteed to be valid
            for the duration of the sort operation.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerTreeList.mNodeButtonBrush">
            <summary>
            The color used to down the expand collapse buttons
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.HandleCustomDrawNodeButton(System.Object,DevExpress.XtraTreeList.CustomDrawNodeButtonEventArgs)">
            <summary>
            Draws a custom image (triangle) instead of the default +- button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.OnAfterDataSourceChange(System.Object,System.EventArgs)">
            <summary>
            Callback event handler called by MaxTreeList after the data source is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.HandleTraversalChanged(System.Object,System.EventArgs)">
            <summary>
            Callback event handler for when the data-facade marks itself as dirty, or unclean
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:MaxCustomControls.ExplorerTreeList.PaintBegin">
            <exclude/>
            <summary>
            internal event handler which will be invoked before TreeList.OnPaint.
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerTreeList.PaintEnd">
            <exclude/>
            <summary>
            internal event handler which will be invoked after TreeList.OnPaint.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.ResetDataFacade">
            <summary>
            Initiates refreshing of the data facade.
            This basically is called from two places in this class:
            1. In the OnPaint event handler, and only when the data facade is marked as 'dirty'.
            2. When the 'ShowHierarchy' property is changed. 
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerTreeList.ListResetting">
            <exclude/>
            <summary>
            Fires before the node list resets itself.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.HandleDataFacadeResetting(System.Object,System.EventArgs)">
            <summary>
            Callback event handler called by the data facade BEFORE it refreshes itself.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:MaxCustomControls.ExplorerTreeList.ListReset">
            <exclude/>
            <summary>
            When all nodes of the tree list were reset, this event handler 
            will be called.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.HandleDataFacadeReset(System.Object,System.EventArgs)">
            <summary>
            Called by the data facade after the facade has been refreshed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:MaxCustomControls.ExplorerTreeList.DragOverNode">
            <exclude/>
            <summary>
            Called when a DragOver happens on a TreeList node.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.OnDragOverNode(ExplorerFramework.TraversalNodeActionQueryEventArgs)">
            <exclude/>
            <summary>
            Raises the DragOverNode event.
            </summary>
            <param name="e">The arguments to be passed to this event.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.TranslateNodeDragOver(System.Object,System.Windows.Forms.DragEventArgs)">
            <exclude/>
            <summary>
            The handler which converts the Control.DragOver event into an
            ExplorerTreeList.DragOverNode event.
            </summary>
            <remarks>
            This handler dispatches the DragOverNode event, but also flips the
            current Cursor to reflect the result of the DragOverNode dispatch.
            </remarks>
            <param name="sender">The sender of the event - the TreeList.</param>
            <param name="e">The DragOver event params.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.FindDragSourceExplorer(System.Windows.Forms.DragEventArgs)">
            <exclude/>
            <summary>
            Find the drag source explorer
            </summary>
            <param name="e"> DragEventArgs </param>
            <returns>
            The drag source explorer if found.
            </returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.TranslateToUpdatedNode(ExplorerFramework.TraversalNode,ExplorerFramework.TraversalNode@)">
            <exclude/>
            <summary>
            Translate an old TraversalNode to a new TreeListNode whose corresponding TraversalNode has a same INode member with the old one.
            </summary>
            <param name="oldNode">The given old TraversalNode</param>
            <param name="invisibleNode">If the updated TraversalNode is filtered out, then it'll be assigned to the invisibleNode.</param>
            <returns>The new TreelistNode</returns>
            <remarks>
            This method is usually called when the DataFacade has been reset and the ExplorerTreeList would like to get the updated TreeListNodes 
            from the old selected TreeListNodes before DataFacade was reset.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.SelectionState.#ctor(MaxCustomControls.ExplorerTreeList)">
            <summary>
            Constructor to store the state of the selected nodes and focused nodes of the TreeList control. 
            </summary>
            <param name="treeList">Initializes itself based off of the selection from the treelist control</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.ApplyDefaultExpandState">
            <exclude/>
            <summary>
            Apply the default expand state to all nodes in the tree list.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerTreeList.NodeDefaultExpandState">
            <exclude/>
            <summary>
            This object is used to determine the default expand state of a specific 
            node.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.HandleColumnCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
            <exclude/>
            <summary>
            Process the event occurred when the TreeList column collection changed.
            Sub-menu items for the "Replace Column" context menu item are adjusted 
            according to changes of columns.
            </summary>
            <param name="sender">
            The object which sends CollectionChange event.
            </param>
            <param name="e">
            CollectionChange event args.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.FindColumnSwitchMenuItemByColumn(DevExpress.XtraTreeList.Columns.TreeListColumn)">
            <exclude/>
            <summary>
            Try to find the column switch menu item according to
            the column given.
            </summary>
            <param name="column">
            The given column.
            </param>
            <returns>
            If the menu item is found,it is returned or null is 
            returned.
            </returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.AddColumnSwitchMenuItem(DevExpress.XtraTreeList.Columns.TreeListColumn)">
            <exclude/>
            <summary>
            Add a new sub-menu item corresponding to a given column into
            the "Replace Column" context menu item.
            </summary>
            <param name="column">
            Added column.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.RemoveColumnSwitchMenuItem(DevExpress.XtraTreeList.Columns.TreeListColumn)">
            <exclude/>
            <summary>
            Remove a sub-menu item corresponding to a given column from
            the "Replace Column" context menu item.
            </summary>
            <param name="column">
            Removed column.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.RefreshColumnSwitchMenus">
            <exclude/>
            <summary>
            Refresh all the sub-menu items corresponding to all the columns 
            of the treelist in the "Replace Column" context menu item.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.HandleTreeListColumnContentChanged(System.Object,DevExpress.XtraTreeList.ColumnChangedEventArgs)">
            <exclude/>
            <summary>
            Process the event when the column content changed.(Mainly handles
            caption changed) 
            </summary>
            <param name="sender">
            The ColumnChanged event sender.
            </param>
            <param name="e">
            The Column ChangedEvent Args.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.HandleShowTreeListMenu(System.Object,DevExpress.XtraTreeList.PopupMenuShowingEventArgs)">
            <exclude/>
            <summary>
            Process the event occurred when the column menu in the TreeList control is invoked.
            </summary>
            <param name="sender">
            The object which sends TreeList menu event.
            </param>
            <param name="e">
            TreeList menu event args.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.HandleColumnSwitchMenuItemClicked(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            Process the event occurred when the menu item corresponding 
            to the "quick-switch" column is clicked.
            </summary>
            <param name="sender">
            the menu item clicked.
            </param>
            <param name="e">
            The default event args.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.HandleRefereshColumnSwitchMenuOnDataSourceChanged(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            Refresh all the sub-menu items corresponding to all the columns 
            of the treelist in the "Replace Column" context menu item when the
            DataSource of the treelist changed.
            </summary>
            <param name="sender">
            The object which sends DataSource changed event.
            </param>
            <param name="e">
            The default event args.
            </param>
            <remarks>
            NOTE THAT CURRENTLY ALL TREELIST COLUMNS REMAIN UNCHANGED WHEN THE
            DATA SOURCE OF THE TREELIST HAS BENN CHANGED.
            This issue remains to be resolved.To maintain the consistency with 
            the treelist columns, the sub-menu items of the column switch menu
            remain unchanged with respect to the the treelist columns.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ExplorerTreeList.QuickColumnSwitcherEnabled">
            <exclude/>
            <summary>
            Option to enable the quick column switcher.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ExplorerTreeList.MinimizeAllWidthsMenuItem">
            <summary>
            This menu item is used for minimizing the fit of all columns
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.MinimizeAllWidthsMenuItem.#ctor(DevExpress.XtraTreeList.TreeList)">
            <summary>
            Constructor
            </summary>
            <param name="treeList">
            The treelist that this menu item operates on
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.MinimizeAllWidthsMenuItem.OnClick">
            <summary>
            Process the click event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.CollapseSelected">
            <exclude/>
            <summary>
            Collapse the selected nodes and all their children nodes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.ExpandSelected">
            <exclude/>
            <summary>
            Expand the selected nodes and all their children nodes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.ExpandNode(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <exclude/>
            <summary>
            Expand a node and all its children nodes recursively.
            </summary>
            <param name="node">the node to expand</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.CollapseNode(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <exclude/>
            <summary>
            Collapse a node and all its children nodes recursively.
            </summary>
            <param name="node">the node to collapse</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.FocusAndRename(System.Int32)">
            <summary>
            focus to the node that is identified by the nodeID and goes into rename mode
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerTreeList.FindSelected">
            <summary>
            Reveals the next selected node by expanding all of its parent nodes and
            vertically scroll so it is visible.
            </summary>
            <remarks>
            The first call reveals the first selected node.  Any selection change resets
            the next call to the first selected node
            </remarks>
        </member>
        <member name="F:MaxCustomControls.ExplorerTreeList.sNodesComparerField">
            <exclude/>
            <summary>
            Reflective access to internal field in DevExpress code. Accessed through
            reflection to avoid having to modify DevExpress code.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerTreeList.ShouldRevealNodesOnSelection">
            <summary>
            Set this property to true if the control should reveal nodes when the selection set is updated, or false otherwise.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerTreeList.ShouldInvalidateOnPostRender">
            <summary>
            Set this property to true if the control needs to invalidate at the end of rendering.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerTreeList.ShouldInvalidateOnPostPlayback">
            <summary>
            Set this property to true if the control needs to invalidate at the end of playback.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ExtendedColorEditor">
            <summary>
            Override the default ColorEdit to serve as ColorEditor,
            which can create Max color picker form instead of default.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExtendedColorEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExtendedColorEditor.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor with specified title and alpha properties.
            </summary>
            <param name="formtitle">
            Provides the formtitle that color picker form shows.
            </param>
            <param name="alpha">
            Provides whether color has alpha channel, 
            which determines the color picker form to be created.
            </param>
        </member>
        <member name="P:MaxCustomControls.ExtendedColorEditor.IsPopupOpen">
            <summary>
            Override the ColorEdit.IsPopupOpen property.
            </summary>
            <returns> Returns whether the color picker form is pop up.</returns>
        </member>
        <member name="P:MaxCustomControls.ExtendedColorEditor.EditorClassInfo">
            <summary>
            Overrides the BaseEdit.EditorClassInfo to provide the cutomized editor class information for ExtendedColorEditor.
            </summary>
            <remarks>
            By overriding this property, MaxRepositoryItemColorEdit and MaxColorEditViewInfo instance will be created for ExtendedColorEditor
            otherwise the instance of their base class(i.e,RepositoryItemColorEdit and ColorEditViewInfo) will be created.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExtendedColorEditor.CreatePopupForm">
            <summary>
            Override for ColorEdit.CreatePopupForm()
            </summary>
            <returns> Returns Max color picker form.</returns>
        </member>
        <member name="M:MaxCustomControls.ExtendedColorEditor.SetPopupOpen(System.Boolean)">
            <summary>
            Set the IsPopupOpen property.
            </summary>
            <remarks>
            We prefer to set member variables via IsPopupOpen property. However, 
            PopupBaseEdit.IsPopupOpen does not have an overridable set accessor 
            so we provide this function to set the value of IsPopupOpen.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExtendedColorEditor.HandleColorChanged(System.Object,System.EventArgs)">
            <summary>
            Process the event occurred when color is changed in color picker form.
            </summary>
            <param name="sender">
            The object which send ColorChanged event.
            </param>
            <param name="e">
            The default event args.
            </param>
        </member>
        <member name="F:MaxCustomControls.ExtendedColorEditor.mIsPopupOpen">
            <summary>
            Property store whether the color picker is showed or destroyed.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExtendedColorEditor.mFormTitle">
            <summary>
            Property store the color picker title to be displayed.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExtendedColorEditor.mAlpha">
            <summary>
            Property store whether color and color picker has alpha channel.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ExtendedPopupColorEditForm">
            <summary>
            Override the default PopupBaseForm to serve color picker instead of default.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExtendedPopupColorEditForm.#ctor(MaxCustomControls.ExtendedColorEditor,System.String,System.Boolean)">
            <summary>
            Constructor with specified owner, title and alpha properties.
            </summary>
            <param name="ownerEdit">
            Provides owner color editor which owns this color picker form.
            </param>
            <param name="Formtitle">
            Provides the formtitle that color picker form shows.
            </param>
            <param name="alpha">
            Provides whether color has alpha channel, 
            which determines the color picker form to be created.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExtendedPopupColorEditForm.ShowPopupForm">
            <summary>
            Override the default ShowPopupForm() to show max color picker form.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExtendedPopupColorEditForm.HidePopupForm">
            <summary>
            Override the default HidePopupForm() to hide max color picker form.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExtendedPopupColorEditForm.AllowMouseClick(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Override the default AllowMouseClick() to judge whether mouse click
            position is valid. If not, hide color picker form.
            </summary>
            <param name="control">
            Provides the control item to judge whether mouse click position
            is in its valid region. Because of being overriden, it is not used here.
            </param>
            <param name="mousePosition">
            Provides the position where mouse clicks.
            </param>
            <remarks>
            Only click on color editor and color picker form is valid, except when the 
            cursor is in color sampling mode.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ExtendedPopupColorEditForm.Properties">
            <summary>
            Override the default RepositoryItemColorEdit property.
            </summary>
            <remarks>
            It must be overridden because of abstract interface.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ExtendedPopupColorEditForm.ResultValue">
            <summary>
            Override the default ResultValue property.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExtendedPopupColorEditForm.OwnerEdit">
            <summary>
            Override the default OwnerEdit property.
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExtendedPopupColorEditForm.ColorChanged">
            <summary>
            Event makes color editor keep color synchronously with color picker form.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExtendedPopupColorEditForm.HandleColorConfirmed(System.Object,CSharpUtilities.ValueChangedEventArgs{System.Drawing.Color})">
            <summary>
            Process the event occurred when color change is confirmed by click OK.
            </summary>
            <param name="sender">
            The object which send ColorChanged event.
            </param>
            <param name="e">
            The ConfirmColorEventArgs which contains color property.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExtendedPopupColorEditForm.HandleDialogCancelled(System.Object,System.EventArgs)">
            <summary>
            Process the event occurred when color change is cancelled by click Cancel.
            </summary>
            <param name="sender">
            The object which send ColorChanged event.
            </param>
            <param name="e">
            The default event args.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExtendedPopupColorEditForm.HandleColorRefresh(System.Object,CSharpUtilities.ValueChangedEventArgs{System.Drawing.Color})">
            <summary>
            Process the event occurred when color change is change in color picker form.
            </summary>
            <param name="sender">
            The object which send ColorChanged event.
            </param>
            <param name="e">
            The ConfirmColorEventArgs which contains color property.
            </param>
            <remarks>
            It will send a event to color editor to keep the same color with color picker form.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExtendedPopupColorEditForm.CalcFormSizeCore">
            <summary>
            Override the default CalcFormSizeCore property.
            </summary>
            <returns> Returns the size of base form.</returns>
            <remarks>
            It must be overridden because of abstract interface.
            Return size must be larger than zero, or the color picker will not pop up.
            Actually base form is not popup so the size is insignificant.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxToolStrip.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxToolStrip.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override the WndProc handler, so that the WM_MOUSEACTIVATE message always activates the ToolStrip.
            Otherwise if the host Form is a child window (consider the case of Material Explorer as 
            Extended Viewport), clicking the ToolStrip won't activate the Form . 
            Also, if the host Form is a child window and it's already active, the default .NET ToolStrip 
            returns MA_ACTIVATEANDEAT for a WM_MOUSEACTIVATE message. This prevents the message to be 
            properly handled: clicking on toolbar button won't really "hit" the button.
            Related essay: http://blogs.msdn.com/rickbrew/archive/2006/01/09/511003.aspx
            </summary>
            <param name="m">Window message to be handled</param>
        </member>
        <member name="T:MaxCustomControls.MaxColorEditViewInfo">
            <summary>
            Overrides the default DevExpress ColorEditViewInfo to suppress drawing the 
            dropdown menu button when the editor does not have focus.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxColorEditViewInfo.#ctor(DevExpress.XtraEditors.Repository.RepositoryItem)">
            <summary>
            Constructor.
            </summary>
            <param name="item">The repository item to which this view belongs.</param>
        </member>
        <member name="P:MaxCustomControls.MaxColorEditViewInfo.IsDrawButtons">
            <summary>
            Overrides the standard ColorEditViewInfo behavior and the dropdown button will 
            never be drawn.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxColorEditViewInfo.IfMouseClickInAcceptedRegion(System.Drawing.Point)">
            <summary>
            This function determine if an editor should be shown based on the given
            mouse location.
            </summary>
            <param name="mouseClickLocation">The given mouse location</param>
            <returns>True if to show the editor, false otherwise.</returns>
        </member>
        <member name="T:MaxCustomControls.ExplorerListData">
            <summary>
            Specializes DevExpress's ListData class to improve its performance and
            fix some bugs.
            </summary>
            <remarks>
            This class exists to override the default O(n^2) implementation for 
            TreeListNode creation.  This implementation is specialized and optimized
            for use with ExplorerTreeList and ExplorerFramework.DataFacade.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerListData.#ctor(DevExpress.XtraTreeList.Data.TreeListDataHelper,MaxCustomControls.ExplorerTreeList)">
            <summary>
            Constructs the ListData with the data helper and treelist objects.
            </summary>
            <param name="dataHelper">The TreeListDataHelper object associated with this list - 
            passed to the base class constructor</param>
            <param name="treeList">The ExplorerTreeList associated with this list - this object's
            DataFacade is passed to the base class constructor
            </param>
        </member>
        <member name="P:MaxCustomControls.ExplorerListData.ExplorerTreeList">
            <summary>
            The TreeList object associated with this list.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerListData.ConvertValue(System.Object,System.Object)">
            <summary>
            Override ConvertValue to check that a TypeConverter associated with
            a type can properly ConvertTo the desired type.
            </summary>
            <remarks>
            The base DevExpress implementation will look for a TypeConverter on
            the destination column, but it doesn't check that the TypeConverter
            can actually converter to the column's type, or even if that conversion
            is necessary.
            </remarks>
            <param name="value">Edit value to set in the column.</param>
            <param name="columnID">Id for the destination column.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerListData.CreateAllNodes">
            <summary>
            Override CreateAllNodes because the base algorithm is O(n^2)
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerListData.BuildFlatNodes">
            <summary>
            Internal - builds the flat list of nodes in the DataHelper.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerListData.BuildNodeTree">
            <summary>
            Internal - constructs the tree of nodes recursively by calling
            <c>BuildSubtree(root, null)</c>
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerListData.BuildSubtree(ExplorerFramework.TraversalNode,DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Internal - recursively builds a tree of nodes
            </summary>
            <param name="traversalNode">The root data node</param>
            <param name="parentNode">The root parent node - can be null</param>
        </member>
        <member name="F:MaxCustomControls.ExplorerListData.mTreeList">
            <summary>
            Storage for ExplorerTreeList
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxEditorLocalizer">
            <summary>
            A localization class for the DevExpress editor controls
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxEditorLocalizer.GetLocalizedString(DevExpress.XtraEditors.Controls.StringId)">
            <summary>
            Overridden to swap in our own resource strings for localization.
            </summary>
            <param name="id">the enum value of the string requested</param>
            <returns>The localized resource string.</returns>
        </member>
        <member name="T:MaxCustomControls.MaxRepositoryItemColorEdit">
            <summary>
            Override the default RepositoryItemColorEdit to serve a specialized view info
            object used to paint Color cells.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemColorEdit.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemColorEdit.CreateViewInfo">
            <summary>
            Override for RepositoryItemColorEdit.CreateViewInfo().
            </summary>
            <returns> Returns and application specific BaseEditViewInfo.</returns>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemColorEdit.CreateEditor">
            <summary>
            Override for RepositoryItemColorEdit.CreateEditor().
            </summary>
            <returns> Returns Max color picker instead of default form.</returns>
        </member>
        <member name="T:MaxCustomControls.MaxRepositoryItemSpinEdit">
            <summary>
            Overrides the standard DevExpress RepositoryItemSpinEdit. 
            It mimics Max's spinner behavior more closely such as 
              dragging on the spinner buttons to rapidly scroll the value
            </summary>
            <remarks>
            Although the class has compile dependencies on ExplorerFramework, it is designed 
            to work for any TreeList, even if ExplorerFramework elements are not present
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemSpinEdit.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="numberType">A type object to be used with this spinner.</param>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemSpinEdit.Clone">
            <summary>
            Override of the Clone method to return this derived class.
            </summary>
            <returns> A clone of this object.</returns>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemSpinEdit.Assign(DevExpress.XtraEditors.Repository.RepositoryItem)">
            <summary>
            An override of the Assign method.
            </summary>
            <remarks>
            This version of Assign only works with MaxRepositoryItemSpinEdit
            objects.
            </remarks>
            <param name="item"> 
            An item to assign to this spinner.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemSpinEdit.CreateEditor">
            <summary>
            Creates an ExtendedSpinEditor for this repository item's number type.
            </summary>
            <returns>
            A new ExtendedSpinEditor for this repository item's number type.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemSpinEdit.CreateViewInfo">
            <summary>
            Creates and returns a MaxSpinEditViewInfo object based on this spinner.
            </summary>
            <returns>Returns a MaxSpinEditViewInfo object based on this spinner.</returns>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemSpinEdit.HandleShowingEditor(System.Object,System.EventArgs)">
            <summary>
            Sets the editor’s range according to the focused node’s bounds.
            </summary>
            <remarks>
            The underlying property is still responsible for clamping the value 
              before applying it in the node.  
            If individual nodes have different bounds and are edited as a batch, 
              only the focused node’s bounds will be considered.  
            It is therefore possible that a node in the batch may receive an out of bound value.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemSpinEdit.GetBoundedProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Finds any descriptor implementing IBounded in the given property’s possible layers of decorators.
            </summary>
            <param name="property">Property to be checked for IBounded</param>
            <returns>
            The outermost property descriptor implementing IBounded or null if no IBounded instance is found.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemSpinEdit.GetPropertyFromColumn(DevExpress.XtraTreeList.Columns.TreeListColumn)">
            <summary>
            Extracts the Property from a TreeList column
            </summary>
            <param name="associatedColumn">
            TreeListColumn from which to extract the PropertyDescriptor
            </param>
            <returns>
            The PropertyDescriptor associated with a TreeListColumn, returns null if 
              the TreeList from which the column is selected is not associated with any  
              ExplorerFramework elements (e.g DataFacade).
            </returns>
        </member>
        <member name="P:MaxCustomControls.MaxRepositoryItemSpinEdit.AssociatedColumn">
            <summary>
            The column to which the Repository item is associated
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxRepositoryItemSpinEdit.AlwaysDrawSpinButtons">
            <summary>
             Controls whether the spin editor buttons will be shown or not
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxRepositoryItemSpinEdit.NumberType">
            <summary>
            The numerical type (integer, float, etc.) of the data in this spinner. 
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxRepositoryItemSpinEdit.mNumberType">
            <summary>
            Storage for the NumberType field.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxRepositoryItemSpinEdit.mAssociatedColumn">
            <summary>
            Storage for the column to which the Repository item is associated
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxRepositoryItemSpinEdit.mAlwaysDrawSpinButtons">
            <summary>
            Storage for the variable which indicates if the spin buttons should be drawn
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxRepositoryItemSpinEditMap">
            <summary>
            Maps numerical primitive types (integer, float, etc.) to the correct
            MaxRepositoryItemSpinEdit instance.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemSpinEditMap.#ctor">
            <summary>
            Contructor.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxRepositoryItemSpinEditMap.RepositoryItemList">
            <summary>
            List of MaxRepositoryItemSpinEdit instances for the supported numerical
            primitive types.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxRepositoryItemSpinEditMap.TryGetValue(System.Type,MaxCustomControls.MaxRepositoryItemSpinEdit@)">
            <summary>
            Looks up repository item instance associated with a given numerical type.
            </summary>
            <param name="type"> The type on which to perform a lookup.</param>
            <param name="repositoryItem"> The repository item found, or null if it doesn't exist.</param>
            <returns> true if the lookup succeeds</returns>
        </member>
        <member name="F:MaxCustomControls.MaxRepositoryItemSpinEditMap.mRepositoryItemMap">
            <summary>
            The internal map of numerical Types to Spin editors.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxSpinEditViewInfo">
            <summary>
            Specializes BaseSpinEditViewInfo to control when buttons are drawn
            in the editor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxSpinEditViewInfo.#ctor(DevExpress.XtraEditors.Repository.RepositoryItem)">
            <summary>
            Constructor.
            </summary>
            <param name="item">An item to build the view info on.</param>
        </member>
        <member name="P:MaxCustomControls.MaxSpinEditViewInfo.IsDrawButtons">
            <summary>
            Overridden to prevent drawing buttons if the editor is read-only
            or unfocused.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxSpinEditViewInfo.GetDisplayText">
            <summary>
            Overridden to prevent DevExpress from truncating the significant figures 
              when a non-integral type is displayed in a tree list cell.
            </summary>
            <returns>
            String the will be displayed in the tree list cell.
            </returns>
        </member>
        <member name="P:MaxCustomControls.MaxSpinEditViewInfo.EditValue">
            <summary>
            Overridden to inform the user when the value exceeds the maximum value of the decimal type.
            This is necessary because SpinEdit's base type is decimal, which has a smaller range
              than Max's spinner controls whose type is float.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxToolStripComboBox">
            <summary>
            Specializes ToolStripComboBox to handle keyboard-focus issues on the 
            Max platform.  
            </summary>
            <remarks>
            Applies a TextFocusHelper to manage keyboard focus between the parent 
            managed window and the underlying native application.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripComboBox.#ctor">
            <summary>
            Constructor. See the MSDN documentation for ToolStripComboBox.ToolStripComboBox()
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripComboBox.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructor.  See the MSDN documentation for ToolStripComboBox.ToolStripComboBox(Control)
            </summary>
            <param name="c">See the MSDN documentation for ToolStripComboBox.ToolStripComboBox(Control)</param>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripComboBox.#ctor(System.String)">
            <summary>
            Constructor. See the MSDN documentation for ToolStripComboBox.ToolStripComboBox(String)
            </summary>
            <param name="name">See the MSDN documentation for ToolStripComboBox.ToolStripComboBox(String)</param>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripComboBox.InitializeHelper">
            <summary>
            Applies a TextFocusHelper to this combo box.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxToolStripComboBox.mFocusHelper">
            <summary>
            Manages focus for this Control.
            </summary>
            <remarks>
            We maintain this reference so that the helper is not GC-ed until this 
            control goes out of scope.
            </remarks>
        </member>
        <member name="T:MaxCustomControls.MaxToolStripSystemRenderer">
            <summary>
            Specializes ToolStripSystemRenderer to add support for the max CUI system.
            </summary>
            <remarks>
            By default, when Max launches, this Renderer is set as the default renderer for ToolStrips
            by calling:
            <code>
            ToolStripManager.Renderer = new MaxToolStripSystemRenderer();
            </code>
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripSystemRenderer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripSystemRenderer.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripSystemRenderer.Dispose">
            <summary>
            Releases resources held by this object.  
            Implementation of IDisposable pattern.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripSystemRenderer.Dispose(System.Boolean)">
            <summary>
            Releases resources held by this object.  
            Implementation of IDisposable pattern.
            </summary>
            <param name="disposing">
            true if this method is called explicitly via client code
            or false if called from the Finalizer.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripSystemRenderer.HandleCUIUpdate(System.Object,System.EventArgs)">
            <summary>
            Responds to changes in the CUI system settings to update ToolStrip
            colors.
            </summary>
            <param name="sender"> The sender of this event.</param>
            <param name="e">EventArgs.Empty</param>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripSystemRenderer.UpdateSystemColors">
            <summary>
            Updates the colors used to render ToolStrips.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripSystemRenderer.OnRenderButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
            Custom painting override to make the ToolStrip buttons behave more like they
            do in max.
            </summary>
            <param name="e"> The render event being processed.</param>
        </member>
        <member name="F:MaxCustomControls.MaxToolStripSystemRenderer.mBackgroundButtonBrush">
            <summary>
            A Brush object used to paint the backgrounds.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxToolStripSystemRenderer.mBackgroundButtonHoverBrush">
            <summary>
            A Brush object used to paint the backgrounds when the user mouse is over the button.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxToolStripSystemRenderer.mBackgroundButtonPressedHoverBrush">
            <summary>
            A Brush object used to paint the backgrounds when the user mouse is over the button and the button is pressed.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxToolStripTextBox">
            <summary>
            Specializes ToolStripTextBox to handle keyboard-focus issues on the 
            Max platform.  
            </summary>
            <remarks>
            Applies a TextFocusHelper to manage keyboard focus between the parent 
            managed window and the underlying native application.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripTextBox.#ctor">
            <summary>
            Constructor. See the MSDN documentation for  ToolStripTextBox.ToolStripTextBox()
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripTextBox.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructor.  See the MSDN documentation for ToolStripTextBox.ToolStripTextBox(Control)
            </summary>
            <param name="c">See the MSDN documentation for ToolStripTextBox.ToolStripTextBox(Control)</param>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripTextBox.#ctor(System.String)">
            <summary>
            Constructor. See the MSDN documentation for ToolStripTextBox.ToolStripTextBox(String)
            </summary>
            <param name="name">See the MSDN documentation for ToolStripTextBox.ToolStripTextBox(String)</param>
        </member>
        <member name="M:MaxCustomControls.MaxToolStripTextBox.InitializeHelper">
            <summary>
            Applies a TextFocusHelper to this text box.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxToolStripTextBox.mFocusHelper">
            <summary>
            Manages focus for this Control.
            </summary>
            <remarks>
            We maintain this reference so that the helper is not GC-ed until this 
            control goes out of scope.
            </remarks>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListColumn">
            <summary>
            Specializes TreeListColumn to optimize sizing.
            </summary>
            <remarks>
            <para>
            Max uses BestFit and BestWidth to try to intelligently assign column widths 
            in a MaxTreeList.  Primarily, to keep the hierarchy clear, we would like to 
            avoid cutting off text in the first column.  Unfortunately, performance is
            inadequate for large data sets. The base class recalculates the best width 
            for each cell upon each call to BestFit.  The base implementation further 
            degrades performance by visiting every node in the data set to compute the
            max indent width for child nodes.  The resulting time complexity for every 
            call to BestFit is O(n^2), where n is the number of nodes.
            </para>
            <para>
            To improve performance, we have applied a few optimizations.  To begin,
            computing the best fit width is reduced to linear time complexity.  Then,
            to avoid recomputing the best fit width unnecessarily, we hold on to the 
            most recently computed value.  The MaxTreeList responds to display 
            changes and DataSource events to mark this value as dirty and the 
            MaxTreeListColumn recompute it the next time the best fit width is needed.
            </para>
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListColumn.Initialize">
            <summary>
            Initializes the widths of the treelist column. This is called immediately after the default constructor is called.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListColumn.MinWidth">
            <summary>
            Overridden because the parent's MinWidth clamps values to 50 or less.. Dumb. 
            We need values to be bigger.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListColumnCollection">
            <summary>
            Specializes DevExpress's TreeListColumnCollection to supply our specialized
            column class: MaxTreeListColumn.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListColumnCollection.#ctor(DevExpress.XtraTreeList.TreeList)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">TreeList owning this collection.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListColumnCollection.CreateColumn">
            <summary>
            Overrides the base class method to supply our own specialized column
            class.
            </summary>
            <remarks>
            When a TreeList automatically generates TreeListColumns to represent
            the properties exposed by its DataSource, this method performs the 
            construction.
            </remarks>
            <returns>A new MaxTreeListColumn.</returns>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListHandler">
            <summary>
            Overrides a lot of the DevExpress standard behaviour with custom behaviour.
            </summary>
            <remarks>
            The DevExpress.TreeList class allows the client to supply its own handling 
            class to override the behaviour in specific situations.  We take 
            advantage of this fact.
            The DevExpress TreeListHandler handles mouse operations for the TreeList
            using a set of TreeListState classes.  This MaxTreeListHandler overrides
            TreeListHandler to supply custom states adjusting interaction to our 
            specifications.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.#ctor(MaxCustomControls.MaxTreeList)">
            <summary>
            Constructor.
            </summary>
            <param name="treeList">
            The TreeList that this handler will be associated with.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.CreateState(DevExpress.XtraTreeList.TreeListState)">
            <summary>
            The main entry point to overriding State classes which
            handle how the TreeList behaves in specific "states."
            </summary>
            <param name="state">An enumeration value of a state handling 
            object that the treelist needs to create.</param>
            <returns> 
            The control state object that handles a specific TreeList state.
            </returns>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListHandler.MaxColumnPressedState">
            <summary>
            Overridden state used after a mouse up event occurs 
            on a column header.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.MaxColumnPressedState.mMaxTreeListHandler">
            <summary>
            Storage for MaxTreeListHandler property.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListHandler.MultiSelectAnchorNode">
            <summary>
            Persists anchor node for shift- and control-select across 
            TreeListControlState changes.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListHandler.MaxTreeList">
            <summary>
            The TreeList managed by this handler.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListHandler.MouseSelectionEnabled">
            <summary>
            Determines if mouse actions may change the set of selected nodes.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListHandler.SelectionChangedEnabled">
            <summary>
            Determines if selection changes cause events to be fired.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.OnSelectionChanged">
            <summary>
            Overridden to allow us to block SelectionChanged events, if necessary.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.IsShiftOrControlDown">
            <summary>
            Checks whether either Shift or either Control button is 'down' at the time
            of the call.
            </summary>
            <returns>true if either the left or right shift or control key is down</returns>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListHandler.LastHitTest">
            <summary>
            The last mouse hit test cached by the MaxRegularState on MouseDown().
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.mMultiSelectAnchorNode">
            <summary>
            Storage for MultiSelectAnchorNode property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.mMaxTreeList">
            <summary>
            Storage for MaxTreeList property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.mMouseSelectionEnabled">
            <summary>
            Storage for MouseSelectionEnabled property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.mSelectionChangedEnabled">
            <summary>
            Storage for SelectionChangedEnabled property.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListHandler.MaxRegularState">
            <summary>
            Replaces the initial state during mouse interaction.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.#ctor(MaxCustomControls.MaxTreeListHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="handler">The main handler instance.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.DoubleClick(System.Drawing.Point,DevExpress.XtraTreeList.TreeListHitTest)">
            <summary>
            Overridden to disable the Set Selection timer in the handler. See
            MaxTreeListHandler.EnableSetSelectionTimer.
            </summary>
            <param name="pt">Point clicked</param>
            <param name="ht">HitTest for the click</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.MouseDown(System.Windows.Forms.MouseEventArgs,DevExpress.XtraTreeList.TreeListHitTest)">
            <summary>
            Overidden to provide modified to accept mouse input for both the 
            left and right mouse buttons.  
            </summary>
            <remarks>
            The base implementation ignores the right mouse button.
            </remarks>
            <param name="e">The mouse args for the MouseDown event.</param>
            <param name="hitTest"> 
            Hit data for this event.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.DoLeftMouseDown">
            <remarks>
            This is mostly equivalent to the default mouse interaction.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.OnExpandNode(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Overridden to prevent collapsing a node from changing the selection list.
            </summary>
            <param name="node">The node being collapsed.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.DoRightMouseDown(DevExpress.XtraTreeList.TreeListHitTest)">
            <summary>
             Overriden to expand the node when the button is clicked.
            </summary>
            <param name="hitTest">Hit test info object associated with this action.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.IsNodeHit">
            <summary>
            Determines whether a UI "node" has been hit.
            </summary>
            <remarks>
            This uses the current Data.DownHitTest state to determine if a node
            was hit.
            </remarks>
            <returns> true if anything we consider to be a node is hit.</returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.MouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden to apply mouse acceleration according to system settings.
            </summary>
            <remarks>
            The TreeList's RegularState implementation does not properly multiply
            by the wheel delta.
            </remarks>
            <param name="e">Event args associated with the mouse wheel event</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.PositionChanged">
            <summary>
            Overridden to avoid changing the selection when the node focus changes.
            </summary>
            <remarks>
            The default implementation always resets the selection 
            to the focused node.  Here, we want the selection to be maintained.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.KeyDownCore(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overridden to correct how Shift and Space are handled, and to use
            the routed key event system to send key messages to the main application.
            </summary>
            <remarks>
            By default, KeyDownCore will send the handler into the 
            IncrementalSearch state if Shift is pressed.  We want to delay the
            state transition until a real key is hit.
            </remarks>
            <param name="e">The KeyDown event args</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.KeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Overridden to handle a KeyPress event from the TreeList in this state.
            </summary>
            <param name="e">The KeyPress event args</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.MaxIsExpandCollapseAction(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Copied from RegularState.  Checks if the
            keystroke is a - or +, indicating a collapse action.
            </summary>
            <param name="e"> The KeyPress event args to check.</param>
            <returns>true if the key pressed is - or +.</returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxRegularState.HandlesKeyEvent(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Determines whether a keystroke will be handled by the 
            MaxTreeList.  Used to determine whether the KeyEvent should be bubbled
            up to parent controls.
            </summary>
            <param name="e"> The KeyEvent args to check.</param>
            <returns> true if the Event is handled by the TreeList.</returns>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListHandler.MaxNodePressedState">
            <summary>
            Overridden state used after a mouse down event occurs 
            on a node - usually until a mouse up or drag occurs.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxNodePressedState.#ctor(MaxCustomControls.MaxTreeListHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="handler">The handler that this state belongs to.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxNodePressedState.MouseMove(System.Windows.Forms.MouseEventArgs,DevExpress.XtraTreeList.TreeListHitTest)">
            <summary>
            Override the default MouseMove event to support right mouse button
            interaction and to allow drag-selecting across rows.  Drag and drop
            for relinking is triggered when the drag starts on a node icon.
            </summary>
            <param name="e">The args associated with this event.</param>
            <param name="hitTest">The hit test info object</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxNodePressedState.IsNodeDragAreaHit">
            <summary>
            Determines whether the node's drag area has been hit.
            </summary>
            <remarks>
            The drag area is the portion of a row where from which a drag and drop 
            operation may begin.  This uses Data.DownHitTest to determine the 
            current hit area.
            </remarks>
            <returns>true if the drag area has been hit</returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxNodePressedState.ChangeSelection(DevExpress.XtraTreeList.ViewInfo.RowInfo)">
            <summary>
            Overridden to make the shift-click behaviour more consistent with 
            that of Windows.
            </summary>
            <remarks>
            The default implementation does not handle shift-click consistently
            with the rest of windows.  If you click, then shift-click, it selects
            the range as expected.  Then, if you shift-click again, it selects
            the range from the previous click to the current one.  Windows handles
            this by selecting the range between the original click and this last
            click.
            </remarks>
            <param name="pressRowInfo">
            Descriptor for the currently hit row.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxNodePressedState.MouseMultiSelect(DevExpress.XtraTreeList.Nodes.TreeListNode,System.Boolean,System.Boolean)">
            <summary>
            Replaces the MouseMultiSelect method in the base class to implement
            selection behaviour consistent with windows explorer.
            </summary>
            <param name="pressNode">The currently hit node.</param>
            <param name="wasSelected">Was the node selected before?</param>
            <param name="wasFocusedNode">Was the pressed node the original focused node?</param>
            <returns>true if the selection has changed</returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxNodePressedState.PositionChanged">
            <summary>
            Overridden to avoid changing the node selection when the focused node
            changes.
            </summary>
            <remarks>
            The default implementation changes the selection.  
            We really don't want that.  We handle selection ourselves.
            </remarks>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.MaxNodePressedState.mHandler">
            <summary>
            The handler that this state belongs to.  Set in the constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListHandler.MaxColumnDraggingState">
            <summary>
            The state handler for column dragging.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxColumnDraggingState.#ctor(DevExpress.XtraTreeList.Handler.TreeListHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="handler"> the handler this state belongs to</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxColumnDraggingState.DoEndColumnDragging(System.Drawing.Point,DevExpress.XtraTreeList.HitInfoType)">
            <summary>
            This method is overridden to prevent a bug in the DevExpress code.
            </summary>
            <remarks>
            A bug in the DevExpress code forces us to guard against
            an end call arriving before DoColumnDragging is processed
             as of DevExpress 7.1.1
            </remarks>
            <param name="p">passed to base class method</param>
            <param name="ht">passed to base class method</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxColumnDraggingState.DoColumnDragging(System.Drawing.Point,DevExpress.XtraTreeList.HitInfoType)">
            <summary>
            This method is overridden to prevent a bug in the DevExpress code.
            </summary>
            <remarks>
            A bug in the DevExpress code forces us to guard against
            an end call arriving before DoColumnDragging is processed
             as of DevExpress 7.1.1
            </remarks>
            <param name="p">passed to base class method</param>
            <param name="ht">passed to base class method</param>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListHandler.MaxNodeDraggingState">
            <summary>
            Overridden to modify the default node drag behaviour.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxNodeDraggingState.#ctor(MaxCustomControls.MaxTreeListHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="handler"> handler that this state belongs to</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxNodeDraggingState.QueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Overrides to cancel dragging on right-mouse click.
            </summary>
            <param name="qcdevent">
            The event args generated by the treelist event that calls this
            handling code.
            </param>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.MaxNodeDraggingState.mHandler">
            <summary>
            The handler that this state belongs to.  Set in the constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState">
            <summary>
            Overridden to handle multi-selections specifically.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.#ctor(MaxCustomControls.MaxTreeListHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="handler">handler that this state belongs to</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.DetermineSelectionStrategy">
            <summary>
            Determines the multi-select strategy according to the key and mouse
            interaction.
            </summary>
            <returns> A delegate method that encapsulates the strategy to
            use on a multi-select.</returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.PositionChanged">
            <summary>
            Overridden to avoid changing the selection when the focused node
            changes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.MouseMove(System.Windows.Forms.MouseEventArgs,DevExpress.XtraTreeList.TreeListHitTest)">
            <summary>
            Overridden to auto-scroll and select after the user has drag-selected
            past the end of the list.
            </summary>
            <param name="e">Data for this mouse event.</param>
            <param name="ht">Data about where the mouse hit the treelist</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.MouseUp(System.Windows.Forms.MouseEventArgs,DevExpress.XtraTreeList.TreeListHitTest)">
            <summary>
            Stops the auto-scroll selection after the user releases the mouse.
            </summary>
            <param name="e"> mouse event args generated before calling this
            handling code</param>
            <param name="ht">the hit info object generated by this mouse movement.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.GetNearestNode(System.Int32)">
            <summary>
            Gets the nearest node to a particular y-based coordinate.
            </summary>
            <param name="yCoordinate"> A y-coordinate in pixels for which the closest
            node should be found.</param>
            <returns>The closest node found to the y coordinate - or null if no
            node exists or if the coordinate is illegal.</returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.ScrollSelectOnTick(System.Object,System.EventArgs)">
            <summary>
            Responds to Timer tick events to continue auto-scroll selection.
            </summary>
            <param name="sender">sender of event</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.ScrollSelect">
            <summary>
            Scrolls the list and selects the revealed nodes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.SelectToNode(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Performs a multiple selection according to the current strategy.
            </summary>
            <param name="node"> a node to select</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.SelectDragged(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Selects from the currently focused node to the passed in node.
            </summary>
            <param name="node">Determines the end of the selection range.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.SelectRange(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Selects from the handler's current anchor node to the passed in node.
            </summary>
            <param name="node">Determines the end of the selection range.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.AddRangeToSelection(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Adds the range from the anchored node to the passed in
            node to the current selection.
            </summary>
            <param name="node">Determines the end of the selection range.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.AddToSelection(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Adds the range from the focused node to the passed in
            node to the current selection.
            </summary>
            <param name="node">Determines the end of the selection range.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.RemoveFromSelection(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Removes the range from the focused node to the passed in
            node from the current selection.
            </summary>
            <param name="node">Determines the end of the selection range.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.GetAnchorNode">
            <summary>
            Gets the current anchor node for determining a node range.
            </summary>
            <returns>The range anchor node</returns>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.SelectionDelegate">
            <summary>
            The delegate type for selection strategies.
            </summary>
            <param name="node">Determines the end of the selection range.</param>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.DoSelectToNode">
            <summary>
            Stores the current selection strategy.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.MULTIPLIER">
            <summary>
            Tweaks the auto-scrolling speed.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.INTERVAL_MILLISECONDS">
            <summary>
            Auto-scroll timer interval in milliseconds.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.MARGIN">
            <summary>
            Hit margin determining the area in which scroll selection begins.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.mScrollTimer">
            <summary>
            Auto-scroll timer.  Every time the Timer fires, a ScrollSelect is
            performed.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.mOriginalSelection">
            <summary>
            Holds the original selection before any modifications.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeListHandler.MaxMultiSelectionState.mHandler">
            <summary>
            Parent MaxTreeList handler.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListLocalizer">
            <summary>
            Redirects the TreeList's UI component resources to localizable resource 
            file entries.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeListLocalizer.GetLocalizedString(DevExpress.XtraTreeList.Localization.TreeListStringId)">
            <summary>
            Overridden to redirect all string references to our own
            localizable resource file entries.
            </summary>
            <param name="id">Identifier for the requested string resource.</param>
            <returns>The localized string corresponding to the id.</returns>
        </member>
        <member name="T:MaxCustomControls.MaxTreeListResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.Cancel">
            <summary>
              Looks up a localized string similar to &amp;Cancel.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.CaptionError">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.CheckChecked">
            <summary>
              Looks up a localized string similar to Checked.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.CheckIndeterminate">
            <summary>
              Looks up a localized string similar to Indeterminate.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.CheckUnchecked">
            <summary>
              Looks up a localized string similar to Unchecked.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.ColorTabCustom">
            <summary>
              Looks up a localized string similar to Custom.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.ColorTabSystem">
            <summary>
              Looks up a localized string similar to System.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.ColorTabWeb">
            <summary>
              Looks up a localized string similar to Web.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.ColumnNamePrefix">
            <summary>
              Looks up a localized string similar to col.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.CustomizationFormColumnHint">
            <summary>
              Looks up a localized string similar to Drag and drop columns here to customize layout.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.FilterEditorApplyButton">
            <summary>
              Looks up a localized string similar to &amp;Apply.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.FilterEditorCancelButton">
            <summary>
              Looks up a localized string similar to &amp;Cancel.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.FilterEditorCaption">
            <summary>
              Looks up a localized string similar to Filter Editor.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.FilterEditorOkButton">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.FilterPanelCustomizeButton">
            <summary>
              Looks up a localized string similar to Edit Filter.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.FindControlClearButton">
            <summary>
              Looks up a localized string similar to Clear.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.FindControlFindButton">
            <summary>
              Looks up a localized string similar to Find.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.FindNullPrompt">
            <summary>
              Looks up a localized string similar to Enter text to search....
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.InvalidNodeExceptionText">
            <summary>
              Looks up a localized string similar to Do you want to correct the value ?.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.InvalidValueText">
            <summary>
              Looks up a localized string similar to Invalid Value.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnAutoFilterRowHide">
            <summary>
              Looks up a localized string similar to Hide Auto Filter Row.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnAutoFilterRowShow">
            <summary>
              Looks up a localized string similar to Show Auto Filter Row.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnBestFit">
            <summary>
              Looks up a localized string similar to Best Fit.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnBestFitAllColumns">
            <summary>
              Looks up a localized string similar to Best Fit (all columns).
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnClearFilter">
            <summary>
              Looks up a localized string similar to Clear Filter.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnClearSorting">
            <summary>
              Looks up a localized string similar to Clear Sorting.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnExpressionEditor">
            <summary>
              Looks up a localized string similar to Expression Editor....
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnFilterEditor">
            <summary>
              Looks up a localized string similar to Filter Editor....
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnFindFilterHide">
            <summary>
              Looks up a localized string similar to Hide Find Panel.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnFindFilterShow">
            <summary>
              Looks up a localized string similar to Show Find Panel.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnSortAscending">
            <summary>
              Looks up a localized string similar to Sort Ascending.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuColumnSortDescending">
            <summary>
              Looks up a localized string similar to Sort Descending.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterAllNodes">
            <summary>
              Looks up a localized string similar to AllNodes.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterAverage">
            <summary>
              Looks up a localized string similar to Average.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterAverageFormat">
            <summary>
              Looks up a localized string similar to AVR={0:#.##}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterCount">
            <summary>
              Looks up a localized string similar to Count.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterCountFormat">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterMax">
            <summary>
              Looks up a localized string similar to Max.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterMaxFormat">
            <summary>
              Looks up a localized string similar to MAX={0}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterMin">
            <summary>
              Looks up a localized string similar to Min.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterMinFormat">
            <summary>
              Looks up a localized string similar to MIN={0}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterNone">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterSum">
            <summary>
              Looks up a localized string similar to Sum.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MenuFooterSumFormat">
            <summary>
              Looks up a localized string similar to SUM={0:#.##}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.MultiSelectMethodNotSupported">
            <summary>
              Looks up a localized string similar to Specified method will not work when OptionsBehavior.MultiSelect is inactive..
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.None">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.OK">
            <summary>
              Looks up a localized string similar to &amp;OK.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.PopupFilterAll">
            <summary>
              Looks up a localized string similar to (All).
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.PopupFilterBlanks">
            <summary>
              Looks up a localized string similar to (Blanks).
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.PopupFilterNonBlanks">
            <summary>
              Looks up a localized string similar to (Non blanks).
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.PrintDesignerDescription">
            <summary>
              Looks up a localized string similar to Set up various printing options for the current treelist..
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.PrintDesignerHeader">
            <summary>
              Looks up a localized string similar to Print Settings.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.TextEditMenuCopy">
            <summary>
              Looks up a localized string similar to &amp;Copy.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.TextEditMenuCut">
            <summary>
              Looks up a localized string similar to Cu&amp;t.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.TextEditMenuDelete">
            <summary>
              Looks up a localized string similar to &amp;Delete.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.TextEditMenuPaste">
            <summary>
              Looks up a localized string similar to &amp;Paste.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.TextEditMenuSelectAll">
            <summary>
              Looks up a localized string similar to Select &amp;All.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.TextEditMenuUndo">
            <summary>
              Looks up a localized string similar to &amp;Undo.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeListResources.WindowErrorCaption">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="T:MaxCustomControls.CuiUpdatable">
            <summary>
            Receives notifications for application
            Custom User Interface (CUI) changes or updates.
            </summary>
            <remarks>
            Any component or client interested in being notified of any changes
            in the application CUI system should implement this interface. This mechanism
            works with MaxForm through reflection - the MaxForm acts as the observer to the
            change and recursively traverses all child components in its Control containers
            and calls UpdateColors() on any component that implements CuiUpdatable.
            </remarks>
            <seealso cref="T:ManagedServices.CuiUpdater"/>
            <seealso cref="T:MaxCustomControls.MaxCuiBinder"/>
        </member>
        <member name="M:MaxCustomControls.CuiUpdatable.UpdateColors">
            <summary>
            Called when a change or update has occurred in 
            the application CUI system.
            </summary>
            <remarks>
            Clients implementing this interface should dynamically query
            the CUI system to acquire the new UI colors it should be using at
            the time of this method invocation.
            </remarks>
            <seealso cref="T:ManagedServices.CuiUpdater"/>
        </member>
        <member name="T:MaxCustomControls.ExplorerControl">
            <summary>
            Base UI View component for representing a tree-structure hierarchy of TraversalNodes.
            </summary>
            <remarks>
            <para>
            More specific views can be created for particular data sets by extending this class 
            to included specialized handling.  The Scene Explorer expresses one such instance, 
            where this Control is specialized for the scene node data set.  
            </para>
            <para>
            The Explorer framework has been designed to handle more generic situations, however, and 
            as such this Explorer can be used to represent any kind of hierarchy that a third-party 
            client might wish to represent.  The ExplorerControl class provides the following 
            functionality:
            <list type="bullet">
            <item>
            <description>A tree-list or flat-list view of a hierarchy of nodes.</description>
            </item>
            <item>
            <description>
            The capability to add editable Properties to these nodes that are represented as additional, 
            sortable columns in the tree-list.
            </description>
            </item>
            <item>
            <description>Basic and Advanced Search capabilities.  Basic search is provided by a Find
            input TextBox at the top of the control and performs a search (either strict, wildcard-based
            or regular expression-based) on the TraversalNode list of the tree-list.  Advanced Search
            is a separate component which can be added to the Explorer dialog (either as a button or a 
            menu item) which interacts with the DataFacade associated with the ExplorerControl.
            </description>
            </item>
            <item>
            <description>
            A standard set of user interface mechanisms that provides a unified workflow 
            for Explorer implementations.  This includes node drag-and-drop functionality, node filters, 
            selection options (such as Select Children, etc), and mouse / keyboard input interactions 
            (drag select, hotkeys, selection focus on find, and other smaller details.)  As much as
            possible, the View has been separated from the Model so that a common approach to 
            hierarchy browsing can be applied to a wide-range of hierarchies.
            </description>
            </item>
            </list>
            </para>
            <para>
            By default, the control consists of a central tree-list view, and a toolbar of controls, 
            including a Find field, an Explorer Instance combo-box (for dynamically naming and swapping
            explorers) buttons to Select All, None or Invert the current selection, and a button to 
            lock editing of cells in the Explorer.
            </para>
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            If this contructor is used, then the client should make sure to
            set both the InstanceName and DataFacade properties.  The second
            property is particular as this control will not have any data 
            associated with it without a DataFacade object.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.#ctor(System.String,ExplorerFramework.DataFacade)">
            <summary>
            Constructor - initializes the control with an instance name and a model 
            DataFacade.
            </summary>
            <param name="aName">An instance name for this explorer.</param>
            <param name="aDataSource">The underlying DataFacade (model) on which
            this ExplorerControl (view) is based.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnNameChange(System.Object,DevExpress.XtraTreeList.CellValueChangedEventArgs)">
            <summary>
            The handler for when a node is renamed
            </summary>
            <param name="sender">
            The source of the event - the view selector combo box.
            </param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.UpdateColors">
            <summary>
            Updates the colours of the elements of the
            ExplorerControl according to the Max platform CUI settings.
            Implements the CuiUpdatable interface.  
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.ListDoubleClick">
            <summary>
            Raised when the treelist is double-clicked in a valid double-click location.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnListDoubleClick(System.EventArgs)">
            <summary>
            Raises the ListDoubleClick event.
            </summary>
            <param name="e">The event args to pass to the event handlers.</param>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.RoutedKeyEvent">
            <summary>
            Raised when a key event is to be bubbled up from a child component
            to any interested party (such as the parent form, for example.)
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnRoutedKeyEvent(CSharpUtilities.RoutedKeyEventArgs)">
            <summary>
            Raises the RoutedKeyEvent event.
            </summary>
            <param name="e">The event args to pass to the event handlers.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.RaiseRoutedKeyEvent(CSharpUtilities.RoutedKeyEventArgs)">
            <summary>
            Raise a RoutedKeyEvent event.
            </summary>
            <param name="e">The arguments to pass to the handlers of the
            RoutedKeyEvent event.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.CreateState">
            <summary>
            A factory method for creating the state object that represents this explorer.
            Clients deriving from this class should override this method and return
            their own derived State object.
            </summary>
            <returns>An empty State object that is used to persist and serialize
            the state of this object.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.CreateExplorerTreeList">
            <summary>
            ExplorerControl's entry for creating its explorerTreeList member.
            </summary>
            <returns>The created ExplorerTreeList.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SaveState">
            <summary>
            Takes care of creating and filling the state object that is
            used to serialize this ExplorerControl.  
            </summary>
            <remarks>
            Clients deriving from this class
            should override this method and fill in configuration details in their
            own state class returned from the CreateState() method.
            </remarks>
            <returns>A filled State object that is used to persist and serialize
            the state of this object.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Given a State object, loads the ExplorerControls customization state.
            </summary>
            <remarks>
            Clients deriving from this class
            should override this method and load configuration details in their
            own state class returned from the CreateState() method.
            </remarks>
            <param name="iState">A State object that contains the customization
            properties that will be loaded.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.LoadToolbarState(MaxCustomControls.MaxToolStrip,MaxCustomControls.MaxToolStripState)">
            <summary>
            Load the status of a toolbar from a DockableToolbarState.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.ApplyLoadedToolbarStates">
            <summary>
            Update toolbar states based on the loaded ExplorerToolbarStates object. 
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SaveToolbarState(MaxCustomControls.MaxToolStrip)">
            <summary>
            Save the status of a toolbar to a MaxToolStripState.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.LoadAllToolbarStates(MaxCustomControls.ICustomizationState)">
            <summary>
            Load all the toolbar states of this explorer.
            </summary>
            <param name="iState">
            The state object that contains toolbar states of this explorer.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SortByColumnFieldName(System.String,System.Windows.Forms.SortOrder)">
            <summary>
            Sort the tree list by the visible column with the given field name in
            the given order.
            </summary>
            <remarks>
            If no column is found for the given field name or if that column is
            not visible, this method has no effect.
            </remarks>
            <param name="fieldName">
            Name of the field represented by the column to sort.
            </param>
            <param name="order">
            Desired sort order.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SortByColumnCaption(System.String,System.Windows.Forms.SortOrder)">
            <summary>
            Sort the tree list by the visible column with the given caption in
            the given order.
            </summary>
            <remarks>
            If no column is found for the given caption or if that column is
            not visible, this method has no effect.
            </remarks>
            <param name="caption">
            Caption for the column to sort.
            </param>
            <param name="order">
            Desired sort order.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.DeserializeSort(System.Collections.Generic.ICollection{MaxCustomControls.ColumnSortState})">
            <summary>
            Sorts according to serialized state loaded in LoadState.
            </summary>
            <param name="sort">Serialized sort states to apply to the treelist.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.HandleVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            When displaying the control for the first time, we sort the tree list. 
            </summary>
            <param name="sender">
            The source of the event. not used.
            </param>
            <param name="e">
            not used
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.AcceptNameChangeHandler(System.Object,System.EventArgs)">
            <summary>
            The handler that is signaled when a user makes an instance name 
            change via the View selector.  
            </summary>
            <param name="sender">
            The source of the event - the view selector combo box.
            </param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.KeyPressEnterHandler(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            A handler attached to the View selector that handles the Enter
            user confirmation.
            </summary>
            <param name="sender">
            The source of the event - the view selector combo box.
            </param>
            <param name="e">The event args for this event - used to
            check if the key stroke is the Enter key</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SetControlName(System.String)">
            <summary>
            A method for setting the instance name that does not trigger NameChanged
            and NameChanging events.  
            </summary>
            <remarks>
            Sets the instance name without triggering the NameChanged 
            and NameChanging events.
            </remarks>
            <param name="aName">The new, unchecked instance name.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.AcceptInstanceNameChange">
            <summary>
            Takes the Text property of the View selector and sets this as the InstanceName.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.TreeList">
            <summary>
            The main TreeList control.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.InstanceName">
            <summary>
            This explorer's name.  
            </summary>
            <remarks>
            Changing the name will raise first a NameChanging event, then
            a NameChanged event.  A client can block a name change by setting
            the AllowValueChange value of the event args parameter passed 
            to the NameChanging handler to false.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.ExplorerName">
            <summary>
            The name of the explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.InstanceNameBoxVisible">
            <summary>
            Should the name box be visible?  
            </summary>
            <remarks>
            This property should be used over toggling the Visible property
            on the InstanceSelector.  This property will hide the button as well.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.DefaultsMenu">
            <summary>
            The menu that allows the user to create an instance from a default.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.InstancesMenu">
            <summary>
            The menu that allows the user to switch to another explorer instance
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.InstanceNameBox">
            <summary>
            The edit that allows the user to rename the current view
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.MakeExplorerDefaultItem">
            <summary>
            The menu item that makes the current explorer a default
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.SetExplorerAsLocalItem">
            <summary>
            The menu item that saves the current explorer as a scene explorer saved with the scene
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.SetExplorerAsGlobalItem">
            <summary>
            The menu item that saves the current explorer as a default explorer, one created based on a configuration file
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.NameChanged">
            <summary>
            Raised when the View name for this instance has changed.
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.NameChanging">
            <summary>
            Raised when the instance name is about to change.  
            </summary>
            <remarks>
            The change can be
            blocked by a listening handler by setting the value of the event
            args' AllowValueChange property to false.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.RequestNameChanged(System.String,System.String)">
            <summary>
            Raises the NameChanged event.
            </summary>
            <param name="previousName">The current name of this instance.</param>
            <param name="newName">The new name to change to.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnNameChanged(CSharpUtilities.ValueChangedEventArgs{System.String})">
            <summary>
            Raises the NameChanged event.
            </summary>
            <param name="e">The arguments passed to the handlers of this event.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.RequestNameChanging(System.String,System.String)">
            <summary>
            Raises the NameChanging event.  The result of this call indicates whether
            any handler wishes to block this change.
            </summary>
            <param name="previousName">The current name of this instance.</param>
            <param name="newName">The new name to change to.</param>
            <returns>true if no handler blocks the name change</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnNameChanging(CSharpUtilities.ValueChangingEventArgs{System.String})">
            <summary>
            Raises the NameChanging event.
            </summary>
            <param name="e">The args passed to the handler.  A handler can block
            the name change by setting the value of AllowValueChange on the args
            to false.</param>
            <returns>The final value of AllowValueChange after all handlers have been
            called to signal the event.</returns>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.ViewModified">
            <summary>
            Raised to indicate that a UI refresh is required.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnViewModified(System.EventArgs)">
            <summary>
            Raises the ViewChanged event.
            </summary>
            <param name="args">The event args passed to the event handlers.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.RequestViewModified">
            <summary>
            Raises a ViewModified event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.LaunchColumnCustomization">
            <summary>
            Opens the Column Chooser customization modeless dialog.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.HandleListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handles a change to the DataFacade list contents and regenerates 
            the TreeList columns when necessary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The arguments for this event - contains
            information regarding the type of change made.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.AddContextMenuCommand(ExplorerFramework.Command)">
            <summary>
            Adds a Command item to the context menu for the TreeList.
            </summary>
            <param name="command">A Command object that is added to
            the Right-click context menu.</param>
            <returns>A wrapping CommandMenuItem object.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SuspendContextMenuLayout">
            <summary>
            Suppress the context menu from performing layout.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.ResumeContextMenuLayout">
            <summary>
            Resume the context menu layout functionality and perform layout.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.AddContextMenuItem(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Adds a menu item to the context menu for the TreeList.
            </summary>
            <param name="menuItem">The menu item to be added to
            the Right-click context menu.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.AddContextMenuSeparator">
            <summary>
            Add a separator item to the context menu
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SetFocusToFindField">
            <summary>
            Sets the keyboard focus to the Find field of the control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.ClearFindField">
            <summary>
            Sets the keyboard focus to the Find field of the control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.FindFieldIsEmpty">
            <summary>
            Returns if the search field is empty
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.FindFieldClearEnable(System.Boolean)">
            <summary>
            Enables disables the Clear Find Field button (X)
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.SuspendInvalidates">
            <summary>
            Suspends invalidates to improve performance  
            </summary>
            <remarks>
            Typically this is called when do mass sets to the treeview
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.BatchEditStart">
            <summary>
            Used to optimize batch edits, call at the start of the edit and then BatchEditEnd when done
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.BatchEditEnd">
            <summary>
            Used to optimize batch edits, call at the end when done
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.GetSelectedNodeCount(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the number of nodes being held by the internal TreeList control.
            </summary>
            <param name="onlyMaxNodes">Whether to only count selected nodes wrapping max scene nodes</param>
            <param name="excludeSceneXRefNodes">Whether not to count selected nodes wrapping max scene nodes that are scene xref nodes</param>
            <param name="excludeRootNodes">Whether not to count selected nodes wrapping max scene nodes that are RootNodes</param>
            <remarks>
            If called with onlyMaxNodes=true or excludeSceneXRefNodes=true or excludeRootNodes=true, this needs to examine all nodes, so it may be expensive.
            </remarks>
            <returns>The number of nodes (hidden or visible) held by 
            this control.</returns>
            <remarks>
            WARNING: detects nodes by casting TraversalNode to INodeTraversalNodeBase. But INodeTraversalNodeBase is used only by scene explorer, it is not
            used by Crease Explorer or Material Explorer. See MAXX-21122
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.HasSelectedNodes(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns whether any explorer node is selected.
            </summary>
            <param name="onlyMaxNodes">Whether to only consider selected nodes wrapping max scene nodes</param>
            <param name="excludeSceneXRefNodes">Whether not to consider selected nodes wrapping max scene nodes that are scene xref nodes</param>
            <param name="excludeRootNodes">Whether not to consider selected nodes wrapping max scene nodes that are RootNodes</param>
            <returns>
            Whether any nodes are currently marked as selected in this explorer.
            </returns>
            <remarks>
            WARNING: detects nodes by casting TraversalNode to INodeTraversalNodeBase. But INodeTraversalNodeBase is used only by scene explorer, it is not
            used by Crease Explorer or Material Explorer. See MAXX-21122
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.IsNodeSelected(ExplorerFramework.TraversalNode)">
            <summary>
            Tests whether the passed in TraversalNode's corresponding list node
            is selected in the TreeList.
            </summary>
            <param name="node">A TraversalNode that has a corresponding node in the
            internal control TreeList.</param>
            <returns>true if the corresponding TreeList node is selected</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SelectNode(ExplorerFramework.TraversalNode)">
            <summary>
            Adds the passed-in node to the current TreeList selection.
            </summary>
            <param name="node">A model node to add to the current selection.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.DeselectNode(ExplorerFramework.TraversalNode)">
            <summary>
            Removes the passed-in node from the current selection set.
            </summary>
            <param name="node">The model node to remove from the current 
            selection.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SelectNodes(System.Collections.Generic.IEnumerable{ExplorerFramework.TraversalNode})">
            <summary>
            Adds the list of nodes passed-in to the current selection.
            </summary>
            <param name="nodeList">A list enumerator that points to the nodes
            to add to the current selection.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.DeselectNodes(System.Collections.Generic.IEnumerable{ExplorerFramework.TraversalNode})">
            <summary>
            Removes the list of nodes passed-in to the current selection.
            </summary>
            <param name="nodeList">A list enumerator that points to the nodes
            to remove to the current selection.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.ClearNodeSelection">
            <summary>
            Clears the current TreeList selection set.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SetSelectedNodes(System.Collections.Generic.IEnumerable{ExplorerFramework.TraversalNode})">
            <summary>
            Clears the current selection and sets the passed in nodes as the current
            TreeList selection.
            </summary>
            <param name="nodeList">A list enumerator that points to the nodes
            to set as the current selection.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.GetSelectedNodes(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an array that contains the nodes that are currently selected.
            </summary>
            <remarks>
            Note that the list of nodes is copied into this array and that manipulating
            the resulting array will not manipulate the current selection set.
            </remarks>
            <param name="onlyMaxNodes">Whether to only return selected explorer nodes wrapping max scene nodes</param>
            <param name="excludeSceneXRefNodes">Whether not to return selected nodes wrapping max scene nodes that are scene xref nodes</param>
            <param name="excludeRootNodes">Whether not to return selected nodes wrapping max scene nodes that are RootNodes</param>
            <returns>A newly created array that contains a copy of the list of
            nodes that are currently selected in the TreeList.</returns>
            <remarks>
            WARNING: detects nodes by casting TraversalNode to INodeTraversalNodeBase. But INodeTraversalNodeBase is used only by scene explorer, it is not
            used by Crease Explorer or Material Explorer. See MAXX-21122
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.FocusedNode">
            <summary>
            Which node (if any) has the current selection.  If no node
            is currently focused, then this is null.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.CalcExplorerTreeListHitInfo(System.Drawing.Point)">
            <exclude/>
            <summary>
            Calculate the hit info of the ExplorerTreeList contained in the ExplorerControl.
            Used internally.
            </summary>
            <param name="position">Screen Position to do the hit test.</param>
            <returns>Return an ExplorerTreeListHitInfo instance.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.ScrollTreeList(System.Int32)">
            <exclude/>
            <summary>
            Use this method to scroll the tree list by rowCount. Used internally.
            </summary>
            <param name="rowCount">
            Tell how many row you want to scroll. Negative value means
            scroll up while positive value means scroll down.
            </param>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.ExplorerTreeListSize">
            <exclude/>
            <summary>
            Get the size of the ExplorerTreeList control. Used internally.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.BackgroundCommandRunner">
            <summary>
            A utility object that allows clients to run background (off-thread)
            commands.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.DataFacade">
            <summary>
            The model object for this control.
            </summary>
            <seealso cref="T:ExplorerFramework.DataFacade"/>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.RevealNodes(System.Collections.Generic.IEnumerable{ExplorerFramework.TraversalNode})">
            <summary>
            Given a list of nodes, the control will make sure that none 
            of the nodes passed-in is hidden in a collapsed parent node.
            </summary>
            <param name="nodeList">An enumerator to a list of nodes to
            ensure are in visible hierarchies.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SelectAll">
            <summary>
            Selects all nodes in the TreeList.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.MakeSelectedLayerActive">
            <summary>
            Makes the selected layer active
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.InvertSelection">
            <summary>
            Inverts the current selection set.
            </summary>
            <remarks>
            If the selection set is currently empty, then all nodes are selected.
            If the selection set contains all nodes, then the selection is cleared.
            Otherwise, all nodes that are selected are removed from the selection set
            and vice-versa.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.CollapseSelected">
            <summary>
            Collapses the selected nodes
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.CollapseAll">
            <summary>
            Collapses all the nodes
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.ExpandSelected">
            <summary>
            Expands the selected nodes
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.ExpandAll">
            <summary>
            Expands all the nodes
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.InvertDisplay">
            <summary>
            Inverts the display filters
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.Rename">
            <summary>
            Renames the selected node
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.FocusAndRename(System.Int32)">
            <summary>
            Renames the selected node
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.SelectChildrenCommand">
            <summary>
            Selects all the children
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.FindSelected">
            <summary>
            Reveals the next selected node by expanding all of its parent nodes and
            vertically scroll so it is visible.
            </summary>
            <remarks>
            The first call reveals the first selected node.  Any selection change resets
            the next call to the first selected node
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.TreeListContextMenuStrip">
            <summary>
            The right-click context menu for the TreeList.
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.EditingEnabledChanged">
            <summary>
            Raised when the controls EditingEnabled property is changed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnEditingEnabledChanged(CSharpUtilities.ValueChangedEventArgs{System.Boolean})">
            <summary>
            Raises the EditingEnabledChanged event.
            </summary>
            <param name="e">Containst the old and new values of EditingEnabled.</param>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.EditingEnabled">
            <summary>
            Controls whether a user can edit the property values of specific
            nodes.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.LockButtonVisible">
            <summary>
            Controls whether the editing enabled "lock button" 
            is visible or not.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.MultipleSelectionEnabled">
            <summary>
            Sets the option on the TreeList which determines whether
            multiple selections are allowed or not.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.DragAndDropEnabled">
            <summary>
            Sets the option on the TreeList that determines whether 
            drag-and-drop of node items is enabled.
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.DropOnNode">
            <summary>
            An event raised when a node drop occurs - the completion 
            of a node drag-and-drop.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnDropOnNode(ExplorerFramework.TraversalNodeEventArgs)">
            <summary>
            Raises the DropOnNode event.
            </summary>
            <param name="e">Contains info about the drag-and-drop event.</param>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.DragOverNode">
            <summary>
            An event raised when a node DragOver occurs - when a node is dragged
            over any node from the same explorer.
            </summary>		
            <remarks>
            During drag and drop, ExplorerControl won't set cursor automatically.
            If user need change the cursor, he should set Cursor himself during related event.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnDragOverNode(ExplorerFramework.TraversalNodeActionQueryEventArgs)">
            <summary>
            Raises the DragOverNode event.
            </summary>
            <param name="e">Contains info about the drag-and-drop event.</param>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.BeforeDragNode">
            <summary>
            This event is raised before drag and drop.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnBeforeDragNode(MaxCustomControls.BeforeDragDropNodeEventArgs)">
            <summary>
            Raise the BeforeDragNode event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.RedispatchBeforeDragNode(System.Object,DevExpress.XtraTreeList.BeforeDragNodeEventArgs)">
            <summary>
            Re-dispatch the treeList's BeforeDragDrop event.
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.QueryContinueDrag">
            <summary>
            This is event is raised during the whole drag and drop process.
            </summary>
            <remarks>
            During drag and drop, ExplorerControl won't set cursor automatically.
            If user need change the cursor, he should set Cursor himself during related event.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnQueryContinueDrag(MaxCustomControls.QueryContinueDragNodeEventArgs)">
            <summary>
            Raise QueryContinueDrag event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.RedispatchQueryContinueDrag(System.Object,System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Re-dispatch the treelist's QueryContinueDrag event.
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.DragCancelNode">
            <summary>
            This event occurs when user cancel a drag operation.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnDragCancelNode(System.EventArgs)">
            <summary>
            Raise DragCancelNode event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.RedispatchDragCancelNode(System.Object,System.EventArgs)">
            <summary>
            Re-dispatch the treelist's DragCancelNode event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.HandleGiveFeedback(System.Object,System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            Disable the default cursor during Drag and Drop.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.GetAllLayerNode">
            <summary>
            get all layer based node in the treelist
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.ShowHierarchy">
            <summary>
            Toggles the hierarchy / flat node view on the TreeList.
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.ShowHierarchyChanged">
            <summary>
            Raised when the ShowHierarchy property is changed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnShowHierarchyChanged(CSharpUtilities.ValueChangedEventArgs{System.Boolean})">
            <summary>
            Raises the ShowHierarchy event.
            </summary>
            <param name="e">The args which contain the old and new values of the 
            property.</param>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.AutoExpand">
            <summary>
            Controls the auto-expand/collapse behaviour on selection change.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnAutoExpandChanged(CSharpUtilities.ValueChangedEventArgs{System.Boolean})">
            <summary>
            Raises the AutoExpand event.
            </summary>
            <param name="e">The args which contain the old and new values of the AutoExpand state
            property.</param>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.FindHandler">
            <summary>
            The handler that is used to do search matches with
            regular expressions.
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.UserSelectionChanged">
            <summary>
            Raised when a selection change occurs due to a direct user action.
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.ExplorerCellValueChanged">
            <summary>
            Raised when a value of a cell is changed.  An event is raised for each
            cell who's value is changed, even in a batch edit.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnExplorerCellValueChanged(MaxCustomControls.ExplorerCellValueChangedEventArgs)">
            <summary>
            Raises the ExplorerCellValueChanged event.
            </summary>
            <param name="e">Contains the old and new values of the edit.</param>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.RowIconProperty">
            <summary>
            A reader who's responsibility it is to generate an icon per row according to 
            a preset standard.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.SelectChildren">
            <summary>
            Determines whether, when selecting nodes, all child nodes under
            the selected node will be selected as well.
            </summary>
        </member>
        <member name="E:MaxCustomControls.ExplorerControl.SelectOptionsChanged">
            <summary>
            Raised when any property deemed as a SelectOption is changed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnSelectOptionsChanged(System.EventArgs)">
            <summary>
            Raises the SelectOptionsChanged event.
            </summary>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.RaiseSelectOptionsChanged">
            <summary>
            Raises the SelectOptionsChanged event, with no parameters.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.OnUserSelectionChanged(System.EventArgs)">
            <summary>
            Raises the UserSelectionChanged event.
            </summary>
            <param name="e">not used</param>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.FindToolBar">
            <summary>
            The Find Toolbar that contains the Find selection controls.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.ViewSelectorToolBar">
            <summary>
            The ViewSelector Toolbar that contains the ViewSelector selection controls.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.SelectionToolBar">
            <summary>
            The Selection Toolbar that contains the selection controls.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.ToolsToolBar">
            <summary>
            The Tools Toolbar that contains the Tools controls.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.SearchBox">
            <summary>
            The Find field.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.SearchClearButton">
            <summary>
            The Search Clear button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.HideFiltersButton">
            <summary>
            The Hide Filters button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.CreateLayerButton">
            <summary>
            The Hide Filters button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.FreezeAllLayerButton">
            <summary>
            The Freeze All Layer button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.HideAllLayerButton">
            <summary>
            The Hide All Layer button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.SelectAllButton">
            <summary>
            The Select All button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.SelectNoneButton">
            <summary>
            The Select None button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.InvertSelectionButton">
            <summary>
            The Select Invert button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.LockButton">
            <summary>
            The lock editing button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.PickParentButton">
            <summary>
            The pick parent button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.SelectChildrenButton">
            <summary>
            The select children button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.MakeSelectedLayerActiveButton">
            <summary>
            The select children button.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.AddToActiveLayerButton">
            <summary>
            The parent to active layer button.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.InitializeTreeList">
            <summary>
            Initialize the treeview colors.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerControl.mColumnHeaderBGBrush">
            <summary>
            The normal background of the column header.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerControl.mColumnHeaderHoverBrush">
            <summary>
            The color when the mouse is hovering over it.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerControl.mColumnHeaderSelectBrush">
            <summary>
            The color when the column is selected.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerControl.mColumnHeaderSortArrowBrush">
            <summary>
            The color of the little arrow of selected columns that shows which direction the column is sorted in.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerControl.mColumnHeaderBorderPen">
            <summary>
            The color of the border of the column header.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.HandleCustomDrawColumnHeader(System.Object,DevExpress.XtraTreeList.CustomDrawColumnHeaderEventArgs)">
            <summary>
            Draws a column header. We have to do this, because of our lack of ability to have a custom skin that looks nice.
            The Skin for Office2004 has nice scrollbars but a column header that cannot be be customized. Thus we have to
            paint this ourselves.
            This utilizes colors that work in both dark and light color themes.
            </summary>
            <param name="sender">The treelist fires this event</param>
            <param name="e">Args that are helpful in painting a column header</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.CreateAdvancedFilter">
            <summary>
            Create a specific advanced filter instance for a derived class of 
            ExplorerControl.
            </summary>
            <remarks>
            The base implementation returns null;
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.AdvancedFilter">
            <summary>
            The advanced filter member of ExplorerControl. 
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.CreateFilterDescriptionRegistry">
            <summary>
            Create a specific filter registry instance for a derived class of 
            ExplorerControl.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerControl.FilterDescriptionRegistry">
            <summary>
            The filter regesitry member of ExplorerControl. 
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.HandleDefaultsMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the user moves his mouse outside of the defaults menu.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.HandleInstancesMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the user moves his mouse outside of the instances menu.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.HandleInstancesItemClicked(System.Object,System.Windows.Forms.ToolStripItemClickedEventArgs)">
            <summary>
            Handles the event when the user has clicked on an Instances menu item.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.HandleDefaultsItemClicked(System.Object,System.Windows.Forms.ToolStripItemClickedEventArgs)">
            <summary>
            Handles the event when the user has clicked on a menu item.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.HandleInstanceNameChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the user types in the Instances text box.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.HandleInstancesButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the event when the instances button is clicked.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="F:MaxCustomControls.ExplorerControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ExplorerCustomizationState">
            <summary>
            A State class that represents the customization state of an explorer form.
            </summary>
            <remarks>
            This is the underlying Model object used to persist and serialize the customization
            state of an Explorer form.  Clients can derive from this class to add their own
            customization properties.
            </remarks>
        </member>
        <member name="T:MaxCustomControls.ExplorerCustomizationState.PropertyKeys">
            <summary>
            List of properties that this State class serializes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.#cctor">
            <summary>
            Constructor which loads up a dictionary of enum-values to property names.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.#ctor(System.Int32)">
            <summary>
            Initializes the state object with a count value
            for the number of visible columns.
            </summary>
            <param name="aColumnCount">The number of visible columns in the explorer.</param>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.VisibleColumns">
            <summary>
            An array of visible column names - in the order that they appear in the explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.ColumnWidth">
            <summary>
            An array of column widths - in the order that they appear in the explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.InstanceName">
            <summary>
            The name of the explorer - as seen in the title bar of the form.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.SelectChildren">
            <summary>
            Is Select Children turned on?
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.EditingEnabled">
            <summary>
            Is Editing of cell values enabled?
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.ShowHierarchy">
            <summary>
            Is the parent-child node hierarchy being shown?
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.AutoExpand">
            <summary>
            Controls Auto-expand behaviour on selection change.
            Auto-expand means a selected node gets visible when selected (by scrolling, and expanding its parents)
            but hidden when deselected, unless its parent had been manually expanded.  Otherwise selecting a node  
            in the scene has no effect on any Explorer node expanded state
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.AdvancedFilterDataSource">
            <summary>
            The advanced filter condition data.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.AdvancedFilterEnabled">
            <summary>
            Is the advanced filter enabled?
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.AdvancedFilterSize">
            <summary>
            The advanced filter dialog's size.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.AdvancedFilterLocation">
            <summary>
            The advanced filter dialog's absolute screen location.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.AdvancedFilterMatchAll">
            <summary>
            Is "Match All" in the "advanced filter" dialog checked?
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.ColumnSortStates">
            <summary>
            The sort states of tree list columns.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.FindToolbarState">
            <summary>
            ToolbarState of FindToolbar
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.ViewSelectorToolbarState">
            <summary>
            ToolbarState of ViewSelectorToolbar
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.SelectionToolbarState">
            <summary>
            ToolbarState of SelectionToolbar
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerCustomizationState.ToolsToolbarState">
            <summary>
            ToolbarState of ToolsToolbar
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.IsValidKey(System.String)">
            <summary>
            Internal method to check if a string corresponds to a property
            key we support.
            </summary>
            <param name="keyName">The name of a key to check.</param>
            <returns>If this corresponds to a property key we support.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.LoadProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Given a dictionary mapping keyNames to properties, loads the properties into
            this State object.
            </summary>
            <remarks>
            <para>KeyNames not explicitly supported by this State object are ignored.</para>
            <para>Clients wishing to add properties to their own custom Explorers should extend
            this class and override this method.  A call to the base implementation 
            is still required to persist the core customization properties.</para>
            <para>It is the client's responsibility to serialize and deserialize custom properties,
            since the Value type in the Dictionary is a String.</para>
            </remarks>
            <param name="aPropertySet">A dictionary mapping keynames to properties.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.SaveProperties">
            <summary>
            Creates a dictionary mapping keynames to properties for the properties
            held by this State object.
            </summary>
            <remarks>
            <para>Clients wishing to add properties to their own custom Explorers should extend
            this class and override this method.  A call to the base implementation
            is still required to persist the core customization properties.</para>
            <para>It is the client's responsibility to serialize and deserialize custom properties,
            since the Value type in the Dictionary is a String.</para>
            </remarks>
            <returns>A dictionary mapping keynames to property values.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.LoadInstanceName(System.String)">
            <summary>
            Internal - converts a safely-written String to a proper String value and
            assigns it to InstanceName.
            </summary>
            <param name="value">
            A previously escaped string.  It will be converted back to its original
            form.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.LoadVisibleColumns(System.String)">
            <summary>
            Internal - converts a String of comma-separated string to an array of strings
            and assigns it to the VisibleColumns property.
            </summary>
            <param name="value">a String of comma-separated column names</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.LoadColumnWidth(System.String)">
            <summary>
            Internal - converts a String of comma-separated ints to an array of ints
            and assigns it to the ColumnWidth property. 
            </summary>
            <param name="value">a String of comma-separated ints</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.LoadAdvancedFilterSize(System.String)">
            <summary>
            Load the advanced filter dialog's size from a string.
            </summary>
            <param name="value">
            The string which contains serialized dialog size.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.LoadAdvancedFilterLocation(System.String)">
            <summary>
            Load the advanced filter dialog's absolute screen location from a string.
            </summary>
            <param name="value">
            The string which contains serialized dialog absolute screen location.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.LoadColumnSortStates(System.String)">
            <summary>
            Load the sort states of tree list columns from a string.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.ConvertColumnSortStatesToString">
            <summary>
            Convert the sort states of tree list columns to a string.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.ConvertIntsToStringArray(System.Int32,System.Int32)">
            <summary>
            Converts two ints into an array of two Strings.
            </summary>
            <param name="value1">The first value to conver.t</param>
            <param name="value2">The second value to convert.</param>
            <returns>An array of two Strings corresponding to the two ints passed in.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.ConvertIntToString(System.Int32)">
            <summary>
            Converts an int to a String.  Used by a Converter object to
            convert an array ints to Strings.
            </summary>
            <param name="value">The int value to convert</param>
            <returns>the String representation of the int</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerCustomizationState.ConvertStringToInt(System.String)">
            <summary>
            Converts a String to an Int, or returns -1 if the parse fails.
            Used by a Converter object in a ConvertAll call.
            </summary>
            <param name="value">A String value to convert to an int</param>
            <returns>An int or -1 if the parse of the String fails.</returns>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.kValueSeparator">
            <summary>
            The separator token.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.mVisibleColumns">
            <summary>
            Storage for VisibleColumns
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.mColumnWidths">
            <summary>
            Storage for ColumnWidths
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.mInstanceName">
            <summary>
            Storage for InstanceName
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.mSelectChildren">
            <summary>
            Storage for SelectChildren
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.mEditingEnabled">
            <summary>
            Storage for EditingEnabled
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.mShowHierarchy">
            <summary>
            Storage for ShowHierarchy
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.mAutoExpand">
            <summary>
            Storage for AutoExpand
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.kPropertyKeys">
            <summary>
            The internal dictionary of enum keys to PropertyKeys.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.mFindToolbarState">
            <summary>
            Storage for "Find" DockableToolStrip
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.mViewSelectorToolbarState">
            <summary>
            Storage for "View Selector" DockableToolStrip 
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.mSelectionToolbarState">
            <summary>
            Storage for "Selection" DockableToolStrip 
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerCustomizationState.mToolsToolbarState">
            <summary>
            Storage for "Tools" DockableToolStrip 
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxCuiBinder">
            <summary>
            This manager is responsible for notifying interested parties of any changes
            in the application Custom User Interface (CUI) system settings.
            </summary>
            <remarks> 
            Client components wishing to receive notification of CUI changes should implement
            the CuiUpdatable interface and register via the RegisterForNotification() method.
            This manager is a Singleton and can be accessed using the MaxCuiBinder.GetInstance()
            method.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxCuiBinder.GetInstance">
            <summary>
            The Singleton accessor method.
            </summary>
            <returns> The single instance of this class.</returns>
        </member>
        <member name="M:MaxCustomControls.MaxCuiBinder.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxCuiBinder.HandleUIUpdated(System.Object,System.EventArgs)">
            <summary>
            Centralized handler for notifying CuiUpdatable clients.
            </summary>
            <param name="sender"> The object that generated the event this method handles.</param>
            <param name="args"> The args for this event. EventArgs.Empty by default.</param>
        </member>
        <member name="M:MaxCustomControls.MaxCuiBinder.HandleVisibilityChangedHandler(System.Object,System.EventArgs)">
            <summary>
            When the visibility of a control that has registered for notification changes, 
            a CUI update is broadcast across all components.  This handler takes care of that.
            </summary>
            <param name="sender"> The object that generated the event this method handles.</param>
            <param name="args"> The args for this event. EventArgs.Empty by default.</param>
        </member>
        <member name="M:MaxCustomControls.MaxCuiBinder.RegisterForNotification(MaxCustomControls.CuiUpdatable)">
            <summary>
            Add the given CuiUpdatable component to the list of items notified
            of UI update events.
            </summary>
            <param name="hookItem"> A component that implements the CuiUpdatable interface.</param>
        </member>
        <member name="M:MaxCustomControls.MaxCuiBinder.UnregisterForNotification(MaxCustomControls.CuiUpdatable)">
            <summary>
            Remove the given CuiUpdatable component from the list of items notified
            of UI update events.
            </summary>
            <param name="hookItem"> A component that implements the CuiUpdatable interface.</param>
        </member>
        <member name="F:MaxCustomControls.MaxCuiBinder.mListOfHooks">
            <summary>
            List of CuiUpdatable clients registered for notification.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxCuiBinder.sInstance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxCuiBinder.mVisibleChangedHandler">
            <summary>
            A common EventHandler added to each Control object which registers for
            notification.
            </summary>
        </member>
        <member name="T:MaxCustomControls.QuickRegexFindHandler">
            <summary>
            Performs searches in an ExplorerControl as the user types the search key.
            </summary>
            <remarks>
            Supports plain text, regular expression, and wildcard searches.
            </remarks>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.mFindActive">
            <summary>
            Determines if the find files has any data in it and their is an active find going on
            </summary>
        </member>
        <member name="P:MaxCustomControls.QuickRegexFindHandler.ExplorerControl">
            <summary>
            Searches are performed in this control's data set.
            </summary>
        </member>
        <member name="P:MaxCustomControls.QuickRegexFindHandler.MatchedProperty">
            <summary>
            Field searched by this handler.
            </summary>
        </member>
        <member name="P:MaxCustomControls.QuickRegexFindHandler.IsCaseSensitive">
            <summary>
            Determines if the search should be performed case sensitive.  
            </summary>
            <remarks>
            This applies to all find styles.
            </remarks>
        </member>
        <member name="E:MaxCustomControls.QuickRegexFindHandler.IsCaseSensitiveChanged">
            <summary>
            Occurs when IsCaseSensitive is changed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.OnIsCaseSensitiveChanged(CSharpUtilities.ValueChangedEventArgs{System.Boolean})">
            <summary>
            Raises the IsCaseSensitiveChanged event.
            </summary>
            <param name="e">The arguments to use - contains the new and old values</param>
        </member>
        <member name="P:MaxCustomControls.QuickRegexFindHandler.FindStyleOption">
            <summary>
            Determines if the handler will use strict, regex or wilcard searching.
            </summary>
            <see>FindStyle</see>
        </member>
        <member name="E:MaxCustomControls.QuickRegexFindHandler.FindStyleChanged">
            <summary>
            Occurs when the FindStyleOption property is changed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.OnFindStyleChanged(CSharpUtilities.ValueChangedEventArgs{ExplorerFramework.FindStyle})">
            <summary>
            Raises the FindStyleChanged event.
            </summary>
            <param name="e">The arguments to use - contains the new and old values</param>
        </member>
        <member name="P:MaxCustomControls.QuickRegexFindHandler.RequiresConfirmation">
            <summary>
            This property can be set to force the user to Confirm the find request
            via the Enter or Return key.
            </summary>
        </member>
        <member name="P:MaxCustomControls.QuickRegexFindHandler.FindActive">
            <summary>
            This property lets you check if the active seach is on
            this happens when there is any text in the search field
            </summary>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.SetPatternSource(System.Windows.Forms.ToolStripItem)">
            <summary>
            Set the source UI item from which the Pattern text is drawn.
            </summary>
            <param name="source">The ToolStripItem from which the 
            pattern text is drawn.</param>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.SetPatternSource(System.Windows.Forms.Control)">
            <summary>
            Set the source UI item from which the Pattern text is drawn.
            </summary>
            <param name="source">The Control item from which the 
            pattern text is drawn.</param>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.GetControlPatternSource">
            <summary>
            Returns the text pattern source - or null if this is not the right source.
            </summary>
            <returns>the text pattern source - or null if this is not the right source</returns>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.GetToolStripItemPatternSource">
            <summary>
            Returns the text pattern source - or null if this is not the right source.
            </summary>
            <returns>the text pattern source - or null if this is not the right source</returns>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.ExecuteFind(System.Boolean)">
            <summary>
            Performs a search in the MatchedProperty values from the ExplorerControl's
            nodes, then sets the ExplorerControl's node selection to the search results.
            </summary>
            <param name="selectnodes">if true, the scene nodes will be selected at the end of the process, it defaults to false</param>
            <remarks>
            The search is performed in a background thread to enable the user to 
            continue typing.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.HandleTextChanged(System.Object,System.EventArgs)">
            <summary>
            TextChanged event handler: will automatically execute a Find
            if user confirmation is not required.
            </summary>
            <param name="sender">source of the event - the pattern source</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.HandleEnterKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key Event handler: will automatically execute a Find if the
            key event is an Enter key.
            </summary>
            <param name="sender">source of the event - the pattern source</param>
            <param name="e">used to check if this is an Enter key</param>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.HandleCtrlKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key Event handler: will prevent a Find to be execute as long a ctrl is pressed
            </summary>
            <param name="sender">source of the event - the pattern source</param>
            <param name="e">used to check if control is press</param>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.GetPatternText">
            <summary>
            Gets the current search pattern text from the pattern source.
            </summary>
            <remarks>
            The pattern text could come from a Control or a ToolStripItem - this method
            determines where it should grab the text from.
            </remarks>
            <returns>The current pattern text.</returns>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.CreateRegex(System.String)">
            <summary>
            Creates a Regex object based on a pattern String and the
            current FindStyle option.
            </summary>
            <param name="pattern">The Pattern string used to create the Regex</param>
            <returns>The created Regex</returns>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.CreateStrictRegex(System.String)">
            <summary>
            Creates a strict match Regex object based on the passed in String
            pattern.
            </summary>
            <param name="pattern">The Pattern string used to create the Regex</param>
            <returns>The created Regex</returns>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.CreateWildcardRegex(System.String)">
            <summary>
            Creates a Wildcard match Regex object based on the passed in String
            pattern.
            </summary>
            <param name="pattern">The Pattern string used to create the Regex
            Note that this String is properly escaped here and doesn't need to be escaped
            before hand.
            </param>
            <returns>The created Regex</returns>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.CreateRegularExpressionRegex(System.String)">
            <summary>
            Creates a Regular Expression match Regex object based on the passed in String
            pattern.
            </summary>
            <param name="pattern">The Pattern string used to create the Regex</param>
            <returns>The created Regex</returns>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.DoFindWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            BackgroundWorker event handler called in the background thread to 
            perform the actual search.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">DoWork event args
            If this operation is cancelled, it is marked as so in
            e.Canceled.
            The result of the work is stored in e.Result.
            </param>
        </member>
        <member name="T:MaxCustomControls.QuickRegexFindHandler.MatchOperation">
            <summary>
            A treelist operation for performing the Regex match.
            </summary>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.MatchOperation.#ctor(System.ComponentModel.BackgroundWorker,System.Text.RegularExpressions.Regex,System.Object)">
            <summary>
            Constructs this operation with the worker, the regex object,
            and a column to search.
            </summary>
            <param name="worker">The BackgroundWorker that is executing this search</param>
            <param name="regex">The pattern to match.</param>
            <param name="columnId">The column ID to perform a match on.</param>
        </member>
        <member name="P:MaxCustomControls.QuickRegexFindHandler.MatchOperation.Cancelled">
            <summary>
            Set to halt the iteration of the TreeListNodes.
            </summary>
        </member>
        <member name="P:MaxCustomControls.QuickRegexFindHandler.MatchOperation.Result">
            <summary>
            The result of the match.
            </summary>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.MatchOperation.CanContinueIteration(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Called before each iteration.  Overridden to add a Cancelled field check.
            </summary>
            <param name="node">The next node in the iteration.</param>
            <returns>true if iteration can continue</returns>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.MatchOperation.Execute(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            The callback method which is run sequentially on every treelist node.
            Checks if the node's property fits the Regex match, and if
            so is added to the Result list.
            </summary>
            <param name="node">the treelist node match</param>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.MatchOperation.mCancelled">
            <summary>
            Storage for Cancelled
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.MatchOperation.mResult">
            <summary>
            Storage for Result
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.MatchOperation.mWorker">
            <summary>
            The worker executing the match.
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.MatchOperation.mRegex">
            <summary>
            The generated Regex object used to execute the match.
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.MatchOperation.mColumnId">
            <summary>
            The column ID to search and match.
            </summary>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.FindWorkCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Called when the worker reports that the work is complete.  Applies
            the new selection in the ExplorerControl.
            </summary>
            <param name="sender">sender of the event - the background worker</param>
            <param name="e">Contains the match results and whether the match was
            cancelled or not.</param>
        </member>
        <member name="M:MaxCustomControls.QuickRegexFindHandler.CreateBackgroundWorker">
            <summary>
            Creating the background worker and sets up its event handlers.
            </summary>
            <returns></returns>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.WILDCARD_ESCAPED_SERIES">
            <summary>
            Wildcard for a series of any character - *
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.WILDCARD_ESCAPED_SINGLE">
            <summary>
            Wildcard for a Single character - ?
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.MATCH_START">
            <summary>
            Reg Exp. for Start ^
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.MATCH_SERIES">
            <summary>
            Reg Exp. for a Series of any character .*
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.MATCH_SINGLE">
            <summary>
            Reg Exp. for a Single any character .?
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.mExplorer">
            <summary>
            Storage for ExplorerControl
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.mMatchedProperty">
            <summary>
            Storage for MatchedProperty
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.mFindStyle">
            <summary>
            Storage for FindStyleOption
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.mRegexOptions">
            <summary>
            Storage container for the IsCaseSensitive property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.mRequiresConfirmation">
            <summary>
            Storage for RequiresConfirmation
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.mToolStripItemPatternSource">
            <summary>
            The ToolStripItem pattern source, if it exists.
            </summary>
        </member>
        <member name="F:MaxCustomControls.QuickRegexFindHandler.mControlPatternSource">
            <summary>
            The Control pattern source, if it exists.
            </summary>
        </member>
        <member name="T:MaxCustomControls.NodeCommandEventHandler">
            <summary>
            Executes the given NodeCommand whenever a Node Event is received.
            </summary>
            <remarks>
            Construct with the NodeCommand to execute, then register HandleNodeEvent
            as a handler for any event which should cause the given NodeCommand to fire.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.NodeCommandEventHandler.#ctor">
            <summary>
            Constructs an empty event handler.  The NodeCommand property can later be set later.
            </summary>
        </member>
        <member name="M:MaxCustomControls.NodeCommandEventHandler.#ctor(ExplorerFramework.NodeCommand)">
            <summary>
            Constructs this handler with the NodeCommand to run.
            </summary>
            <param name="command">A node command to run when this handler is called.</param>
        </member>
        <member name="P:MaxCustomControls.NodeCommandEventHandler.NodeCommand">
            <summary>
            The NodeCommand executed by this handler upon receiving Node Events.
            </summary>
        </member>
        <member name="M:MaxCustomControls.NodeCommandEventHandler.HandleNodeEvent(System.Object,ExplorerFramework.TraversalNodeEventArgs)">
            <summary>
            Event handler any Node Event.  Fires the given NodeCommand.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">
            Data about this event containing the affected node.
            </param>
        </member>
        <member name="M:MaxCustomControls.NodeCommandEventHandler.HandleDragOverNode(System.Object,ExplorerFramework.TraversalNodeActionQueryEventArgs)">
            <summary>
            Handles the DragOver event on the ExplorerContainer that it is monitoring.  
            Will call NodeCommand.IsValid() and set the result in 
            TraversalNodeDragEventArgs.DragActionIsValid
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments for this event.  The arguments contain the
            current target node and property that allows this handler to indicate whether
            the NodeCommand is valid for this target.</param>
        </member>
        <member name="F:MaxCustomControls.NodeCommandEventHandler.mCommand">
            <summary>
            Storage for NodeCommand
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxCustomControlResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AddButtonText">
            <summary>
              Looks up a localized string similar to Add.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AddToActiveLayerToolTip">
            <summary>
              Looks up a localized string similar to Add to Active Layer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AddToContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AddToContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AddToContainerText">
            <summary>
              Looks up a localized string similar to Add Selected to Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AddToContainerTooltip">
            <summary>
              Looks up a localized string similar to Add Selected to Container: Select Nodes to Add, Click this Button, Pick Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AddToSimIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AddToSimIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AdvancedFilterDialogTitle">
            <summary>
              Looks up a localized string similar to Advanced Filter.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AdvancedFilterLaunchIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AdvancedFilterLaunchIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AdvancedFilterToggleIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AdvancedFilterToggleIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AdvancedSearchDialogTitle">
            <summary>
              Looks up a localized string similar to Advanced Search.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AllText">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AssetsMenuItem">
            <summary>
              Looks up a localized string similar to Assets.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AutoExpandText">
            <summary>
              Looks up a localized string similar to Auto-Expand to Selection.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.AutoExpandToolTip">
            <summary>
              Looks up a localized string similar to Temporarily expands Tree to reveal Selected Item.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.BakeIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.BakeIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.BatchEditFormatString">
            <summary>
              Looks up a localized string similar to Batch Edit {0}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CancelButtonText">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CaptureTransformsIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CaptureTransformsIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ClearSortStateText">
            <summary>
              Looks up a localized string similar to Clear Sort State.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CloseContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CloseContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CloseContainerText">
            <summary>
              Looks up a localized string similar to Close Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CollapseAllCommandText">
            <summary>
              Looks up a localized string similar to Collapse All.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CollapseObjectsNodeCommandName">
            <summary>
              Looks up a localized string similar to Collapse Objects.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CollapseSelectedCommandText">
            <summary>
              Looks up a localized string similar to Collapse Selected.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CollapseTopmostMaterialNodeCommandName">
            <summary>
              Looks up a localized string similar to Collapse Materials.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ColumnChooserText">
            <summary>
              Looks up a localized string similar to Configure Columns.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionContainsStringText">
            <summary>
              Looks up a localized string similar to Contains String.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionDoesNotContainStringText">
            <summary>
              Looks up a localized string similar to Does Not Contain String.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionDoesNotMatchText">
            <summary>
              Looks up a localized string similar to Does Not Match.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionDoesNotStartWith">
            <summary>
              Looks up a localized string similar to Does Not Start With.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionEditorConditionLabel">
            <summary>
              Looks up a localized string similar to Condition:.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionEditorPropertyLabel">
            <summary>
              Looks up a localized string similar to Property:.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionEditorReferenceValueLabel">
            <summary>
              Looks up a localized string similar to Reference Value:.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionEqualToText">
            <summary>
              Looks up a localized string similar to Equal To.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionGreaterEqualText">
            <summary>
              Looks up a localized string similar to Greater Than or Equal To.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionGreaterText">
            <summary>
              Looks up a localized string similar to Greater Than.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionInRangeText">
            <summary>
              Looks up a localized string similar to In Range.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionInverseRegexMatch">
            <summary>
              Looks up a localized string similar to Inverse Regular Expression Matches.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionIsNotText">
            <summary>
              Looks up a localized string similar to Is Not.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionIsText">
            <summary>
              Looks up a localized string similar to Is.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionLessEqualText">
            <summary>
              Looks up a localized string similar to Less Than or Equal To.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionLessText">
            <summary>
              Looks up a localized string similar to Less Than.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionListConditionCaption">
            <summary>
              Looks up a localized string similar to Condition.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionListPropertyCaption">
            <summary>
              Looks up a localized string similar to Property.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionListReferenceValueCaption">
            <summary>
              Looks up a localized string similar to Reference Value.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionMatchesText">
            <summary>
              Looks up a localized string similar to Matches.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionNotEqualText">
            <summary>
              Looks up a localized string similar to Not Equal To.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionRegexMatch">
            <summary>
              Looks up a localized string similar to Regular Expression Matches.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConditionStartsWithText">
            <summary>
              Looks up a localized string similar to Starts With.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConfigureAdvancedFilterText">
            <summary>
              Looks up a localized string similar to Configure Advanced Filter.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ConfigureLayoutToolStripMenu">
            <summary>
              Looks up a localized string similar to Layout.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ContainerMenusCommandName">
            <summary>
              Looks up a localized string similar to Containers.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.BooleanExplorerDialogTitleBase">
            <summary>
              Looks up a localized string similar to Boolean Explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CreaseExplorerDialogTitleBase">
            <summary>
              Looks up a localized string similar to Crease Explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CreateContainerFromSelectionButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CreateContainerFromSelectionButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CreateContainerFromSelectionText">
            <summary>
              Looks up a localized string similar to Create Container from Selection.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CreateLayersToolTip">
            <summary>
              Looks up a localized string similar to Create New Layer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.CustomizeToolStripMenuItem">
            <summary>
              Looks up a localized string similar to Customize.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DeleteButtonText">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DeleteInstanceFormTitle">
            <summary>
              Looks up a localized string similar to Delete Scene Explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisableKinematicText">
            <summary>
              Looks up a localized string similar to Exclude from Simulation.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayAllIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayAllIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayAllText">
            <summary>
              Looks up a localized string similar to Display All.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayBoneTypeText">
            <summary>
              Looks up a localized string similar to Display Bones.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayByCategoryMenuItem">
            <summary>
              Looks up a localized string similar to Display By Category.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayCameraTypeText">
            <summary>
              Looks up a localized string similar to Display Cameras.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayContainerTypeText">
            <summary>
              Looks up a localized string similar to Display Containers.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayDependantsText">
            <summary>
              Looks up a localized string similar to Display Dependents.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayEdgeCreaseSetsText">
            <summary>
              Looks up a localized string similar to Display Edge Crease Sets.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayFrozenTypeText">
            <summary>
              Looks up a localized string similar to Display Frozen Objects.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayGeometryTypeText">
            <summary>
              Looks up a localized string similar to Display Geometry.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayGroupTypeText">
            <summary>
              Looks up a localized string similar to Display Groups.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayHelperTypeText">
            <summary>
              Looks up a localized string similar to Display Helpers.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayHiddenTypeText">
            <summary>
              Looks up a localized string similar to Display Hidden Objects.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayInfluencesText">
            <summary>
              Looks up a localized string similar to Display Influences.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayInvertIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayInvertIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayInvertText">
            <summary>
              Looks up a localized string similar to Invert Display.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayLightTypeText">
            <summary>
              Looks up a localized string similar to Display Lights.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayMenuItem">
            <summary>
              Looks up a localized string similar to Display.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayMenusCommandName">
            <summary>
              Looks up a localized string similar to Display Menus.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayMissingPlugInText">
            <summary>
              Looks up a localized string similar to Display Missing Plugin Objects Only.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayNonDynamicsTypeText">
            <summary>
              Looks up a localized string similar to Display non-Dynamics Objects.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayNoneIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayNoneIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayNoneText">
            <summary>
              Looks up a localized string similar to Display None.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayObjectNodeText">
            <summary>
              Looks up a localized string similar to Display Objects.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayObjectTypesText">
            <summary>
              Looks up a localized string similar to Object Types.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayShapeTypeText">
            <summary>
              Looks up a localized string similar to Display Shapes.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplaySpaceWarpTypeText">
            <summary>
              Looks up a localized string similar to Display Space Warps.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplaySubMenuName">
            <summary>
              Looks up a localized string similar to Display Filters.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayText">
            <summary>
              Looks up a localized string similar to Display.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayThumbnailsText">
            <summary>
              Looks up a localized string similar to Display Thumbnails.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayThumbnailsToolTip">
            <summary>
              Looks up a localized string similar to Display Thumbnails.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayToolbarLabelText">
            <summary>
              Looks up a localized string similar to Display:.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayToolbarsText">
            <summary>
              Looks up a localized string similar to Display Toolbars.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayToolbarTitle">
            <summary>
              Looks up a localized string similar to Display: {0}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayVertexCreaseSetsText">
            <summary>
              Looks up a localized string similar to Display Vertex Crease Sets.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DisplayXrefTypeText">
            <summary>
              Looks up a localized string similar to Display Object XRefs.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DynamicsBakeText">
            <summary>
              Looks up a localized string similar to Bake.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DynamicsMenuName">
            <summary>
              Looks up a localized string similar to Dynamics.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DynamicsToggleFilterText">
            <summary>
              Looks up a localized string similar to Display non-Dynamics Objects.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.DynamicsUnbakeText">
            <summary>
              Looks up a localized string similar to Unbake.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.EditContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.EditContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.EditContainerText">
            <summary>
              Looks up a localized string similar to Edit Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.EditMenuItemText">
            <summary>
              Looks up a localized string similar to Edit.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.EnableAdvancedFilterMenuItemText">
            <summary>
              Looks up a localized string similar to Enable Advanced Filter.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.EnableKinematicText">
            <summary>
              Looks up a localized string similar to Include in Simulation.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ExpandAllCommandText">
            <summary>
              Looks up a localized string similar to Expand All.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ExpandObjectsNodeCommandName">
            <summary>
              Looks up a localized string similar to Expand Objects.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ExpandSelectedCommandText">
            <summary>
              Looks up a localized string similar to Expand Selected.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ExpandTopmostMaterialNodeCommandName">
            <summary>
              Looks up a localized string similar to Expand Materials.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ExplorerFindLabelText">
            <summary>
              Looks up a localized string similar to Find:.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ExtendedColorEditorDefaultTitle">
            <summary>
              Looks up a localized string similar to Color.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FalseText">
            <summary>
              Looks up a localized string similar to False.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FilterSelectionSetText">
            <summary>
              Looks up a localized string similar to Filter Selection Set.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FilterSoloText">
            <summary>
              Looks up a localized string similar to  (Alt-click to solo).
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FindCaseSensitiveText">
            <summary>
              Looks up a localized string similar to Find Case Sensitive.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FindLabelText">
            <summary>
              Looks up a localized string similar to Find:.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FindToolbarTitle">
            <summary>
              Looks up a localized string similar to Find: {0}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FindUsingRegexText">
            <summary>
              Looks up a localized string similar to Find Using Regular Expressions.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FindUsingWildcardsText">
            <summary>
              Looks up a localized string similar to Find Using Wildcards.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FromText">
            <summary>
              Looks up a localized string similar to From:.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FrozenIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FrozenIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.GroupByHierarchyIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.GroupByHierarchyIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.GroupByHierarchyText">
            <summary>
              Looks up a localized string similar to Sort By Hierarchy.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.GroupByLayerIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.GroupByLayerIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.GroupByLayerText">
            <summary>
              Looks up a localized string similar to Sort By Layer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.GroupsSubMenuName">
            <summary>
              Looks up a localized string similar to Groups.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.HiddenIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.HiddenIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.HideFiltersToolTip">
            <summary>
              Looks up a localized string similar to Toggle Display Toolbar.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.HideToolbarText">
            <summary>
              Looks up a localized string similar to Hide Toolbar.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.HorizontalToolStripLayout">
            <summary>
              Looks up a localized string similar to Horizontal.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.InheritContainerIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.InheritContainerIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.InheritContainerText">
            <summary>
              Looks up a localized string similar to Inherit Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.InheritedContentMenuName">
            <summary>
              Looks up a localized string similar to Inherited Content.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.InvertSelectionCommand">
            <summary>
              Looks up a localized string similar to Select Invert.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.InvertText">
            <summary>
              Looks up a localized string similar to Invert.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LaunchColumnChooserCommandName">
            <summary>
              Looks up a localized string similar to Configure Columns.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LayerActive_SceneXrefDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LayerActive_SceneXrefLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LayerActiveIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LayerActiveIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LayerInactive_SceneXrefDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LayerInactive_SceneXrefLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LayerInactiveIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LayerInactiveIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LoadButtonText">
            <summary>
              Looks up a localized string similar to Load.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LoadContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LoadContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LoadContainerText">
            <summary>
              Looks up a localized string similar to Load Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LocalContentMenuName">
            <summary>
              Looks up a localized string similar to Local Content.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LockIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LockIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LockToolbarsCommandName">
            <summary>
              Looks up a localized string similar to Lock Toolbars.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.LockToolTip">
            <summary>
              Looks up a localized string similar to Lock cell editing.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MakeSelectedLayerActiveToolTip">
            <summary>
              Looks up a localized string similar to Make Selected Layer Active.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MakeUniqueContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MakeUniqueContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MakeUniqueContainerText">
            <summary>
              Looks up a localized string similar to Make Unique.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MakeUniqueContainerTooltip">
            <summary>
              Looks up a localized string similar to Make All Content Unique:  First Select Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ManageInstanceFormTitle">
            <summary>
              Looks up a localized string similar to Manage Local Scene Explorers.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MatchAllText">
            <summary>
              Looks up a localized string similar to Match All.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MatchAnyText">
            <summary>
              Looks up a localized string similar to Match Any.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MaterialBrowserTitle">
            <summary>
              Looks up a localized string similar to Material/Map Browser.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MaterialExplorerDialogTitleBase">
            <summary>
              Looks up a localized string similar to Material Explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MaterialLibraryMenuItem">
            <summary>
              Looks up a localized string similar to Material Library.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MaxCustomControlResources_en_US">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;root&gt;
              &lt;!-- 
                Microsoft ResX Schema 
                
                Version 2.0
                
                The primary goals of this format is to allow a simple XML format 
                that is mostly human readable. The generation and parsing of the 
                various data types are done through the TypeConverter classes 
                associated with the data types.
                
                Example:
                
                ... ado.net/XML headers &amp; schema ...
                &lt;resheader name=&quot;resmimetype&quot;&gt;text/microsoft-resx&lt;/resheader&gt;
                &lt;resheader n [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MenuSearchText">
            <summary>
              Looks up a localized string similar to Search....
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MergeLastContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MergeLastContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MergeLastContainerText">
            <summary>
              Looks up a localized string similar to Merge Last.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MergeLastContainerTooltip">
            <summary>
              Looks up a localized string similar to Merge Container Source.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MissingPlugInIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MissingPlugInIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ModalSceneExplorerTitle">
            <summary>
              Looks up a localized string similar to Select From Scene.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.NonDynamicsObjectsFilterIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.NonDynamicsObjectsFilterIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.NoneText">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ObjectTypeMenuItemText">
            <summary>
              Looks up a localized string similar to Object Types.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ObjectTypesMenuText">
            <summary>
              Looks up a localized string similar to Object Types.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.OkButtonText">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.OpenContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.OpenContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.OpenContainerText">
            <summary>
              Looks up a localized string similar to Open Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.OptionsMenuItem">
            <summary>
              Looks up a localized string similar to Option.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.PickParentToolTip">
            <summary>
              Looks up a localized string similar to Pick Parent.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ProgressDialogTitle">
            <summary>
              Looks up a localized string similar to Please wait....
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.QuickSwitchMenuItemText">
            <summary>
              Looks up a localized string similar to Replace Column.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RCMOptimizeAll">
            <summary>
              Looks up a localized string similar to Minimize All Widths.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ReferenceColorValueFormat">
            <summary>
              Looks up a localized string similar to ({0}, {1}, {2}), Tolerance: {3}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ReferenceFromToFormat">
            <summary>
              Looks up a localized string similar to From: {0}, To: {1}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RefreshButtonText">
            <summary>
              Looks up a localized string similar to Refresh.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RefreshButtonToolTip">
            <summary>
              Looks up a localized string similar to Refreshes the contents of the current window..
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ReloadContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ReloadContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ReloadContainerText">
            <summary>
              Looks up a localized string similar to Reload Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ReloadContainerTooltip">
            <summary>
              Looks up a localized string similar to Reload Container: Reloads Last Save.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RemoveButtonText">
            <summary>
              Looks up a localized string similar to Remove.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RemoveFromContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RemoveFromContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RemoveFromContainerText">
            <summary>
              Looks up a localized string similar to Remove Selected from Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RemoveFromSimIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RemoveFromSimIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RenameButtonText">
            <summary>
              Looks up a localized string similar to Rename.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RenameDialogTitle">
            <summary>
              Looks up a localized string similar to Rename Scene Explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ResortText">
            <summary>
              Looks up a localized string similar to Resort.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.RunningCommandMessageText">
            <summary>
              Looks up a localized string similar to Running {0}.  Please wait....
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SaveButtonText">
            <summary>
              Looks up a localized string similar to Save.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SaveContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SaveContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SaveContainerText">
            <summary>
              Looks up a localized string similar to Save Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SceneBooleanExplorerToolsMenuItem">
            <summary>
              Looks up a localized string similar to Tools.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SceneCreaseExplorerToolsMenuItem">
            <summary>
              Looks up a localized string similar to Tools.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SceneCreaseSelectByCreaseMenuItem">
            <summary>
              Looks up a localized string similar to Select by Crease.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SceneExplorerDialogTitle">
            <summary>
              Looks up a localized string similar to Scene Explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SceneExplorerDialogTitleBase">
            <summary>
              Looks up a localized string similar to Scene Explorer - {0}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SceneMaterialExplorerDisplayThumbnailIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SceneMaterialExplorerDisplayThumbnailIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SceneMaterialExplorerToolsMenuItem">
            <summary>
              Looks up a localized string similar to Tools.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SceneXref_NodeDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SceneXref_NodeLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SearchClearIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SearchClearIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SearchClearToolTip">
            <summary>
              Looks up a localized string similar to Remove Filter.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllCommand">
            <summary>
              Looks up a localized string similar to Select All.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllCreasesCommand">
            <summary>
              Looks up a localized string similar to Select All Crease Sets.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllCreasesIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllCreasesIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllMapsIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllMapsIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllMaterialsCommand">
            <summary>
              Looks up a localized string similar to Select All Materials.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllMaterialsIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllMaterialsIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectAllTexmapsCommand">
            <summary>
              Looks up a localized string similar to Select All Maps.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectButtonText">
            <summary>
              Looks up a localized string similar to Select.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectChildrenCommand">
            <summary>
              Looks up a localized string similar to Select Children.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectChildrenToolTip">
            <summary>
              Looks up a localized string similar to Select Children.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectDependantsCommand">
            <summary>
              Looks up a localized string similar to Select Dependents.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectedMaterialExplorerDisplayThumbnailIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectedMaterialExplorerDisplayThumbnailIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectedMaterialExplorerToolsMenuItem">
            <summary>
              Looks up a localized string similar to Tools.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectInfluencesCommand">
            <summary>
              Looks up a localized string similar to Select Influences.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectInvertIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectInvertIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectionSetFilterIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectionSetFilterIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectionSetLabelText">
            <summary>
              Looks up a localized string similar to Selection Set:.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectionSubMenuName">
            <summary>
              Looks up a localized string similar to Selection.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectionToolbarTitle">
            <summary>
              Looks up a localized string similar to Selection: {0}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectMenuItem">
            <summary>
              Looks up a localized string similar to Select.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectNoneCommand">
            <summary>
              Looks up a localized string similar to Select None.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectNoneIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SelectNoneIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SetAsDynamicIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SetAsDynamicIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SetAsKinematicIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SetAsKinematicIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SetAsStaticIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SetAsStaticIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SetModeDynamicText">
            <summary>
              Looks up a localized string similar to Set Dynamics Mode to Dynamic.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SetModeKinematicText">
            <summary>
              Looks up a localized string similar to Set Dynamics Mode to Kinematic.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SetModeStaticText">
            <summary>
              Looks up a localized string similar to Set Dynamics Mode to Static.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SetObjectStateMenuName">
            <summary>
              Looks up a localized string similar to Simulation Mode.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowContainerToolbarToolStripMenuItem">
            <summary>
              Looks up a localized string similar to Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowCreasesText">
            <summary>
              Looks up a localized string similar to Display Crease Sets.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowDefaultCategoryNodeIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowDefaultCategoryNodeIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowDefaultCategoryNodeText">
            <summary>
              Looks up a localized string similar to Show Default Category Nodes.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowDisplayToolbarToolStripMenuItem">
            <summary>
              Looks up a localized string similar to Display.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowDynamicsToolbarToolStripMenuItem">
            <summary>
              Looks up a localized string similar to Dynamics.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowEdgeCreasesIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowEdgeCreasesIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowEdgeCreasesText">
            <summary>
              Looks up a localized string similar to Show Edge Creases.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowFindToolbarToolStripMenuItem">
            <summary>
              Looks up a localized string similar to Find.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowHierarchyText">
            <summary>
              Looks up a localized string similar to Display Children.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowHierarchyToolTip">
            <summary>
              Looks up a localized string similar to Show child hierarchy.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowIncompatibleMaterials">
            <summary>
              Looks up a localized string similar to Show Incompatible Material/Maps.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowIncompatibleMaterialsIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowIncompatibleMaterialsIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowMaterialsIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowMaterialsIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowMaterialsText">
            <summary>
              Looks up a localized string similar to Display Materials.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowNameEditorCommandText">
            <summary>
              Looks up a localized string similar to Rename.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowSelectionToolbarToolStripMenuItem">
            <summary>
              Looks up a localized string similar to Selection.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowSubMaterialsAndMapsIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowSubMaterialsAndMapsIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowSubMaterialsAndMapsText">
            <summary>
              Looks up a localized string similar to Display Sub-Materials/Maps.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowTexmapsIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowTexmapsIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowTexmapsText">
            <summary>
              Looks up a localized string similar to Display Maps.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowToolsToolbarToolStripMenuItem">
            <summary>
              Looks up a localized string similar to Tools.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowUnusedChannelIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowUnusedChannelIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowUnusedChannelText">
            <summary>
              Looks up a localized string similar to Display Unused Map Channels.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowVertexCreasesIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowVertexCreasesIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowVertexCreasesText">
            <summary>
              Looks up a localized string similar to Show Vertex Creases.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ShowViewSelectorToolbarToolStripMenuItem">
            <summary>
              Looks up a localized string similar to View.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortAscendingAgeText">
            <summary>
              Looks up a localized string similar to Sort Ascending Age.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortAscendingNameText">
            <summary>
              Looks up a localized string similar to Sort Ascending.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortByCreaseIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortByCreaseIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortByCreaseText">
            <summary>
              Looks up a localized string similar to Sort by Crease.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortByMaterialIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortByMaterialIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortByMaterialText">
            <summary>
              Looks up a localized string similar to Sort By Material.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortByObjectIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortByObjectIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortByObjectText">
            <summary>
              Looks up a localized string similar to Sort By Object.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortDescendingAgeText">
            <summary>
              Looks up a localized string similar to Sort Descending Age.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortDescendingNameText">
            <summary>
              Looks up a localized string similar to Sort Descending.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortedAscendingAgeText">
            <summary>
              Looks up a localized string similar to Name (Sorted Ascending Age).
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortedAscendingNameText">
            <summary>
              Looks up a localized string similar to Name (Sorted Ascending).
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortedDescendingAgeText">
            <summary>
              Looks up a localized string similar to Name (Sorted Descending Age).
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SortedDescendingNameText">
            <summary>
              Looks up a localized string similar to Name (Sorted Descending).
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SyncNavigatorToMaterialLevelIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SyncNavigatorToMaterialLevelIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SyncSelectIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SyncSelectIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SyncSelectionDisabledTooltipText">
            <summary>
              Looks up a localized string similar to Sync Selection is disabled due to Selection Lock.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SyncSelectionMenuText">
            <summary>
              Looks up a localized string similar to Sync Selection.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SyncToMaterialExplorerText">
            <summary>
              Looks up a localized string similar to Sync To Material Explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.SyncToMaterialLevelText">
            <summary>
              Looks up a localized string similar to Sync To Material Level.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ThumbnailIconLargeMenuItem">
            <summary>
              Looks up a localized string similar to Large.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ThumbnailIconSmallMenuItem">
            <summary>
              Looks up a localized string similar to Medium.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ThumbnailIconTypeMenuItem">
            <summary>
              Looks up a localized string similar to Thumbnail.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ThumbnailSizeMenuItem">
            <summary>
              Looks up a localized string similar to Thumbnail Size.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ToggleDisplayObjectsIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ToggleDisplayObjectsIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ToggleDisplayThumbnailCommand">
            <summary>
              Looks up a localized string similar to Display Thumbnails.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ToggleLockEditingCommand">
            <summary>
              Looks up a localized string similar to Lock Cell Editing.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ToggleSyncToMaterialExplorerIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ToggleSyncToMaterialExplorerIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.TolerenceText">
            <summary>
              Looks up a localized string similar to Tolerance:.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ToogleSelectChildrenCommand">
            <summary>
              Looks up a localized string similar to Select Children.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ToolbarsToolStripMenuItem">
            <summary>
              Looks up a localized string similar to Toolbars.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ToolsToolbarTitle">
            <summary>
              Looks up a localized string similar to Tools: {0}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ToText">
            <summary>
              Looks up a localized string similar to To:.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.TrueText">
            <summary>
              Looks up a localized string similar to True.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UnbakeIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UnbakeIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UnknownIconDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UnknownIconLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UnloadContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UnloadContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UnloadContainerText">
            <summary>
              Looks up a localized string similar to Unload Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UpdateButtonText">
            <summary>
              Looks up a localized string similar to Live Update.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UpdateButtonToolTip">
            <summary>
              Looks up a localized string similar to Activate to have this window update itself automatically..
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UpdateContainerButtonDark">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UpdateContainerButtonLight">
            <summary>
              Looks up a localized resource of type CSharpUtilities.MultiIcon.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.UpdateContainerText">
            <summary>
              Looks up a localized string similar to Update Container.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ValueOutOfRange">
            <summary>
              Looks up a localized string similar to Value cannot be represented.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.VerticalToolStripLayout">
            <summary>
              Looks up a localized string similar to Vertical.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ViewLabelText">
            <summary>
              Looks up a localized string similar to View:.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.ViewSelectorToolbarTitle">
            <summary>
              Looks up a localized string similar to View Selector: {0}.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.MaxHiddenCheckEditCaption">
            <summary>
              Looks up a localized string similar to Visible.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.HideAllLayersTooltip">
            <summary>
              Looks up a localized string similar to Hide all Layers.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxCustomControlResources.FreezeAllLayersTooltip">
            <summary>
              Looks up a localized string similar to Freeze all Layers.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxListBox">
            <summary>
            The application specific implementation of ListBox.
            </summary>
            <remarks>
            Application specific derivation of ListBox which should be used when
            designing managed UI for this application.  Overrides certain behaviour
            that does not work well within the context of the application.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxListBox.UpdateColors">
            <summary>
            Updates the form's colors according to the current CUI settings.
            </summary>
            <remarks>
            Implementation of CuiUpdatable interface.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxListBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override for ListBox version of this method.  Performs custom key handling.
            </summary>
            <param name="m"> The message being sent to the WndProc.</param>
        </member>
        <member name="T:MaxCustomControls.MaxTextBox">
            <summary>
            Specializes TextBox to native key handling on the Max platform.
            </summary>
            <remarks>
            Application specific derivation of TextBox which should be used when
            designing managed UI for this application.  Overrides certain behaviour
            that does not work well within the context of the application.
            </remarks>
        </member>
        <member name="E:MaxCustomControls.MaxTextBox.AcceptedNative">
            <summary>
            Occurs as a result of an Enter key being struck while this
            text box is in focus.
            </summary>
            <remarks>
            This is required due to a bug in the .NET layer relating 
            to hosting Managed controls in an unmanaged application.
            </remarks>
        </member>
        <member name="E:MaxCustomControls.MaxTextBox.CanceledNative">
            <summary>
            Occurs as a result of an Escape key being struck while this
            text box is in focus.
            </summary>
            <remarks>
            This is required due to a bug in the .NET layer relating 
            to hosting Managed controls in an unmanaged application.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTextBox.OnAcceptedNative(System.EventArgs)">
            <summary>
            Raises the AcceptedNative event.
            </summary>
            <param name="e">Usually EventArgs.Empty</param>
        </member>
        <member name="M:MaxCustomControls.MaxTextBox.OnCanceledNative(System.EventArgs)">
            <summary>
            Raises the CanceledNative event.
            </summary>
            <param name="e">Usually EventArgs.Empty</param>
        </member>
        <member name="M:MaxCustomControls.MaxTextBox.RequestAcceptNative">
            <summary>
            Raises the AcceptedNative event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTextBox.RequestCancelNative">
            <summary>
            Raises the CanceledNative event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides the standard TextBox WndProc method to intercept the 
            Enter and Escape keys and generate the corresponding "Native" events.
            </summary>
            <param name="m">The message being processed by the proc.</param>
        </member>
        <member name="F:MaxCustomControls.FileBrowseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.FileBrowseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.FileBrowseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MaxCustomControls.FileBrowseControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.FileBrowseControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.FileBrowseControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxForm">
            <summary>
            This class is an augmented Form designed for use with the Max platform.
            </summary>
            <remarks>
            Clients planning on implementing managed dialogs in the application should
            make use of and derive from MaxForm instead of from Form directly.  This class
            is aware of certain application-specific behaviour, such as Custom User Interface (CUI)
            changes, and supplies a mechanism for doing modeless dialogs that doesn't interfere
            with the application's hotkey system.  In fact, the standard Form
            may not even receive any keyboard input when launched on top of the native
            application.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxForm.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxForm.InitializeMainIcon">
            <summary>
            Sets the main form icon based on the application icon.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxForm.UnbindFromMaxCui(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            Traverses the sub-controls of this MaxForm and automatically unbinds
            any that implement the CuiUpdatable interface from the application
            CUI system.
            </summary>
            <param name="sender">The object that generated the event this method handles.</param>
            <param name="e"> The args for this event.</param>
        </member>
        <member name="M:MaxCustomControls.MaxForm.BindToMaxCui(System.Object,System.EventArgs)">
            <summary>
            Traverses the sub-controls of this MaxForm and automatically binds
            any that implement the CuiUpdatable interface to the application
            CUI system.
            </summary>
            <param name="sender">The object that generated the event this method handles.</param>
            <param name="e"> The args for this event.</param>
        </member>
        <member name="M:MaxCustomControls.MaxForm.GetMaxHookInterfaces">
            <summary>
            Traverses sub-controls and accumulates all controls that implement the
            CuiUpdatable interface.
            </summary>
            <returns> A list of CuiUpdatable objects.</returns>
        </member>
        <member name="M:MaxCustomControls.MaxForm.GetAllControls(System.Windows.Forms.Control)">
            <summary>
            Returns all controls on the form and their descendants, including the form itself.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:MaxCustomControls.MaxForm.UpdateColors">
            <summary>
            Updates the form's colors according to the current CUI settings.
            </summary>
            <remarks>
            Implementation of CuiUpdatable interface.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxForm.ShowModeless">
            <summary>
            Displays this form modelessly sets the main application's window as 
            the parent.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxForm.ShowModal">
            <summary>
            Displays this form as a modal dialog and
            sets the main application's window as the parent. 
            </summary>
            <returns> The result of this modal interaction.  The 
            return value is the same as Form.ShowDialog(IWin32Window)
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxForm.ShowModal(System.Windows.Forms.Form)">
            <summary>
            Displays this form as a modal dialog and
            sets the passed in Form as the parent.
            </summary>
            <param name="aForm">A form to be used as a parent of this modal Form</param>
            <returns>
            The result of this modal interaction.  The 
            return value is the same as Form.ShowDialog(Form)
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxForm.SaveState">
            <summary>
            Save the states of MaxForm such as form size.
            </summary>
            <returns>
            A CustomizationState object containing MaxForm's states.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxForm.LoadState(MaxCustomControls.ICustomizationState)">
            <summary>
            Load the form states such as size from the "stateToLoad" object.
            </summary>
            <param name="stateToLoad">
            The object which contains the states of the form.
            </param>
            <returns>Return true if load successfully, false otherwise</returns>
        </member>
        <member name="M:MaxCustomControls.MaxForm.CreateState">
            <summary>
            A factory method for creating the state object that represents this form.
            Clients deriving from this class should override this method and return
            their own derived State object.
            </summary>
            <returns>An empty State object that is used to persist and serialize
            the state of this object.</returns>
        </member>
        <member name="M:MaxCustomControls.MaxForm.HandleDeactivate(System.Object,System.EventArgs)">
            <summary>
            Enables application accelerators when the 
            form is deactivated.
            </summary>
            <param name="sender">The object that generated the event this method handles.</param>
            <param name="e">The args for this event. EventArgs.Empty by default.</param>
        </member>
        <member name="M:MaxCustomControls.MaxForm.HandleActivate(System.Object,System.EventArgs)">
            <summary>
            Disables application accelerators when the 
            form is activated. Note that this is not called when Frame is active.
            </summary>
            <param name="sender">The object that generated the event this method handles.</param>
            <param name="e">The args for this event. EventArgs.Empty by default.</param>
        </member>
        <member name="M:MaxCustomControls.MaxForm.FormClosedHandler(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            Handles the Closed event.  
            </summary>
            <param name="sender">The object that generated the event this method handles.</param>
            <param name="e">The args for this event. EventArgs.Empty by default.</param>
        </member>
        <member name="M:MaxCustomControls.MaxForm.ShowInFrame">
            <summary>
            Adds a docking frame to the MAXForm that allows it to be docked to the left or to the right. 
            This changes a lot of the standard behavior of Windows forms so use with caution.
            For example activate events are no longer triggered which in turn means that accelerators are no longer 
            disabled when the form is activated. 
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxForm.RemoveFrame">
            <summary>
            Removes the docking Frame around the MAXForm. The form styles will be restored and it will be parented to the 3ds Max main
            window, regardless of what it was parented to before. 
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxForm.SetFloatingPosition(System.Drawing.Point)">
            <summary>
            Sets the position of the docking frame in screen coordinates.
            If the docking frame is docked, it will be set to 'floating' first.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxForm.GetFloatingPosition">
            <summary>
            Returns the position of the floating docking frame in screen coordinates.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxForm.SetFloatingSize(System.Drawing.Size)">
            <summary>
            Sets the size of the docking frame.
            This has only an effect when the docking frame is floating.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxForm.GetFloatingSize">
            <summary>
            Returns the size of the floating docking frame.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxForm.Frame">
            <summary>
            This returns the docking frame object wrapping the form, or null if there is no frame
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.MaxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxTreeList">
            <exclude/>
            <summary>
            Derived version of the DevExpress TreeList control to customize some 
            behaviour for Max's purposes.  
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.#cctor">
            <exclude/>
            <summary>
            Static constructor for this class - assigns our localization class.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.#ctor">
            <exclude/>
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxTreeList.ComputeBestWidthOperation">
            <summary>
            Based on DevExpress's TreeListOperationColumnBestWidth but optimized
            to avoid that operation's n-squared time complexity.
            </summary>
            <remarks>
            Note that this class implements the dispose pattern to release some 
            resources. It must be instantiated with the using pattern.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.EditingEnabled">
            <exclude/>
            <summary>
            Determines whether editing of properties is allowed
            on this treelist control.
            </summary>
        </member>
        <member name="E:MaxCustomControls.MaxTreeList.EditingEnabledChanged">
            <exclude/>
            <summary>
            Occurs when the EditingEnabled property value changes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.OnEditingEnabledChanged(CSharpUtilities.ValueChangedEventArgs{System.Boolean})">
            <exclude/>
            <summary>
            Raises the EditingEnabledChanged event.
            </summary>
            <param name="e"> An args object that contains the old and new parameters.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.DeactivateEditingEnabled">
            <exclude/>
            <summary>
            Deactivates editing on this control until ResetEditingEnabled is called.
            </summary>
            <remarks>
            Used to temporarily deactivate editing on the treelist.  Call ResetEditingEnabled() to
            reset editing to the last value of EditingEnabled.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.ResetEditingEnabled">
            <exclude/>
            <summary>
            Resets editing on this control to the policy setting set through the
            EditingEnabled property.
            </summary>
            <remarks>
            See DeactivateEditingEnabled().
            </remarks>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.DragAndDropEnabled">
            <exclude/>
            <summary>
            Determines if dragging and dropping TreeListNodes is enabled.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.InModalSceneExplorerDialog">
            <exclude/>
            <summary>
            Determines if displayed in a modal scene explorer dialog.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.DeactivateDragAndDrop">
            <exclude/>
            <summary>
            Temporarily turn off drag and drop in this tree list without affecting
            the actual policy.  
            </summary>
            <remarks>
            The behaviour as specified by the DragAndDropEnabled
            option can be reset later using ResetDragAndDrop.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.ResetDragAndDrop">
            <exclude/>
            <summary>
            Reset deactivated drag and drop behaviour to the policy as set through
            the DragAndDropEnabled option.
            </summary>
            <remarks>
            See DeactivateDragAndDrop().
            </remarks>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.ShowRoot">
            <exclude/>
            <summary>
            Determines whether the root node is displayed in the treelist.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.DeactivateShowRoot">
            <exclude/>
            <summary>
            Temporarily turn off tree root display in this tree list without affecting
            the actual policy.
            </summary>
            <remarks>
            The behaviour as specified by the ShowRoot option can be reset 
            later using ResetShowRoot.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.ResetShowRoot">
            <exclude/>
            <summary>
            Reset deactivated root node display to the policy as set through
            the ShowRoot option.
            </summary>
            <remarks>
            See DeactivateShowRoot().
            </remarks>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.EnableEnhancedSorting">
            <exclude/>
            <summary>
            Speeds up sorting by disabling so-called "enhanced sorting," which really
            just sorts by the node's index within the original list if all other sort
            columns come out equal.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mEditingEnabled">
            <exclude/>
            <summary>
            Storage for the EditingEnabled property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mDragAndDropEnabled">
            <exclude/>
            <summary>
            Storage for the DragAndDropEnabled property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mShowRoot">
            <exclude/>
            <summary>
            Storage for the ShowRoot property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mInModalSceneExplorerDialog">
            <exclude/>
            <summary>
            Whether displayed in a modal scene explorer dialog.
            </summary>
        </member>
        <member name="E:MaxCustomControls.MaxTreeList.DataSourceChanged">
            <exclude/>
            <summary>
            Occurs after the DataSource property is changed to a different value.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.UpdateDataSource(System.Boolean)">
            <exclude/>
            <summary>
            Overridden from TreeList to fire DataSourceChanged.
            </summary>
            <remarks>
            The base TreeList does not expose a DataSource changed event and the 
            DataSource property itself is not virtual.  This method is our first
            opportunity to hook into the DataSource changing pipeline to add the event.
            </remarks>
            <param name="updateContent">See TreeList.UpdateDataSource(bool)
            The parameter is passed to this base method.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.OnDataSourceChanged">
            <exclude/>
            <summary>
            Raises the DataSourceChanged event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.InvalidateData">
            <exclude/>
            <summary>
            Marks the DataDirty property and calls Invalidate on TreeList.
            </summary>
            <remarks>
            This will schedule a refresh of the data set.  The refresh will be 
            performed at the beginning of the next repaint.  Repaints
            occur after the application finishes its current processing job and
            control returns to the main message loop. In this way, multiple 
            refreshes can be batched together and performed all at once, when
            the application is no longer busy.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.UserSelectionChangedEnabled">
            <exclude/>
            <summary>
            Controls whether the UserSelectionChanged event will fire.  
            </summary>
            <remarks>
            The selection functions below automatically disable UserSelectionChanged
             when called.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.SetSelection(System.Collections.Generic.IEnumerable{DevExpress.XtraTreeList.Nodes.TreeListNode})">
            <exclude/>
            <summary>
            Sets the selection in this tree list to the passed in list of TreeListNodes.
            </summary>
            <remarks>
            Intended for programmatically changing the selection set, this method 
            differs from manipulating the Selection list directly on the base class by
            disabling the UserSelectionChanged event while changing the selection.
            </remarks>
            <param name="nodeList">An enumerable list of nodes to set as the selection.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.AddToSelection(System.Collections.Generic.IEnumerable{DevExpress.XtraTreeList.Nodes.TreeListNode})">
            <exclude/>
            <summary>
            Adds the passed in list of TreeListNodes to the selection in this tree list.
            </summary>
            <remarks>
            Intended for programmatically changing the selection set, this method 
            differs from manipulating the Selection list directly on the base class by
            disabling the UserSelectionChanged event while changing the selection.
            </remarks>
            <param name="nodeList">An enumerable list of nodes to add to the selection.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.AddToSelection(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <exclude/>
            <summary>
            Adds the passed in TreeListNode to the selection in this tree list.
            </summary>
            <remarks>
            Intended for programmatically changing the selection set, this method 
            differs from manipulating the Selection list directly on the base class by
            disabling the UserSelectionChanged event while changing the selection.
            </remarks>
            <param name="node">A node to add to the selection.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.RemoveFromSelection(System.Collections.Generic.IEnumerable{DevExpress.XtraTreeList.Nodes.TreeListNode})">
            <exclude/>
            <summary>
            Remove the passed in list of TreeListNodes from the selection in this tree list.
            </summary>
            <remarks>
            Intended for programmatically changing the selection set, this method 
            differs from manipulating the Selection list directly on the base class by
            disabling the UserSelectionChanged event while changing the selection.
            </remarks>
            <param name="nodeList">An enumerable list of nodes to remove from the selection.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.RemoveFromSelection(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <exclude/>
            <summary>
            Remove the passed in TreeListNode from the selection in this tree list.
            </summary>
            <remarks>
            Intended for programmatically changing the selection set, this method 
            differs from manipulating the Selection list directly on the base class by
            disabling the UserSelectionChanged event while changing the selection.
            </remarks>
            <param name="node">A node to remove from the selection.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.ClearSelection">
            <exclude/>
            <summary>
            Clears the selection set in this tree list.
            </summary>
            <remarks>
            Intended for programmatically changing the selection set, this method 
            differs from manipulating the Selection list directly on the base class by
            disabling the UserSelectionChanged event while changing the selection.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.InvertSelection">
            <exclude/>
            <summary>
            Inverts the current selection set.
            </summary>
            <remarks>
            If the selection set is currently empty, then all nodes are selected.
            If the selection set contains all nodes, then the selection is cleared.
            Otherwise, all nodes that are selected are removed from the selection set
            and vice-versa.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.RevealNodes(System.Collections.Generic.IEnumerable{DevExpress.XtraTreeList.Nodes.TreeListNode})">
            <exclude/>
            <summary>
            Make all nodes in the given list visible (their parents are expanded),
            scroll to show the topmost node, and set the focus to this topmost node.
            </summary>
            <param name="nodeList">
            A list of nodes to be revealed in the explorer.  Any node in this list will have its
            parent expanded so that it will become visible.
            </param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.CorrectFocusedNodeSelection(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            FocusedNodeChanged event handler to correct the base TreeList implementation.
            If the FocusedNode is set to null, and the TreeList is not in Multiselect or
            there is no previously selected node, the TreeList adds null to the set of 
            selected nodes.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="T:MaxCustomControls.MaxTreeList.FindTopmostNodeOperation">
            <exclude/>
            <summary>
            A TreeList operation for finding the topmost node (relative to the
            tree hierarchy) in a given list of nodes.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.FindTopmostNodeOperation.#ctor(System.Collections.Generic.IEnumerable{DevExpress.XtraTreeList.Nodes.TreeListNode})">
            <exclude/>
            <summary>
            Constructor.  Pass the list of nodes to search.
            </summary>
            <param name="searchList">The list of nodes to compare.</param>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.FindTopmostNodeOperation.Result">
            <exclude/>
            <summary>
            The result of operation.  Null, until this object is passed to the
            TreeList NodesIterator object in one of its Operation methods.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.FindTopmostNodeOperation.CanContinueIteration(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <exclude/>
            <summary>
            Overridden to determine whether the iteration of nodes should continue.
            </summary>
            <param name="node"> The next node to process.</param>
            <returns> true if the iteration should continue</returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.FindTopmostNodeOperation.Execute(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <exclude/>
            <summary>
            This is the method called on this Operation object with 
            every node in the TreeList.
            </summary>
            <remarks>
            This operation takes the input node and checks whether it can be found
            in the initial search-list, passed to the constructor of this operation.
            </remarks>
            <param name="node"> The next Node to "Execute"</param>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.FindTopmostNodeOperation.mResult">
            <exclude/>
            <summary>
            Encapsulation of the Result property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.FindTopmostNodeOperation.mSearchList">
            <exclude/>
            <summary>
            The search list passed to the constructor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxTreeList.TreeListAccumulateNodes">
            <exclude/>
            <summary>
            A TreeList operation that simply accumulates all nodes in the treelist.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.TreeListAccumulateNodes.Execute(DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <exclude/>
            <summary>
            The Execute method that simply takes each passed in node
            and adds it to this operation's node list.
            </summary>
            <param name="node">The next node to add to the list</param>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.TreeListAccumulateNodes.Nodes">
            <exclude/>
            <summary>
            The accumulated nodes.  This is an empty list non-null list before
            it is passed to the TreeList.NodesIterator object.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.TreeListAccumulateNodes.mNodeList">
            <exclude/>
            <summary>
            Encapsulation of the Nodes property.
            </summary>
        </member>
        <member name="E:MaxCustomControls.MaxTreeList.RoutedKeyEvent">
            <exclude/>
            <summary>
            An event used to signal that a key event is going to be bubbled
            up from this control.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.OnRoutedKeyEvent(CSharpUtilities.RoutedKeyEventArgs)">
            <exclude/>
            <summary>
            Raises the RoutedKeyEvent.
            </summary>
            <param name="e"> Args indicating the type of key event that is being routed.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.RaiseRoutedKeyEvent(System.Object,CSharpUtilities.RoutedKeyEventArgs.KeyEvent,System.Windows.Forms.KeyEventArgs)">
            <exclude/>
            <summary>
            Raises the RoutedKeyEvent.
            </summary>
            <param name="source">The original source of the event.</param>
            <param name="aEvent">The type of key event being raised.</param>
            <param name="e">The KeyEventArgs associated with that event.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.GetAllNodes">
            <exclude/>
            <summary>
            Gets all the nodes currently owned by the TreeList.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.UpdateColors">
            <exclude/>
            <summary>
            Updates colors of this control according to the current CUI settings.
            </summary>
            <remarks>
            This implements the CuiUpdatable interface.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.UpdateTreeListColor">
            <summary>
            Update several colors of the tree list when the explorer control is created
            or color setting in CUI dialog has been changed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.GetOddRowColor">
            <summary>
            Get the color of odd rows of the tree list.
            </summary>
            <returns>
            The color of the odd rows.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.GetEvenRowColor">
            <summary>
            Get the color of even rows of the tree list.
            </summary>
            <returns>
            The color of the even rows.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.GetLineColor">
            <summary>
            Get the color of the separator lines of the tree list.
            </summary>
            <returns>
            The color of the separator lines.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.GetBackgroundColor">
            <summary>
            Get the color of the background.
            </summary>
            <returns>
            The color of the background.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.CloseEditorOnEvent(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            A handler which will close the current cell editor given an event being raised.
            </summary>
            <param name="sender">The original source of the event.</param>
            <param name="e"> Not used.</param>
        </member>
        <member name="E:MaxCustomControls.MaxTreeList.UserSelectionChanged">
            <exclude/>
            <summary>
            Event notifying listeners that a selection change occurred due to a user
            action (as opposed to a programmatic selection change).
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.OnUserSelectionChanged(System.EventArgs)">
            <exclude/>
            <summary>
            Raises the UserSelectionChanged event.
            </summary>
            <param name="e"> Args to raise this event with.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.RaiseUserSelectionChanged(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            A handler which in turn raises the UserSelectionChanged event.
            </summary>
            <param name="sender">the source of the event being handled</param>
            <param name="e"> not used</param>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.DataDirty">
            <exclude/>
            <summary>
            A property which acts a dirty flag for the TreeList DataSource data.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.OnItemChanged(System.Int32)">
            <exclude/>
            <summary>
            Overrides TreeList.OnItemChanged method.
            </summary>
            <remarks>
            Though inappropriately named for our "OnBlah fires the Blah event" convention,
            OnItemChanged is where the base TreeList handles an ListChanged.Item event.
            We override it here to simply schedule a repaint and mark the data as dirty.
            The default action is to immediately reevaluate everything and re-sort.
            Reevaluation is now deferred to paint, which batches these updates and waits
            until control returns to the message pump.  We skip resorting altogether, 
            allowing the user to resort by clicking the column header.
            </remarks>
            <param name="index">not used</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
            <summary>
            OnPaint is overridden to handle any updating deferred earlier.  
            </summary>
            <remarks>
            When a subject signals that it is dirty, the MaxTreeList just makes a note of it,
            schedules a repaint, and defers updating until Max is no longer busy 
            and control returns to the main event loop.
            </remarks>
            <param name="e">the event args for this paint event</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.OnVisibleChanged(System.EventArgs)">
            <exclude/>
            <summary>
            Overrides the TreeList.OnVisibleChanged() method.
            </summary>
            <param name="e"> see TreeList.OnVisibleChanged(EventArgs)</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.CreateColumns">
            <exclude/>
            <summary>
            Overrides the base class method to substitute in our own collection class.
            </summary>
            <returns>
            A new MaxTreeListColumncollection linked to this TreeList.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.CreateViewInfo">
            <exclude/>
            <summary>
            Overrides the base class method to improve performance.
            </summary>
            <returns>
            A new MaxTreeListViewInfo linked to this TreeList.
            </returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <exclude/>
            <summary>
            Overrides the TreeList.OnMouseDown() method to store focus information
            before it is changed by the base class.
            </summary>
            <param name="e">see TreeList.OnMouseDown()</param>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.MaxTreeListHandler">
            <exclude/>
            <summary>
            An internal property to provide type-safe access to the main TreeList controller object.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.CreateMaxTreeListHandler">
            <exclude/>
            <summary>
            This function is the actuall creation function.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.CreateHandler">
            <exclude/>
            <summary>
            Overridden so that we can supply our own implementation of TreeListHandler.
            </summary>
            <returns>A MaxTreeListHandler object.</returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.HandleShowingEditor(System.Object,System.ComponentModel.CancelEventArgs)">
            <exclude/>
            <summary>
            A handler that is called when the ShowingEditor event is raised.  Checks to see
            if the Editor should be shown in the current circumstances.
            </summary>
            <param name="sender"> the source of the event</param>
            <param name="e"> Event args for the ShowingEditor event.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.IsTextAreaHit(DevExpress.XtraTreeList.TreeListHitInfo)">
            <exclude/>
            <summary>
            A method used to determine whether a mouse interaction intersects some
            kind of text area.  This kind of interaction is treated particularly in 
            many situations.
            </summary>
            <param name="hitInfo"> an object used as a reference to check for the hit</param>
            <returns> true if a Text area has been hit</returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.GetCellEditor(DevExpress.XtraTreeList.ViewInfo.CellInfo)">
            <exclude/>
            <summary>
            Given a cell info object, returns the given editor for that cell.
            </summary>
            <param name="cell">a cell info object for which the editor should be retrieved</param>
            <returns>The editor, if it exists, or null otherwise</returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.IsSecondClickOnCell(DevExpress.XtraTreeList.TreeListHitInfo)">
            <exclude/>
            <summary>
            A method that checks if a given cell has been clicked twice in a row, regardless
            of whether it was in the time span of a traditional double-click.
            </summary>
            <param name="hitInfo">the hit info used to compare clicks</param>
            <returns>true if the same cell has been clicked twice in a row </returns>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.HandleShownEditor(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            A handler that is called when ShownEditor is raised.  Attaches a
            mouse handler to a the new ActiveEditor and disables accelerators.
            </summary>
            <param name="sender"> the source of the event</param>
            <param name="e"> not used</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.HandleHiddenEditor(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            A handler that is called when HiddenEditor is raised.
            </summary>
            <param name="sender"> the source of the event</param>
            <param name="e"> not used</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.HandleEditorMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <exclude/>
            <summary>
            Called when the ActiveEditor.MouseMove event is raised.
            </summary>
            <param name="sender"> the source of the event</param>
            <param name="e"> mouse move args associated with this event</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.ResetSelectionForEmptyClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <exclude/>
            <summary>
            Handles MouseClick event.  Resets the selection if the click happens outside
            the bounds of any particular cell.
            </summary>
            <param name="sender">the source of the event</param>
            <param name="e">mouse event args associated with this event</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.HandleColumnAdded(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
            <exclude/>
            <summary>
            Handler for TreeListColumn.CollectionChanged event.
            Called when a column is added to the treelist. Modifying the DataSource property
            on the treelist will fire this event since the underlying data is changed.
            MaxTreeListColumns are instantiated by the system and not this code. Thus we don't have a chance
            to modify the parameters in the constructor. Thus this event handler must be treated as pseudo
            constructor for MaxTreeListColumn controls.
            </summary>
            <param name="sender">the source of the event</param>
            <param name="e">event args for this event</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.CheckForIconizedColumns(DevExpress.XtraTreeList.Columns.TreeListColumn)">
            <summary>
            Instead of displaying a normal check-box for a column check-box, we will
            display a custom icon set. This function checks whether to apply a custom 
            Check Box Repository item to the column for that purpose.
            </summary>
            <param name="column">The newly instantiated column</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.CreateEnumComboEdit(DevExpress.XtraTreeList.Columns.TreeListColumn)">
            <exclude/>
            <summary>
            Creates a combo box editor based on the type of the passed in column.
            </summary>
            <param name="column">The column who's type needs and editor.  The type
            must be a subclass of ExtendedEnumBase.
            </param>
            <returns>A combo editor for the given custom enum type.</returns>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.ContextMenuStrip">
            <exclude/>
            <summary>
            Override for Control.ContextMenuStrip.  Attaches a custom handler to new ContextMenuStrips.
            </summary>
        </member>
        <member name="E:MaxCustomControls.MaxTreeList.ContextMenuOpening">
            <summary>
            This event is fired when the context menu is opening
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.OnContextMenuOpening(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raise the ContextMenuOpening event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.HandleContextMenuOpening(System.Object,System.ComponentModel.CancelEventArgs)">
            <exclude/>
            <summary>
            Handler for when the context menu is opened.
            </summary>
            <param name="sender">source of the event</param>
            <param name="e"> args for the opening of this menu - can be used to cancel this event</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.StartPanning(System.Object,System.Windows.Forms.MouseEventArgs)">
            <exclude/>
            <summary>
            A MouseDown handler which is responsible for implementing the mouse panning functionality
            which is common in max.
            </summary>
            <param name="sender"> source of the event</param>
            <param name="e"> The mouse event args for this event.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.OnPanning(System.Object,System.Windows.Forms.MouseEventArgs)">
            <exclude/>
            <summary>
            Handler for MouseMove event.  Implements panning.
            </summary>
            <remarks>
            See StartPanning().
            </remarks>
            <param name="sender"> source of the event</param>
            <param name="e"> The mouse event args for this event.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.EndPanning(System.Object,System.Windows.Forms.MouseEventArgs)">
            <exclude/>
            <summary>
            Handler for MouseUp event - ends the panning interaction, if it is currently
            beign processed.
            </summary>
            <remarks>
            See StartPanning().
            </remarks>
            <param name="sender"> source of the event</param>
            <param name="e"> The mouse event args for this event.</param>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.SelectChildren">
            <exclude/>
            <summary>
            Determines whether a selection will also select a node's children in the treelist.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.SelectChildrenNoParent">
            <exclude/>
            <summary>
            Determines whether a selection will also select a node's children in the treelist.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.SelectChildrenOnSelection(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            The handler which listens to selection changes and extends the selection to 
            all child nodes of that selection.
            </summary>
            <param name="sender">sender of the event </param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.AccumulateNodesForSelection(DevExpress.XtraTreeList.Nodes.TreeListNode,System.Collections.Generic.List{DevExpress.XtraTreeList.Nodes.TreeListNode})">
            <exclude/>
            <summary>
            Internal recursive method for accumulating a list of nodes that need 
            to be selected.
            </summary>
            <param name="parent"> the root node for which all children should be selected</param>
            <param name="nodeList"> the accumulation list</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.OnResize(System.EventArgs)">
            <exclude/>
            <summary>
            Overridden to surround the base call with BeginUpdate and EndUpdate.  
            This helps to reduce scrollbar flicker due to adjusting column sizes.
            </summary>
            <param name="e">Event details.</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.BestFitColumns">
            <exclude/>
            <summary>
            Overridden for when the user right clicks over the columns headers and brings up
            the pop-up dialog and selects Best Fit (All Columns).
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.HandleVScrollVisiblityChangedAfterCollapseOrExpand(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            A handler for adjusting whether the vertical scroll bar appears
            after the collapse or expansion of a node.
            </summary>
            <param name="sender"> sender of the event</param>
            <param name="e"> not used</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.HandleTreeListVisibleChanged(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            A visibility handler on the treelist that tries to run a best-fit
            algorithm on the columns.
            </summary>
            <param name="sender"> sender of the event</param>
            <param name="e"> not used</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.HandleColumnChanged(System.Object,DevExpress.XtraTreeList.ColumnChangedEventArgs)">
            <exclude/>
            <summary>
            A handler for when the column configuration of the treelist
            is adjusted.  A best-fit column policy is applied here.
            </summary>
            <param name="sender"> sender of the event</param>
            <param name="e"> not used</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.HandleTreeListResize(System.Object,System.EventArgs)">
            <exclude/>
            <summary>
            TreeList resizing event handler 
            </summary>
            <param name="sender"> sender of the event</param>
            <param name="e"> not used</param>
        </member>
        <member name="M:MaxCustomControls.MaxTreeList.ResizeFirstColumn">
            <summary>
            Resizes the first column.
            When the treelist is resized horizontally, all the data columns stay the same size
            But the first column, with the node names will resize itself. All data columns will 
            stick to the right of the tree list control, and the first column, the name column will
            resize to fill the gap.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.IconSize">
            <exclude/>
            <summary>
            The size of icon that will displayed in tree list in the left side of 
            each node. This is set by the material explorer.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.SelectImageSize">
            <exclude/>
            <summary>
            The size of the icon that will displayed in tree list in the *left* side of 
            each *node icon*. This is set by the material explorer.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.AscendingAgeSortOrder">
            <summary>
            The AscendingAgeSortOrder corresponds to Sort.Descending on handle columns. Lower handle values correspond to 'older' nodes.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.DescendingAgeSortOrder">
            <summary>
            The DescendingAgeSortOrder corresponds to Sort.Ascending on handle columns. Higher handle values correspond to 'newer' nodes.
            </summary>
        </member>
        <member name="P:MaxCustomControls.MaxTreeList.NameColumnSortOrder">
            <exclude/>
            <summary>
            The last specified sort order for the name column.
            </summary>
            <remarks>
            When not explicitly sorting on name or handle column, we implicitly sort on one of them as
            the last sort field, using the last specified sort order. 
            We store an 'extended' sort order in mNameColumnSortOrder, with potential values including 
            AscendingAgeSortOrder and DescendingAgeSortOrder above. 
            When sorting Age, we aren't sorting on the name column, rather we sort on the handle column. 
            This makes sense from a UI perspective, but doesn't make a whole lot of sense from the code 
            perspective. In other words, hack city!
            </remarks>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mRepositoryItemCheckEdit">
            <exclude/>
            <summary>
            Internal.  The repository item representing the checkbox editor.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mRepositoryItemColorEdit">
            <exclude/>
            <summary>
            Internal.  The repository item representing the color editor.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mRepositoryItemSpinMap">
            <exclude/>
            <summary>
            Internal.  The repository item representing the spinner.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mCurrentMouseDownEventArgs">
            <exclude/>
            <summary>
            Internal transient variable, meant to remember the mouse key
            down arguments in a mouse interation.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mLastFocusedNode">
            <exclude/>
            <summary>
            Cached value of the last focused treelist node.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mLastFocusedColumn">
            <exclude/>
            <summary>
            Cached value of the last focused treelist column.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mUserSelectionChangedEnabled">
            <exclude/>
            <summary>
            Encapsulation of the UserSelectionChanged property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mHandler">
            <exclude/>
            <summary>
            The main treelist handler, that overrides a lot of the 
            DevExpress handler code.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mbPanStarted">
            <exclude/>
            <summary>
            Member determines whether we are in a pan mode.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mPanStartXPos">
            <exclude/>
            <summary>
            The start position of the pan.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mPanStartYPos">
            <exclude/>
            <summary>
            The start position of the pan.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mPanStartVisibleIndex">
            <exclude/>
            <summary>
            The visible column index of the pan.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mPanStartLeftCoord">
            <exclude/>
            <summary>
            The LeftCoord value at the beginning of a pan action.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mPanCursor">
            <exclude/>
            <summary>
            The Pan (hand) cursor.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mDefaultCursor">
            <exclude/>
            <summary>
            The default or current mouse cursor when the pan begins.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mSelectChildrenNoParent">
            <exclude/>
            <summary>
            Encapsulates the SelectChildrenNoParent property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mSelectChildren">
            <exclude/>
            <summary>
            Encapsulates the SelectChildren property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mDataDirty">
            <exclude/>
            <summary>
            Encapsulates the DataDirty property.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mNameColumnSortOrder">
            <summary>
            The sort order specified when last explicitly sorted on name/handle columns.
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mIconSize">
            <summary>
            The size of the treelist icons (consistent in one TreeList) (in devexpress the image is called "state image")
            </summary>
        </member>
        <member name="F:MaxCustomControls.MaxTreeList.mSelectImageSize">
            <summary>
            The size of the treelist select image (consistent in one TreeList). This image is facultative and used, for example, in the scene explorer for the visibility icon next to the object icon.
            </summary>
        </member>
        <member name="T:MaxCustomControls.MaxUserControl">
            <summary>
            Specializes UserControl for use with the Max platform.
            </summary>
            <remarks>
            It is recommended that new UserControls designed for max should
            derive from this class.
            </remarks>
        </member>
        <member name="E:MaxCustomControls.MaxUserControl.NeedKeyboardFocus">
            <summary>
            Occurs when this control needs exclusive 
            keyboard focus. 
            </summary>
        </member>
        <member name="E:MaxCustomControls.MaxUserControl.ReleasingKeyboardFocus">
            <summary>
            Occurs when this control releases
            exclusive keyboard focus.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxUserControl.OnNeedKeyboardFocus(System.EventArgs)">
            <summary>
            Raises the NeedKeyboardFocus event.
            </summary>
            <param name="e">Data about this event.</param>
        </member>
        <member name="M:MaxCustomControls.MaxUserControl.OnReleasingKeyboardFocus(System.EventArgs)">
            <summary>
            Raises the ReleaseKeyboardFocus event.
            </summary>
            <param name="e">Data about this event.</param>
        </member>
        <member name="M:MaxCustomControls.MaxUserControl.RequestKeyboardFocus">
            <summary>
            Raises the NeedKeyboardFocus event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.MaxUserControl.ReleaseKeyboardFocus">
            <summary>
            Raises the ReleaseKeyboardFocus event.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ProgressDialog">
            <summary>
            Manages executing ExplorerFramework.Commands.  If an executed Command
            is Cancelable, this Dialog will display its progress and enable the user
            to Cancel the Command while preventing the user from interacting with the
            Max scene.  Non-cancelable Commands are executed directly, halting all
            other application execution.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ProgressDialog.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ProgressDialog.BackgroundCommandRunner">
            <summary>
            Runs Cancelable Commands in a background thread to maintain user
            interactivity.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ProgressDialog.ExecuteCancelableCommand(ExplorerFramework.Command)">
            <summary>
            Explicitly execute the given Command as a Cancelable command.
            Shows this dialog to display progress and to allow the user to cancel the
            Command.  Uses a modal form to prevent the user from modifying
            the scene during the Command's execution.
            </summary>
            <param name="command">The Command to execute.</param>
            <returns>
            <list>
            <item>DialogResult.None if the Command is invalid.</item>
            <item>DialogResult.Ok if the Command executed to completion.</item>
            <item>DialogResult.Cancel if the user canceled the operation.</item>
            </list>
            </returns>
        </member>
        <member name="M:MaxCustomControls.ProgressDialog.ExecuteCommand(ExplorerFramework.Command)">
            <summary>
            Executes the given Command, displaying the progress and cancel dialog
            only if the Command supports it.
            </summary>
            <remarks>
            <para>
            If the given Command is Cancelable, this will create a ProgressDialog
            to display the Command's progress and allow the user to Cancel its
            execution.  The ProgressDialog is modal to prevent the user from 
            modifying the scene while the Command is running.
            </para>
            <para>
            If the given Command is not Cancelable, no ProgressDialog is displayed.
            The Command is run in the main thread, stopping all other execution
            and disabling interactivity until the Command completes.
            </para>
            </remarks>
            <param name="command">The commmand to Execute</param>
            <returns>
            <item>DialogResult.None if the Command is invalid.</item>
            <item>DialogResult.Ok if the Command executed to completion.</item>
            <item>DialogResult.Cancel if the user canceled the operation.</item>
            </returns>
        </member>
        <member name="M:MaxCustomControls.ProgressDialog.RunnerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Closes the dialog when the worker signals that it 
            is done.
            </summary>
            <param name="sender">the source - the background worker</param>
            <param name="e">The args associated with this event - not used</param>
        </member>
        <member name="M:MaxCustomControls.ProgressDialog.UpdateProgress(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Updates the progress bar upon receiving progress change events.
            </summary>
            <param name="sender">source - the background worker</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ProgressDialog.CancelCommand(System.Object,System.EventArgs)">
            <summary>
            Handler for the cancel button.  Calls Stop() on the BackgroundCommandRunner.
            </summary>
            <param name="sender">the source of the cancel event - the worker</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ProgressDialog.AttachHandlers">
            <summary>
            Hooks up all appropriate event handlers.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ProgressDialog.DetachHandlers">
            <summary>
            Detaches all event handlers assigned through AttachHandlers.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ProgressDialog.mRunner">
            <summary>
            Runs the given Command in a background thread.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ProgressDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ProgressDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.ProgressDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MaxCustomControls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:MaxCustomControls.RenameInstanceDialog">
            <summary>
            Form for renaming an explorer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.RenameInstanceDialog.#ctor(System.String)">
            <summary>
            Constructs this form with the initial name of the form.
            </summary>
            <param name="instanceName">The initial name of the explorer to rename.</param>
        </member>
        <member name="M:MaxCustomControls.RenameInstanceDialog.UpdateColors">
            <summary>
            Implements CuiUpdater interface.  Called when a change or update occurs in the
            application CUI system.
            </summary>
        </member>
        <member name="P:MaxCustomControls.RenameInstanceDialog.InstanceName">
            <summary>
            The instance name of the form.  This contains the "result" of this form after it has
            closed.
            </summary>
        </member>
        <member name="M:MaxCustomControls.RenameInstanceDialog.mOK_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the OK button click to close this form.
            </summary>
            <param name="sender">sender of the event</param>
            <param name="e">not used</param>
        </member>
        <member name="F:MaxCustomControls.RenameInstanceDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MaxCustomControls.RenameInstanceDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MaxCustomControls.RenameInstanceDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ExplorerContainer">
            <summary>
            Implements some basic functionality that is both useful and 
            required by any Form that wishes to hold an ExplorerControl component.
            </summary>
            <remarks>
            Clients wishing to implement their own Explorer forms should derive a 
            Form class from this class.  Although this class is not strictly abstract,
            the ExplorerControl property is meant to be overridden and will throw an
            exception if called with its current implementation.  This class is kept
            concrete to faciliate usage in the Visual Studio Designer.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.#ctor">
            <summary>
            Constructor that attaches handlers for activating, closing
            the form, and handler for dealing with hotkeys.  
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleHotkey(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handler for dealing with Form hotkeys.  
            </summary>
            <remarks>
            Clients can override this method to handle their own hotkeys using the
            same mechanism that is used in the application Scene Explorer.  If the 
            client handler doesn't handle a key event, it should call base.HandleHotkey
            (this method) to allow the event to "bubble up" to this more generic
            handler.
            </remarks>
            <param name="sender">The source of this event - "this"</param>
            <param name="e">
            The arguments for this event.  If the hotkey is being handled, then
            the Handled field should be marked as true.
            </param>
        </member>
        <member name="P:MaxCustomControls.ExplorerContainer.ExplorerControl">
            <summary>
            The ExplorerControl being hosted by this container.  Must be overridden by
            deriving classes.
            </summary>
            <remarks>
            This implementation of this property throws a NotImplementedException.  Deriving 
            classes MUST override this method and supply their own implementation.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.ExplorerContainer.DragAndDropNodeCommand">
            <summary>
            The NodeCommand that is run when a successful drag-and-drop operation is performed.
            </summary>
        </member>
        <member name="P:MaxCustomControls.ExplorerContainer.DragAndDropCommandHandler">
            <summary>
            The drag-and-drop event handler.  This member's functions
            should be attached to new ExplorerControls as they are set.  This property is
            made protected to allow for clients to overload the behaviour of this handler methods.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleSelectChildrenCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handler intended to be attached to the menu item for Select Children.  
            Modifies the SelectChildren property on the ExplorerControl.
            </summary>
            <param name="sender">Source of the event - the menu item</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleInvertSelectionClick(System.Object,System.EventArgs)">
            <summary>
            Handler for the InvertSelection action.  Calls InvertSelection() 
            on ExplorerControl.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleSelectNoneClick(System.Object,System.EventArgs)">
            <summary>
            Handler for the SelectNone action.  Calls ClearNodeSelection() 
            on ExplorerControl.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleSelectAllClick(System.Object,System.EventArgs)">
            <summary>
            Handler for the SelectAll action.  Calls SelectAll() 
            on ExplorerControl.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleFindCaseSensitiveCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handler for the Find Case Sensitive action.  Changes the 
            IsCaseSensitive property on ExplorerControl.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleFindUsingRegularExpressionsClicked(System.Object,System.EventArgs)">
            <summary>
            Handler for the Find Using Regular Expressions action.  Changes the 
            FindStyle property on ExplorerControl.FindHandler.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleFindUsingWildcardsClicked(System.Object,System.EventArgs)">
            <summary>
            Handler for the Find Using Wildcards action.  Changes the 
            FindStyle property on ExplorerControl.FindHandler.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.UpdateFindStyleOptionMenuItems(System.Windows.Forms.ToolStripMenuItem,System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Utility method for updating the two find option menu
            items based on the current FindStyle property on ExplorerControl.
            </summary>
            <param name="findUsingRegularExpressionsMenuItem">
            The menu item for Find Using Regular Expressions.
            </param>
            <param name="findUsingWildcardsMenuItem">
            The menu item for Find Using Wildcards.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleShowFindToolbarCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the check event of togging on or off the find toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleShowViewSelectorToolbarCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the check change event of togging on or off the ViewSelector toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleShowSelectionToolbarCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the check change event of togging on or off the selection toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleShowToolsToolbarCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the check change event of togging on or off the Tools toolbar.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.AddCommandsGroupToMenuItem(System.Windows.Forms.ToolStripMenuItem,ExplorerFramework.Explorer,System.Collections.Generic.IEnumerable{ExplorerFramework.Command})">
            <summary>
            Adds a group of CommandMenuItems for a specified explorer into the 
            given menu item.
            </summary>
            <param name="menuItem">
            The given menu item
            </param>
            <param name="explorer">
            The specified explorer;
            </param>
            <param name="commands">
            The group of commands.
            </param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            A handler for the Form Closing event.  Broadcasts a ViewModified
            event.
            </summary>
            <param name="sender">the source of the event - "this"</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleActivated(System.Object,System.EventArgs)">
            <summary>
            A handler for the Form Activated event.  Sets the keyboard focus
            to the Find field the first time the form is activated.
            </summary>
            <param name="sender">the source of the event - "this"</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.HandleMenuStripMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Utility event handler for Mouse Down on MenuStrip
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.RouteKeyEventToApplication(System.Object,CSharpUtilities.RoutedKeyEventArgs)">
            <summary>
            Route keyboard event to Max Application
            </summary>
            <param name="sender">Source of the key event</param>
            <param name="e">Data about the key event</param>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <summary>
            Overridden to support routing key events to the main application.
            </summary>
            <param name="m">Current key message.</param>
            <returns>Same as the base implementation.</returns>
        </member>
        <member name="M:MaxCustomControls.ExplorerContainer.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override WndProc to deal with WM_PAINT specially to overcome the redrawing 
            issue when the explorer is registered as an extended viewport. 
            Removing UserPaint flag causes user edit control in ToolStrip not to draw so it's not used. 
            </summary>
            <param name="m">Current message to handle</param>
        </member>
        <member name="F:MaxCustomControls.ExplorerContainer.mSetFindFocusOnce">
            <summary>
            Internal variable used to set the focus to the Find field, but only once.
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerContainer.mKeyEventLParam">
            <summary>
            These two parameters are for routing key events
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerContainer.WM_PAINT">
            <summary>
            Window message definition
            </summary>
        </member>
        <member name="F:MaxCustomControls.ExplorerContainer.mNodeDragAndDropCommandHandler">
            <summary>
            Backing storage for the DragAndDropCommandHandler property.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ColumnSortState">
            <summary>
            A State class that represents the sort state of a specific tree list column.
            This is used for implementing save/load mechanism of the tree list sort states.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ColumnSortState.#ctor(System.String,System.Windows.Forms.SortOrder)">
            <summary>
            Constructor which accepts the fieldname and sortOrder of a given tree list column.
            </summary>
            <param name="fieldName">
            The fieldname of the tree list column
            </param>
            <param name="sortOrder">
            The sort order of the tree list column. (Ascending/Descending/None)
            </param>
        </member>
        <member name="P:MaxCustomControls.ColumnSortState.FieldName">
            <summary>
            The field name that used to identify the tree list column
            </summary>
        </member>
        <member name="P:MaxCustomControls.ColumnSortState.SortOrder">
            <summary>
            The sort order of the tree list column
            </summary>
        </member>
        <member name="M:MaxCustomControls.ColumnSortState.ToString">
            <summary>
            Format the ColumnSortState object to a string.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ColumnSortState.Parse(System.String)">
            <summary>
            Convert a formated string (usually comes from ColumnSortState.ToString()) 
            to a ColumnSortState object.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the string can not be parsed to a ColumnSortState object. i.e. 
            the format of the string is incorrect.
            e.g. the string is either an empty string ("") or only contains white space.
            </exception>
            <param name="s">
            The string which contains serialized ColumnSortState
            </param>
        </member>
        <member name="T:MaxCustomControls.SceneExplorerNodeExpandState">
            <summary>
            This class is used to determine the default expand state of a specific 
            node.
            </summary>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerNodeExpandState.#ctor(MaxCustomControls.ExplorerControl)">
            <summary>
            Constructor.
            </summary>
            <param name="explorerControl">
            The explorerControl, used to fetch the traversal node 
            from an id.
            </param>
        </member>
        <member name="M:MaxCustomControls.SceneExplorerNodeExpandState.IsExpanded(System.Int32)">
            <summary>
            Check if a specific node is expanded in default.
            </summary>
            <param name="nodeID">
            The given node id.
            </param>
            <returns>
            True if it is expanded, false otherwise.
            </returns>
        </member>
        <member name="T:MaxCustomControls.SpinEditorNumberFormat">
            <summary>
            Provides a custom format for spin editors
            </summary>
        </member>
        <member name="M:MaxCustomControls.SpinEditorNumberFormat.GetFormat(System.Type)">
            <summary>
            Get an ICustomFormatter to do the formatting.
            </summary>
            <param name="argType"></param>
            <returns>
            An instance of this class, or null if the type on which it is called
              is not an ICustomFormatter.
            </returns>
        </member>
        <member name="M:MaxCustomControls.SpinEditorNumberFormat.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Does the formatting and returns the formatted string
            </summary>
            <param name="formatString"></param>
            <param name="argToBeFormatted"></param>
            <param name="provider"></param>
            <returns>
            The formatted string
            </returns>
        </member>
        <member name="T:MaxCustomControls.TextFocusHelper">
            <summary>
            Consolidates Focus-related event handlers preventing key events
            from being inadvertently sent to Max.
            </summary>
            <remarks>
            To use, aggregate an instance of this
            class and hook up the event handlers to a text control.  It is recommended
            that each TextFocusHelper instance manage only one control, ie. that a helper
            instance not be shared between multiple controls.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.TextFocusHelper.#ctor">
            <summary>
            Default constructor: creates an unbound TextFocusHelper.  The event 
            handlers must be bound manually.
            </summary>
        </member>
        <member name="M:MaxCustomControls.TextFocusHelper.#ctor(System.Windows.Forms.Control)">
            <summary>
            Construct passing in a Control.  The event handlers will be automatically
            bound to the target's GotFocus and LostFocus events.
            </summary>
            <param name="target">
            Target control to which to bind this helper's event handlers.
            </param>
        </member>
        <member name="M:MaxCustomControls.TextFocusHelper.#ctor(System.Windows.Forms.ToolStripControlHost)">
            <summary>
            Construct passing in a ToolStripControlHost, such as a ToolStripTextBox or 
            a ToolStripComboBox.  The event handlers will be automatically bound to 
            the target's GotFocus and LostFocus events.
            </summary>
            <param name="target">
            Target control to which to bind this helper's event handlers.
            </param>
        </member>
        <member name="M:MaxCustomControls.TextFocusHelper.BindToTarget(System.Windows.Forms.Control)">
            <summary>
            Binds HandleGotFocus to the target's GotFocus event and HandleLostFocus
            to the target's LostFocus event.
            </summary>
            <remarks>
            This uses GotFocus and LostFocus instead of Enter and Leave because the
            lower-level GotFocus and LostFocus events are more reliably called.  For
            example, if this object is bound to an item on a ToolStrip and the item is
            placed on the Overflow drop down menu, Enter and Leave are never called,
            but GotFocus and LostFocus are reliably called.
            </remarks>
            <param name="target">
            Target control to which to bind this helper's event handlers.
            </param>
        </member>
        <member name="M:MaxCustomControls.TextFocusHelper.HandleGotFocus(System.Object,System.EventArgs)">
            <summary>
            Handles GotFocus or any other event where the sender gains the 
            keyboard focus.
            </summary>
            <param name="sender">source of the event - the bound control</param>
            <param name="e">not used</param>
        </member>
        <member name="M:MaxCustomControls.TextFocusHelper.HandleLostFocus(System.Object,System.EventArgs)">
            <summary>
            Handles LostFocus or any other event where the sender loses the keyboard 
            focus.
            </summary>
            <param name="sender">source of the event - the bound control</param>
            <param name="e">not used</param>
        </member>
        <member name="F:MaxCustomControls.TextFocusHelper.mStoredAcceleratorState">
            <summary>
            Keeps track of the current Application Accelerator
            on / off state
            </summary>
        </member>
        <member name="T:MaxCustomControls.QueryContinueDragNodeEventArgs">
            <summary>
            This class store the information used for QueryContinueDrag event.
            </summary>
        </member>
        <member name="M:MaxCustomControls.QueryContinueDragNodeEventArgs.#ctor(System.Drawing.Point,ExplorerFramework.Explorer,System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Constructor
            </summary>
            <param name="currentPoint">current cursor position</param>
            <param name="sourceExplorer">the explorer where the drag started.</param>
            <param name="e">base QueryContinueDragEventArgs</param>
        </member>
        <member name="P:MaxCustomControls.QueryContinueDragNodeEventArgs.CurrentPosition">
            <summary>
            Get the current mouse position.
            </summary>
        </member>
        <member name="P:MaxCustomControls.QueryContinueDragNodeEventArgs.SourceExplorer">
            <summary>
            Get the explorer where the drag starts
            </summary>
        </member>
        <member name="P:MaxCustomControls.QueryContinueDragNodeEventArgs.IsHandled">
            <summary>
            Get or set a flag which indicates this event is handled or not.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ToolStripPanelLocation">
            <summary>
            Each of the enumeration value indicates a ToolStripPanel location of 
            a ToolStripContainer.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ToolStripContainerLayout">
            <summary>
            This class records the layout information of all toolbars inside a given 
            ToolStripContainer. We then use this class to arrange toolbars to their 
            correct location in this container.
            </summary>
            <remarks>
            <para>
            This is a temporary work around for ToolStrip layout. I created this class 
            for two reasons: 
            </para>
            <para>
            1. The standard ToolStrip that provided by Microsoft has bugs and their 
            position cannot be accurately set. I googled this and I found a lot of 
            developers complained about this, see the link: 
            connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=114610 
            </para>
            <para>
            2. Replace ToolStrip with other products can solve this problem, However, 
            doing so means completely rewrite of the icon management, the buttons on 
            the toolbars, the container panel of the toolbars, the save and load of 
            toolbar layout information ---- which, means the completely rewrite of the 
            entire toolbar mechanism of both scene explorer and material explorer. We 
            decide to do this in Zelda timeframe.
            </para>
            </remarks>
        </member>
        <member name="M:MaxCustomControls.ToolStripContainerLayout.#ctor(System.Windows.Forms.ToolStripContainer)">
            <summary>
            Constructor.
            </summary>
            <param name="aToolStripContainer">
            The given ToolStripContainer.
            </param>
        </member>
        <member name="M:MaxCustomControls.ToolStripContainerLayout.Clear">
            <summary>
            Clear all layout information of this ToolStripContainer.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ToolStripContainerLayout.AddToolStrip(MaxCustomControls.ToolStripPanelLocation,System.Int32,System.Windows.Forms.ToolStrip)">
            <summary>
            Add a ToolStrip at the given location of this ToolStripContainer. 
            </summary>
            <param name="location">
            Which panel does this ToolStrip lay?
            </param>
            <param name="row">
            Which row of that panel?
            </param>
            <param name="toolStrip">
            The toolstrip.
            </param>
        </member>
        <member name="M:MaxCustomControls.ToolStripContainerLayout.SuspendLayout">
            <summary>
            Suspend the layout of all toolstrips of this ToolStripContainer. So 
            even the property of a toolstrip get changed, we won't perform layout.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ToolStripContainerLayout.ResumeLayout">
            <summary>
            Resume the layout of all toolstrips of this ToolStripContainer. Notice 
            this function will not perform layout. You need to explicitly call 
            PerformLayout.
            </summary>
        </member>
        <member name="M:MaxCustomControls.ToolStripContainerLayout.PerformLayout">
            <summary>
            Perform the layout of all toolstrips of this container.
            </summary>
        </member>
        <member name="T:MaxCustomControls.ToolStripPanelLayout">
            <summary>
            Records and perform the layout of all toolbars in a ToolStripPanel. A 
            ToolStripPanel may has several rows, each row contains a set of ToolStrips.
            </summary>
            <seealso cref="T:MaxCustomControls.ToolStripContainerLayout"/>
        </member>
        <member name="T:MaxCustomControls.ToolStripRowLayout">
            <summary>
            Records and perform the layout of all toolbars in a row of a ToolStripPanel.
            </summary>
            <seealso cref="T:MaxCustomControls.ToolStripContainerLayout"/>
        </member>
        <member name="T:MaxCustomControls.ExplorerNodesComparer">
            <summary>
            Overrides DevExpress's base NodesComparer to customize and optimize sorting.
            </summary>
            <remarks>
            MaxNodesComparer sorts all Strings and non-comparable objects according
            to Windows Explorer-style natural sorting, whereby numerical parts of a
            string are sorted numerically instead of lexicographically. In other words,
            101 will come before 1000. Optimizes by avoiding some of the unnecessary
            work done by the base class. We skip Custom sorting through an event, 
            and we omit enhanced sorting, which orders objects by their position in the
            original underlying list.
            </remarks>
        </member>
        <member name="T:MaxCustomControls.UIOptions">
            <summary>
            Static options used to configure this library in general.
            </summary>
        </member>
        <member name="P:MaxCustomControls.UIOptions.LaunchedFromMax">
            <summary>
            Indicates if this library is loaded in Max and needs its specialized
            handling.
            </summary>
            <remarks>
            In an effort to make this library not-Max specific, this property
            has been added to allow client code to dynamically check whether it
            is running in the context of a Max session.  The underlying assumption
            also is that if this value is true, then IsDesignerMode is false.
            </remarks>
        </member>
        <member name="P:MaxCustomControls.UIOptions.IsDesignerMode">
            <summary>
            Indicates if this library is loaded in the Visual Studio designer.
            </summary>
            <remarks>
            This is a mechanism that client code can use to determine whether the code
            being run is done in the context of a running application, or in the 
            context of the Visual Studio (or other IDE) designer.  Sometimes it is
            useful and necessary to exclude certain calls based on whether the code
            is being run by the designer or not.
            </remarks>
        </member>
        <member name="M:MaxCustomControls.UIOptions.InitializeForMax">
            <summary>
            Initializes Max-specific constants and hooks up the specialized 
            ToolStrip renderer.  (Reserved for use in Max.)
            </summary>
        </member>
        <member name="F:MaxCustomControls.UIOptions.sLaunchedFromMax">
            <summary>
            Storage for LaunchedFromMax
            </summary>
        </member>
        <member name="F:MaxCustomControls.UIOptions.sIsDesignerMode">
            <summary>
            Storage for IsDesignerMode
            </summary>
        </member>
        <member name="T:MaxCustomControls.Win32API">
            <summary>
            Acts as a C# bridge to certain Win32 core functions.
            </summary>
        </member>
        <member name="F:MaxCustomControls.Win32API.WM_KEYUP">
            <summary>
            Reflects the value of the Win32 define WM_KEYUP
            </summary>
        </member>
        <member name="M:MaxCustomControls.Win32API.SendMessage(System.IntPtr,System.UInt32,System.UIntPtr,System.UIntPtr)">
            <summary>
            Exposes the ubiquitous SendMessage Win32 API function.
            See MSDN for the numerous ways this method is used.
            </summary>
            <param name="hWnd">The handle of the window to send a message
            to - see MSDN documentation.
            </param>
            <param name="Msg">The Message code to send to the window
            - see MSDN documentation.</param>
            <param name="wParam">The WPARAM parameter for this message
            - see MSDN documentation.</param>
            <param name="lParam">The LPARAM parameter for this message
            - see MSDN documentation.</param>
            <returns>The return value is based mostly on the Msg parameter
            sent to the window - see MSDN documentation.</returns>
        </member>
        <member name="M:MaxCustomControls.Win32API.BringWindowToTop(System.IntPtr)">
            <summary>
            Exposes the BrignWindowToTop method from Win32.  
            - see MSDN documentation.
            </summary>
            <param name="hWnd">HWND Handle of window to bring to the top
            - see MSDN documentation.</param>
            <returns>See MSDN documentation for BringWindowToTop(HWND)</returns>
        </member>
    </members>
</doc>
