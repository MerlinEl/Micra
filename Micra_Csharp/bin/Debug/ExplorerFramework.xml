<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExplorerFramework</name>
    </assembly>
    <members>
        <member name="T:ExplorerFramework.AndPredicate">
            <summary>
            Apply a logical 'and' to the results of two predicate delegates.  Evaluate
            can be used as a Predicate&lt;TraversalNode&gt; delegate.
            </summary>
        </member>
        <member name="M:ExplorerFramework.AndPredicate.Create(System.Predicate{ExplorerFramework.TraversalNode},System.Predicate{ExplorerFramework.TraversalNode})">
            <summary>
            Factory method.  Construct a Predicate from the And of two other 
            Predicate instances.
            </summary>
            <remarks>
            This is a convenience method for dealing with possibly null Predicates.
            </remarks>
            <param name="lhs">Left hand side boolean function.</param>
            <param name="rhs">Right hand side boolean function.</param>
            <returns>
            If both lhs and rhs are null, returns null.
            If either parameter is null, Create will return the other parameter
            directly.  Otherwise, 
            <c>new AndPredicate(lhs, rhs).Evaluate</c> is returned.
            </returns>
        </member>
        <member name="M:ExplorerFramework.AndPredicate.#ctor(System.Predicate{ExplorerFramework.TraversalNode},System.Predicate{ExplorerFramework.TraversalNode})">
            <summary>
            Construct an AndPredicate whose Evaluate method will return the logical
            AND of lhs's result and rhs's result.
            </summary>
            <param name="lhs">Left hand side boolean function.</param>
            <param name="rhs">Right hand side boolean function.</param>
        </member>
        <member name="M:ExplorerFramework.AndPredicate.Evaluate(ExplorerFramework.TraversalNode)">
            <summary>
            Evaluate the predicate, returning the result of
            <c>lhs(argument) &amp;&amp; rhs(argument)</c>.
            </summary>
            <param name="argument">
            The TraversalNode argument to pass to the lhs and rhs predicates.
            </param>
            <returns>
            The result of <c>lhs(argument) &amp;&amp; rhs(argument)</c>.
            </returns>
        </member>
        <member name="F:ExplorerFramework.AndPredicate.mLhs">
            <summary>
            Left hand side boolean function.
            </summary>
        </member>
        <member name="F:ExplorerFramework.AndPredicate.mRhs">
            <summary>
            Right hand side boolean function.
            </summary>
        </member>
        <member name="T:ExplorerFramework.BackgroundCommandRunner">
            <summary>
            Runs a Command in a background thread.  Exposes ProgressReporting events. 
            </summary>
            <remarks>
            This wraps a CSharpUtilities.SynchronizingBackgroundWorker.  It is highly 
            recommended that clients correctly assign the synchronizing context in the 
            Synchronizer field.  This will serve to guarantee that ProgressChanged
            and RunWorkerCompleted events occur in the Synchronizer's thread.  
            Otherwise, there is no guarantee that these events will be called in the 
            main thread.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.BackgroundCommandRunner.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:ExplorerFramework.BackgroundCommandRunner.Synchronizer">
            <summary>
            The synchronizing context.
            </summary>
            <remarks>
            If this object is given a Synchronizer, ProgressChanged and 
            RunWorkerCompleted events will occur in the Synchronizer's thread.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.BackgroundCommandRunner.RunningCommand">
            <summary>
            The current Command running in this BackgroundCommandRunner.
            </summary>
        </member>
        <member name="P:ExplorerFramework.BackgroundCommandRunner.RollbackRequested">
            <summary>
            The client requested a rollback (undo) of the Command, probably due to a
            Cancel.
            </summary>
        </member>
        <member name="E:ExplorerFramework.BackgroundCommandRunner.ProgressChanged">
            <summary>
            Reports that the current progress step has changed.
            </summary>
            <see>
            System.ComponentModel.BackgroundWorker.ProgressChanged
            </see>
        </member>
        <member name="E:ExplorerFramework.BackgroundCommandRunner.RunWorkerCompleted">
            <summary>
            Reports that the Command has completed its task.
            </summary>
            <see>
            System.ComponentModel.BackgroundWorker.RunWorkerCompleted
            </see>
        </member>
        <member name="M:ExplorerFramework.BackgroundCommandRunner.ExecuteCommand(ExplorerFramework.Command)">
            <summary>
            Start running the given Command in a background thread.
            </summary>
            <remarks>
            This will start the Command asynchronously and so will return 
            immediately.  RunningCommand will be set to command.  The 
            RunWorkerCompleted event will fire when command finishes its task.
            </remarks>
            <param name="command">Command to execute.</param>
        </member>
        <member name="M:ExplorerFramework.BackgroundCommandRunner.Cancel">
            <summary>
            Cancel the running command, requesting a rollback.
            </summary>
        </member>
        <member name="M:ExplorerFramework.BackgroundCommandRunner.Stop">
            <summary>
            Stop the running command, leaving the task unfinished with no rollback.
            </summary>
        </member>
        <member name="M:ExplorerFramework.BackgroundCommandRunner.ReportProgress(System.Int32)">
            <summary>
            Report the given amount of progress to ProgressChanged listeners.
            </summary>
            <param name="percentComplete">
            The percentage of the task that has been completed.
            </param>
        </member>
        <member name="M:ExplorerFramework.BackgroundCommandRunner.RunFromWorker(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            DoWork handler, called from the background thread to start the Command's 
            task.
            </summary>
            <param name="sender">The event source.</param>
            <param name="e">
            The DoWork event arguments.  e.Cancel will be set if the Command is 
            canceled.
            </param>
        </member>
        <member name="M:ExplorerFramework.BackgroundCommandRunner.CancelCommand">
            <summary>
            Do the actual command-canceling work.
            </summary>
        </member>
        <member name="F:ExplorerFramework.BackgroundCommandRunner.mRollbackRequested">
            <summary>
            Indicates if the client code requested a rollback when the Command was
            canceled or stopped.
            </summary>
        </member>
        <member name="F:ExplorerFramework.BackgroundCommandRunner.mWorker">
            <summary>
            Manages the background threading concerns.
            </summary>
        </member>
        <member name="F:ExplorerFramework.BackgroundCommandRunner.mRunningCommand">
            <summary>
            The current running Command passed to ExecuteCommand.
            </summary>
        </member>
        <member name="F:ExplorerFramework.BackgroundCommandRunner.mCommandLock">
            <summary>
            Lock object used to mediate access to the running command.
            </summary>
        </member>
        <member name="T:ExplorerFramework.BooleanFalseComparison">
            <summary>
            Returns true if the given first object is false.
            </summary>
            <remarks>
            BooleanFalseComparison is atypical from other IComparisonPredicates in that 
            it ignores the second argument to Evaluate, and always compares the first 
            argument to Boolean false.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.BooleanFalseComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compares the first argument to Boolean false.
            </summary>
            <param name="x">Object to compare.</param>
            <param name="y">Ignored.</param>
            <returns>true if x is false, false otherwise.</returns>
        </member>
        <member name="P:ExplorerFramework.BooleanFalseComparison.DisplayName">
            <summary>
            Localized display text for this comparison.
            </summary>
        </member>
        <member name="T:ExplorerFramework.BooleanTrueComparison">
            <summary>
            Returns true if the given first object is true.
            </summary>
            <remarks>
            BooleanTrueComparison is atypical from other IComparisonPredicates in that 
            it ignores the second argument to Evaluate, and always compares the first 
            argument to Boolean true.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.BooleanTrueComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compares the first argument to Boolean true.
            </summary>
            <param name="x">Object to compare.</param>
            <param name="y">Ignored.</param>
            <returns>true if x is true, false otherwise.</returns>
        </member>
        <member name="P:ExplorerFramework.BooleanTrueComparison.DisplayName">
            <summary>
            Localized display text for this comparison.
            </summary>
        </member>
        <member name="T:ExplorerFramework.ColorMatchComparison">
            <summary>
            Compares a Color to a ColorTolerance, returning true if the Color 
            matches the reference Color in the ColorTolerance, within the given tolerance.
            </summary>
        </member>
        <member name="M:ExplorerFramework.ColorMatchComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compares a Color to a ColorTolerance, returning true if the Color 
            matches the reference Color in the ColorTolerance, within the given tolerance.
            </summary>
            <param name="x">Color</param>
            <param name="y">ColorTolerance</param>
            <returns> True if the Color matches the reference Color in the 
            ColorTolerance, within the given tolerance. False otherwise.</returns>
        </member>
        <member name="P:ExplorerFramework.ColorMatchComparison.DisplayName">
            <summary>
            Descriptive, localized text for this comparison operation to display in
            the UI.
            </summary>
        </member>
        <member name="T:ExplorerFramework.ColorTolerance">
            <summary>
            A System.Drawing.Color and a tolerance value for evaluating a color match.
            </summary>
        </member>
        <member name="E:ExplorerFramework.ColorTolerance.PropertyChanged">
            <summary>
            Signals that a property has changed value.
            </summary>
        </member>
        <member name="F:ExplorerFramework.ColorTolerance.ColorPropertyName">
            <summary>
            Property name for the Color property.
            </summary>
        </member>
        <member name="P:ExplorerFramework.ColorTolerance.Color">
            <summary>
            Reference color value.
            </summary>
        </member>
        <member name="F:ExplorerFramework.ColorTolerance.TolerancePropertyName">
            <summary>
            Property name for the Tolerance property.
            </summary>
        </member>
        <member name="P:ExplorerFramework.ColorTolerance.Tolerance">
            <summary>
            Tolerance value for determining a color match.
            </summary>
        </member>
        <member name="M:ExplorerFramework.ColorTolerance.OnPropertyChanged(System.String)">
            <summary>
            Raises a PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
        </member>
        <member name="T:ExplorerFramework.ColorDoesNotMatchComparison">
            <summary>
            Compares a Color to a ColorTolerance, returning true if the Color does not
            match the reference Color in the ColorTolerance, within the given tolerance.
            </summary>
        </member>
        <member name="M:ExplorerFramework.ColorDoesNotMatchComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compares a Color to a ColorTolerance, returning true if the Color does not
            match the reference Color in the ColorTolerance, within the given tolerance.
            </summary>
            <param name="x">Color</param>
            <param name="y">ColorTolerance</param>
            <returns>
            True if the Color does not match the reference Color in the 
            ColorTolerance, within the given tolerance, false otherwise.
            </returns>
        </member>
        <member name="P:ExplorerFramework.ColorDoesNotMatchComparison.DisplayName">
            <summary>
            Descriptive, localized text for this comparison operation to display in
            the UI.
            </summary>
        </member>
        <member name="T:ExplorerFramework.CommandDecoratorAdapter">
            <summary>
            "null-implementation" of a command decorator.  
            </summary>
            <remarks>
            <para>
            Every Command function is overridden to forward to the wrapped command.  
            This class can therefore be used as a convenient command decorator base 
            class to avoid having to write all the forwarding functions. 
            </para>
            <para>
            See the Decorator pattern in Design Patterns by Gamma et al.
            </para>
            </remarks>
        </member>
        <member name="M:ExplorerFramework.CommandDecoratorAdapter.#ctor(ExplorerFramework.Command)">
            <summary>
            Construct with the wrapped command to decorate.
            </summary>
            <param name="wrappedCommand">
            The internal Command, calls will be forwarded to this Command.
            </param>
        </member>
        <member name="P:ExplorerFramework.CommandDecoratorAdapter.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="P:ExplorerFramework.CommandDecoratorAdapter.Name">
            <summary>
            This Command's name.
            </summary>
            <remarks>
            For example, the Name may appear as a menu item's text in an Explorer UI.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.CommandDecoratorAdapter.Cancelable">
            <summary>
            Can this Command handle being canceled while it is running?
            </summary>
            <remarks>
            This should not change during a Command's execution.  It is usually
            called before a Command is started.  An Explorer UI may present a
            Please wait.../Cancel dialog to the user while a Cancelable Command is
            running.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.CommandDecoratorAdapter.IsValid">
            <summary>
            Given the current Explorer configuration and data set, would executing
            this Command be a valid operation?
            </summary>
            <remarks>
            An Explorer UI may use IsValid to determine whether to present a Command
            menu item as enabled or disabled.
            </remarks>
            <returns>
            true if executing this command would be a valid operation.  false
            otherwise.
            </returns>
        </member>
        <member name="M:ExplorerFramework.CommandDecoratorAdapter.Execute">
            <summary>
            Run this Command.
            </summary>
        </member>
        <member name="M:ExplorerFramework.CommandDecoratorAdapter.Cancel">
            <summary>
            Cancel this Command.  This may be implemented as a no-op or throw an
            exception if Cancelable reports false.
            </summary>
        </member>
        <member name="P:ExplorerFramework.CommandDecoratorAdapter.WrappedCommand">
            <summary>
            The internal, wrapped command to which calls are forwarded.
            </summary>
        </member>
        <member name="F:ExplorerFramework.CommandDecoratorAdapter.mWrappedCommand">
            <summary>
            The internal, wrapped command to which calls are forwarded.
            </summary>
        </member>
        <member name="T:ExplorerFramework.DecimalIsLessThanOrEqualComparison">
            <summary>
            Compare two IConvertibles as decimals, returning true if the first is 
            less than or equal to the second.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DecimalIsLessThanOrEqualComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compare two IConvertibles as decimals, returning true if the first is 
            less than or equal to the second.
            </summary>
            <param name="x">First IConvertible, interpreted as a decimal.</param>
            <param name="y">Second IConvertible, interpreted as a decimal.</param>
            <returns>True if x is less than or equal to y, false otherwise.</returns>
        </member>
        <member name="P:ExplorerFramework.DecimalIsLessThanOrEqualComparison.DisplayName">
            <summary>
            Descriptive, localized text for this comparison operation to display in
            the UI.
            </summary>
        </member>
        <member name="T:ExplorerFramework.DecimalIsGreaterThanOrEqualComparison">
            <summary>
            Compare two IConvertibles as decimals, returning true if the first is 
            greater than or equal to the second.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DecimalIsGreaterThanOrEqualComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compare two IConvertibles as decimals, returning true if the first is 
            greater than or equal to the second.
            </summary>
            <param name="x">First IConvertible, interpreted as a decimal.</param>
            <param name="y">Second IConvertible, interpreted as a decimal.</param>
            <returns>True if x is greater than or equal to y, false otherwise.</returns>
        </member>
        <member name="P:ExplorerFramework.DecimalIsGreaterThanOrEqualComparison.DisplayName">
            <summary>
            Descriptive, localized text for this comparison operation to display in
            the UI.
            </summary>
        </member>
        <member name="T:ExplorerFramework.DecimalInRangeComparison">
            <summary>
            Compare an IConvertible to a DecimalRange, returning true if the IConvertible
            as a decimal is within the range, inclusively.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DecimalInRangeComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compare an IConvertible to a DecimalRange, returning true if the IConvertible
            as a decimal is within the range, inclusively.
            </summary>
            <param name="x">IConvertible, interpreted as a decimal.</param>
            <param name="y">A DecimalRange.</param>
            <returns>
            True if x, converted to a decimal, falls within the DecimalRange y, 
            including the end points.
            </returns>
        </member>
        <member name="P:ExplorerFramework.DecimalInRangeComparison.DisplayName">
            <summary>
            Descriptive, localized text for this comparison operation to display in
            the UI.
            </summary>
        </member>
        <member name="T:ExplorerFramework.DecimalIsComparison">
            <summary>
            Compares two IConvertibles, converted to decimal, using Decimal.Equals.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DecimalIsComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compares two IConvertibles, converted to decimal, using Decimal.Equals.
            </summary>
            <param name="x">First IConvertible.</param>
            <param name="y">Second IConvertible.</param>
            <returns>True if x and y are IConvertibles and if they evaluate as
            equal using Decimal.Equals.</returns>
        </member>
        <member name="P:ExplorerFramework.DecimalIsComparison.DisplayName">
            <summary>
            Descriptive, localized text for this comparison operation to display in
            the UI.
            </summary>
        </member>
        <member name="T:ExplorerFramework.DecimalIsGreaterThanComparison">
            <summary>
            Compare two IConvertibles as decimals, returning true if the first is 
            greater than the second.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DecimalIsGreaterThanComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compare two IConvertibles as decimals, returning true if the first is 
            greater than the second.
            </summary>
            <param name="x">First IConvertible.</param>
            <param name="y">Second IConvertible</param>
            <returns>True if x is greater than y.</returns>
        </member>
        <member name="P:ExplorerFramework.DecimalIsGreaterThanComparison.DisplayName">
            <summary>
            Descriptive, localized text for this comparison operation to display in
            the UI.
            </summary>
        </member>
        <member name="T:ExplorerFramework.DecimalIsLessThanComparison">
            <summary>
            Compare two IConvertibles as decimals, returning true if the first is 
            less than the second.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DecimalIsLessThanComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compare two IConvertibles as decimals, returning true if the first is 
            less than the second.
            </summary>
            <param name="x">First IConvertible, interpreted as a decimal.</param>
            <param name="y">Second IConvertible, interpreted as a decimal.</param>
            <returns>True if x is less than y, false otherwise.</returns>
        </member>
        <member name="P:ExplorerFramework.DecimalIsLessThanComparison.DisplayName">
            <summary>
            Descriptive, localized text for this comparison operation to display in
            the UI.
            </summary>
        </member>
        <member name="T:ExplorerFramework.DecimalIsNotComparison">
            <summary>
            Compares two IConvertibles, converted to decimal, using Decimal.Equals, 
            returning true if the two values are not equal.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DecimalIsNotComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compares two IConvertibles, converted to decimal, using Decimal.Equals, 
            returning true if the two values are not equal.
            </summary>
            <param name="x">First IConvertible, interpreted as a decimal.</param>
            <param name="y">Second IConvertible, interpreted as a decimal.</param>
            <returns>True if x is not equal to y, false otherwise.</returns>
        </member>
        <member name="P:ExplorerFramework.DecimalIsNotComparison.DisplayName">
            <summary>
            Descriptive, localized text for this comparison operation to display in
            the UI.
            </summary>
        </member>
        <member name="T:ExplorerFramework.DecimalRange">
            <summary>
            Decimal range, given as minimum and maximum bounds, reporting property
            changes through the INotifyPropertyChanged interface.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DecimalRange.MinimumPropertyName">
            <summary>
            Property name for the Minimum value.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DecimalRange.Minimum">
            <summary>
            Range minimum value.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DecimalRange.MaximumPropertyName">
            <summary>
            Property name for the Maximum value.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DecimalRange.Maximum">
            <summary>
            Range maximum value.
            </summary>
        </member>
        <member name="E:ExplorerFramework.DecimalRange.PropertyChanged">
            <summary>
            Signals a property has changed value.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DecimalRange.OnPropertyChanged(System.String)">
            <summary>
            Raises a PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
        </member>
        <member name="T:ExplorerFramework.EqualityComparison">
            <summary>
            Compares two objects and returns true if they are equal using Equals.
            </summary>
        </member>
        <member name="M:ExplorerFramework.EqualityComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compares x and y using x.Equals(y).
            </summary>
            <param name="x">First object.</param>
            <param name="y">Second object.</param>
            <returns>True if x.Equals(y) evaluates to true, false otherwise.</returns>
        </member>
        <member name="P:ExplorerFramework.EqualityComparison.DisplayName">
            <summary>
            Localized display text for this comparison.
            </summary>
        </member>
        <member name="T:ExplorerFramework.FilterMode">
            <summary>
            Specifies a filtering method.
            </summary>
        </member>
        <member name="F:ExplorerFramework.FilterMode.PassAll">
            <summary>
            Specifies that an item must pass all filters for it to pass filtering.
            </summary>
        </member>
        <member name="F:ExplorerFramework.FilterMode.PassAny">
            <summary>
            Specifies that an item passes filtering if it passes any of the filters.
            </summary>
        </member>
        <member name="T:ExplorerFramework.FindStyle">
            <summary>
            Explorer Find styles.
            </summary>
            <remarks>
            Find styles may be:
            <list>
            <item>Strict finds - exact case sensitive or insensitive match</item>
            <item>Regular Expressions</item>
            <item>Wildcards - similar to the ones used in the Windows command line</item>
            </list>
            </remarks>
        </member>
        <member name="F:ExplorerFramework.FindStyle.Strict">
            <summary>
            Exact case sensitive or insensitive match
            </summary>
        </member>
        <member name="F:ExplorerFramework.FindStyle.RegularExpressions">
            <summary>
            Uses Regular Expressions
            </summary>
        </member>
        <member name="F:ExplorerFramework.FindStyle.Wildcards">
            <summary>
            Similar to wildcards used in the Windows command line
            </summary>
        </member>
        <member name="T:ExplorerFramework.NotEqualsComparison">
            <summary>
            Compares two objects and returns true if they are not equal using Equals.
            </summary>
        </member>
        <member name="M:ExplorerFramework.NotEqualsComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Compare x and y using Equals, returning true if Equals returns false.
            </summary>
            <param name="x">First object</param>
            <param name="y">Second object</param>
            <returns>True if x.Equals(y) returns false, false if x and y are equal</returns>
        </member>
        <member name="P:ExplorerFramework.NotEqualsComparison.DisplayName">
            <summary>
            Localized display text for this comparison.
            </summary>
        </member>
        <member name="T:ExplorerFramework.PropertyDescriptorDecorator">
            <summary>
            This interface exists to mark a PropertyDescriptor as a Decorator.  
            </summary>
            <remarks>
             A Decorator wraps its decorated component to add some new functionality 
              through composition, and stands in for the original. 
            Due to a design hole, some clients need to be able to dig through the layers of decorators, 
              for example to find specific interfaces such as IBounded.  
            Marking a Decorator with this interface enables clients to do perform such a traversal.
            </remarks>
            <seealso cref="T:ExplorerFramework.PropertyDescriptorDecoratorAdapter"/>
        </member>
        <member name="P:ExplorerFramework.PropertyDescriptorDecorator.DecoratedDescriptor">
            <summary>
            The decorated descriptor wrapped inside a Decorator.
            </summary>
        </member>
        <member name="T:ExplorerFramework.PropertyDescriptorDecoratorAdapter">
            <summary>
            "Null-implementation" of a PropertyDescriptor decorator. 
            </summary>
            <remarks>
            Every function is overridden to forward to the wrapped PropertyDescriptor.  
            This class can therefore be used as a convenient decorator base class to 
            avoid having to write all the forwarding functions.
            </remarks>
            <seealso cref="T:ExplorerFramework.PropertyDescriptorDecorator"/>
        </member>
        <member name="M:ExplorerFramework.PropertyDescriptorDecoratorAdapter.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Construct with the decorated PropertyDescriptor.
            </summary>
            <param name="decorated">
            All calls not overridden in a derived class will be passed to this
            decorated descriptor.
            </param>
        </member>
        <member name="P:ExplorerFramework.PropertyDescriptorDecoratorAdapter.DecoratedDescriptor">
            <summary>
            The decorated descriptor wrapped inside this Decorator.
            </summary>
        </member>
        <member name="P:ExplorerFramework.PropertyDescriptorDecoratorAdapter.DisplayName">
            <summary>
            Get the localized name. This is typically used for treelist column caption.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyDescriptorDecoratorAdapter.CanResetValue(System.Object)">
            <summary>
            Does the given object have reset capabilities?  Returns false by default.
            </summary>
            <param name="component">Object being queried for reset capability.</param>
            <returns>
            true if reset is supported, false otherwise.
            </returns>
        </member>
        <member name="P:ExplorerFramework.PropertyDescriptorDecoratorAdapter.ComponentType">
            <summary>
            The type on which this property is exposed.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyDescriptorDecoratorAdapter.GetValue(System.Object)">
            <summary>
            Get the current value of the property on the passed-in object.
            </summary>
            <param name="component">
            The object from which to obtain the property value.
            </param>
            <returns>
            The current property value accessed by this property descriptor for the
            given object.  May return null.
            </returns>
        </member>
        <member name="P:ExplorerFramework.PropertyDescriptorDecoratorAdapter.IsReadOnly">
            <summary>
            Is this property read-only or can the property value be set through 
            this PropertyDescriptor?
            </summary>
        </member>
        <member name="P:ExplorerFramework.PropertyDescriptorDecoratorAdapter.PropertyType">
            <summary>
            Type of the property value accessed by this descriptor.
            </summary>
            <remarks>
            GetValue returns objects of this type and SetValue expects objects
            of this type as its value parameter.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyDescriptorDecoratorAdapter.ResetValue(System.Object)">
            <summary>
            Reset this property value to its default value.
            </summary>
            <param name="component">Object to reset.</param>
        </member>
        <member name="M:ExplorerFramework.PropertyDescriptorDecoratorAdapter.SetValue(System.Object,System.Object)">
            <summary>
            Set the current value of the property accessed by this descriptor on
            the given object.
            </summary>
            <param name="component">Object on which to set the property value.</param>
            <param name="value">New value for the property.</param>
        </member>
        <member name="M:ExplorerFramework.PropertyDescriptorDecoratorAdapter.ShouldSerializeValue(System.Object)">
            <summary>
            Does this value need to be persisted?
            </summary>
            <param name="component">Object being queried.</param>
            <returns>
            true if the property should be persisted; otherwise, false. 
            </returns>
        </member>
        <member name="F:ExplorerFramework.PropertyDescriptorDecoratorAdapter.mDecoratedDescriptor">
            <summary>
            The decorated descriptor wrapped inside this Decorator.
            </summary>
            <remarks>
            All calls not overridden in a derived class will be passed to this
            decorated descriptor.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyDescriptorDecoratorAdapter.Dispose">
            <summary>
            The decorator can't hide the disposability of its wrapped property.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyDescriptorDecoratorAdapter.Dispose(System.Boolean)">
            <summary>
            Provides a central dispose method.
            </summary>
            <param name="disposing">Whether this is being called from explicit dispose, or from finalizer.</param>
        </member>
        <member name="T:ExplorerFramework.StatelessComparisonPredicate">
            <summary>
            Intermediate abstract base class for IComparisonPredicates without internal
            state.
            </summary>
            <remarks>
            As long as a comparison has not internal state, we want the comparison
            instances of a given concrete type to be interchangeable. This base class
            establishes common code for Equals and GetHashCode. 
            </remarks>
        </member>
        <member name="M:ExplorerFramework.StatelessComparisonPredicate.Evaluate(System.Object,System.Object)">
            <summary>
            Compare the two given objects.
            </summary>
            <param name="x">The left-hand side argument</param>
            <param name="y">The right-hand side argument</param>
            <returns>
            The result of evaluating the comparison, as defined by the implementing 
            class's semantics.
            </returns>
        </member>
        <member name="P:ExplorerFramework.StatelessComparisonPredicate.DisplayName">
            <summary>
            Descriptive, localized text for this comparison operation to display in
            the UI.
            </summary>
        </member>
        <member name="M:ExplorerFramework.StatelessComparisonPredicate.Equals(System.Object)">
            <summary>
            Override Equals so that this object will be equal to the given object
            if the two have the same runtime type.
            </summary>
            <param name="obj">Object to compare agains tthis object.</param>
            <returns>True if obj has the same runtime type as this object.</returns>
        </member>
        <member name="M:ExplorerFramework.StatelessComparisonPredicate.GetHashCode">
            <summary>
            Override GetHashCode so that this object's hash code is determined by
            its type.
            </summary>
            <returns>A hash code for this object.</returns>
        </member>
        <member name="T:ExplorerFramework.ComparisonRegistry">
            <summary>
            Maintains a map of valid IComparisonPredicates, keyed by property type and 
            by specific PropertyDescriptor.
            </summary>
            <remarks>
            <para>
            This base class gives a general registry for common types. To register specific 
            comparisons for a type or PropertyDescriptor for a specific Explorer 
            implementation, inherit this class to create a specialized registry.
            </para>
            <para>
            IComparisonPredicates may be registered for a general property type, or for
            a specific PropertyDescriptor. Registering for a specific PropertyDescriptor
            makes it possible to provide a set of specialized comparisons to be used
            for that particular PropertyDescriptor.
            </para>
            </remarks>
        </member>
        <member name="P:ExplorerFramework.ComparisonRegistry.GeneralRegistry">
            <summary>
            Shared instance for the general registry for common types.
            </summary>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.Register(System.Type,ExplorerFramework.IComparisonPredicate)">
            <summary>
            Register an IComparisonPredicate against a given property type.
            </summary>
            <param name="propertyType">Key.</param>
            <param name="comparison">IComparisonPredicate to register against the given type.</param>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.Register(System.Type,System.Collections.Generic.IEnumerable{ExplorerFramework.IComparisonPredicate})">
            <summary>
            Register a list of IComparisonPredicates against a given property type.
            </summary>
            <param name="propertyType">Key.</param>
            <param name="comparisons">IComparisonPredicates to register against the given type.</param>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.Register(System.ComponentModel.PropertyDescriptor,ExplorerFramework.IComparisonPredicate)">
            <summary>
            Register an IComparisonPredicate against a specific PropertyDescriptor.
            </summary>
            <param name="property">Key.</param>
            <param name="comparison">
            IComparisonPredicate to register against the given PropertyDescriptor.
            </param>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.Register(System.ComponentModel.PropertyDescriptor,System.Collections.Generic.IEnumerable{ExplorerFramework.IComparisonPredicate})">
            <summary>
            Register a list of IComparisonPredicates against a specific PropertyDescriptor.
            </summary>
            <param name="property">Key.</param>
            <param name="comparisons">
            IComparisonPredicates to register against the given PropertyDescriptor.
            </param>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.Unregister(System.Type,ExplorerFramework.IComparisonPredicate)">
            <summary>
            Remove an IComparisonPredicate from the list of comparisons for the given type.
            </summary>
            <param name="propertyType">Key.</param>
            <param name="comparison">
            IComparisonPredicate to disassociate from the given property type.
            </param>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.Unregister(System.Type,System.Collections.Generic.IEnumerable{ExplorerFramework.IComparisonPredicate})">
            <summary>
            Remove a list of IComparisonPredicates from the list of comparisons for the given type.
            </summary>
            <param name="propertyType">Key.</param>
            <param name="comparisons">
            IComparisonPredicates to disassociate from the given property type.
            </param>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.Unregister(System.ComponentModel.PropertyDescriptor,ExplorerFramework.IComparisonPredicate)">
            <summary>
            Remove an IComparisonPredicate from the list of comparisons for a specific PropertyDescriptor.
            </summary>
            <remarks>
            Note that this only works for IComparisonPredicates specifically registered
            against the PropertyDescriptor.
            </remarks>
            <param name="property">Key.</param>
            <param name="comparison">
            IComparisonPredicate to disassociate from the given PropertyDescriptor.
            </param>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.Unregister(System.ComponentModel.PropertyDescriptor,System.Collections.Generic.IEnumerable{ExplorerFramework.IComparisonPredicate})">
            <summary>
            Remove a list of IComparisonPredicates from the list of comparisons 
            for a specific PropertyDescriptor.
            </summary>
            <remarks>
            Note that this only works for IComparisonPredicates specifically registered
            against the PropertyDescriptor.
            </remarks>
            <param name="property">Key.</param>
            <param name="comparisons">
            IComparisonPredicates to disassociate from the given PropertyDescriptor.
            </param>
        </member>
        <member name="P:ExplorerFramework.ComparisonRegistry.NumericTypes">
            <summary>
            List of recongized NumericTypes.
            </summary>
            <remarks>
            The GeneralRegistry and the method RegisterDefaultComparisons associate
            each of these types with the set of Decimal comparisons in ExplorerFramework.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.GetComparisons(System.Type)">
            <summary>
            Get the list of IComparisonPredicates registered for the given type.
            </summary>
            <remarks>
            Note that this does not walk up the inheritance hierarchy for the given
            type.
            </remarks>
            <param name="propertyType">Key.</param>
            <returns>The list of IComparisonPredicates registered for the given type, 
            or null if the type is not in the registry.</returns>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.GetComparisons(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Get the list of IComparisonPredicates registered for the given PropertyDescriptor.
            </summary>
            <remarks>
            Note that this does not check the property's PropertyType, it is up to the
            client to call GetComparisons(Type) if desired.
            </remarks>
            <param name="property">Key.</param>
            <returns>The list of IComparisonPredicates registered for the PropertyDescriptor, 
            or null if the PropertyDescriptor is not in the registry.</returns>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.#ctor">
            <summary>
            Construtor.
            </summary>
        </member>
        <member name="M:ExplorerFramework.ComparisonRegistry.RegisterDefaultComparisons">
            <summary>
            Registers comparisons from ExplorerFramework for the default recognized 
            types (String, bool, NumericTypes, System.Drawing.Color).
            </summary>
            <remarks>
            RegisterDefaultComparisons is not called by default for derived registries.
            Deriving classes may call RegisterDefaultComparisons to populate the 
            registry if desired.
            </remarks>
        </member>
        <member name="T:ExplorerFramework.ConditionFilterItem">
            <summary>
            Determines if an item should be filtered out by comparing an object's 
            current property value against some reference value using a 
            comparison predicate.
            </summary>
        </member>
        <member name="F:ExplorerFramework.ConditionFilterItem.PropertyPropertyName">
            <summary>
            Name for the Property property.
            </summary>
        </member>
        <member name="P:ExplorerFramework.ConditionFilterItem.Property">
            <summary>
            PropertyDescriptor used to get the current value to compare from the
            object being evaluated.
            </summary>
            <remarks>
            The current property value is always the left-hand side argument for the 
            comparison evaluation.
            </remarks>
        </member>
        <member name="F:ExplorerFramework.ConditionFilterItem.ComparisonPropertyName">
            <summary>
            Name for the Comparison property.
            </summary>
        </member>
        <member name="P:ExplorerFramework.ConditionFilterItem.Comparison">
            <summary>
            Comparison to perform between the object being evaluated's current 
            property value and the reference value.
            </summary>
            <remarks>
            During an evaluation, the comparison's left-hand side argument is the 
            current property value, and the comparison's right-hand side argument is
            the reference value.
            </remarks>
        </member>
        <member name="F:ExplorerFramework.ConditionFilterItem.ReferenceValuePropertyName">
            <summary>
            Name for the ReferenceValue property.
            </summary>
        </member>
        <member name="P:ExplorerFramework.ConditionFilterItem.ReferenceValue">
            <summary>
            Value against which to compare the current property value to evaluate
            an object.
            </summary>
            <remarks>
            ReferenceValue is always the right-hand side argument when evaluating the
            current object.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.ConditionFilterItem.Filter(ExplorerFramework.TraversalNode)">
            <summary>
            Determines if a node should be filtered by evaluating the Comparison
            for the node's current value for Property against the ReferenceValue.
            Filters out nodes for which the Comparison returns false.
            </summary>
            <param name="node">Node to evaluate for filtering.</param>
            <returns>
            True if the Comparison evaluates to false and the node should be filtered out.
            False if the node should be kept.
            </returns>
        </member>
        <member name="T:ExplorerFramework.DataFacade">
            <summary>
            Provides a database table facade over a data set, representing the data 
            model in an Explorer.
            </summary>
            <remarks>
            See <see cref="T:ExplorerFramework.Explorer">Explorer</see> for a description of the
            Explorer architecture.
            </remarks>
            <seealso cref="T:ExplorerFramework.Explorer"/>
        </member>
        <member name="M:ExplorerFramework.DataFacade.#ctor">
            <summary>
            Construct a facade with a null Traversal and a default PropertyRegistry.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.#ctor(System.String,ExplorerFramework.Traversal)">
            <summary>
            Construct with a name, a traversal, and a default PropertyRegistry.
            </summary>
            <remarks>
            Note that for performance reasons, the Traversal is not run until requested
            by an explicit ResetTraversalList call.
            </remarks>
            <param name="name">Name representing this data set.</param>
            <param name="traversal">Traversal used to access the data set.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.#ctor(System.String,ExplorerFramework.Traversal,ExplorerFramework.PropertyRegistry)">
            <summary>
            Construct with a name, a traversal, and a set of exposed properties.
            </summary>
            <remarks>
            Note that for performance reasons, the Traversal is not run until requested
            by an explicit ResetTraversalList call.
            </remarks>
            <param name="name">Name representing this data set.</param>
            <param name="traversal">Traversal used to access the data set.</param>
            <param name="properties">Set of properties exposed on this data set.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.Dispose">
            <summary>
            Release the resources held by this object.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.IsDisposed">
            <summary>
            Was this object disposed?
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.ReleaseTraversalNodes">
            <summary>
            Clears out all TraversalNodes, releasing any references they may hold
            to native resources.
            </summary>
            <remarks>
            ReleaseTraversalNodes exists as performance optimization to call 
            DropReferences on all TraversalNodes and discard them, but without 
            Disposing the DataFacade or its FilterModel. The DataFacade can still be 
            used as before as long as the client calls ResetTraversalList.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.DataFacade.KeyFieldName">
            <summary>
            Field name for value used as a primary key for each data element.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.ParentFieldName">
            <summary>
            Field name for value used as a parent key for each data element.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.PropertyRegistry">
            <summary>
            Set of properties exposed on this data set.
            </summary>
            <remarks>
            DataFacade subscribes to its PropertyRegistry's RegistryChanged event. If
            the registry changes, DataFacade will notify its own observers.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.DataFacade.HandleRegistryChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handle a notification that the set of exposed properties has changed.
            </summary>
            <remarks>
            This implementation notifies this DataFacade's observers that the set
            of available properties has changed.
            </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">
            Information about this event.  Expected to hold a reference to the 
            changed property.
            </param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Reorder the elements in this list.
            </summary>
            <param name="sorts">Specifies how to sort the elements.</param>
        </member>
        <member name="P:ExplorerFramework.DataFacade.FilterModel">
            <summary>
            Model object containing the current filters on this data set.
            </summary>
            <remarks>
            <para>
            DataFacade subscribes to its FilterModel's FilterChanged event.
            </para>
            <para>
            The FilterModel is used to filter the node list returned by the traversal
            to create the final list of elements exposed through this facade.
            </para>
            </remarks>
        </member>
        <member name="P:ExplorerFramework.DataFacade.SortDescriptions">
            <summary>
            The current sort ordering specification.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Inherited from the IBindingList interface. Not supported.
            </summary>
            <param name="property">Not used.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.System#ComponentModel#IBindingList#AddNew">
            <summary>
            Inherited from the IBindingList interface.  Not supported.
            </summary>
            <returns>Nothing.  This method will throw.</returns>
        </member>
        <member name="P:ExplorerFramework.DataFacade.AllowEdit">
            <summary>
            Always true.  The nodes may be edited.
            </summary>
            <remarks>
            Implements IBindingList interface.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.DataFacade.AllowNew">
            <summary>
            Always false.  Data set changes must occur through the Traversal.
            </summary>
            <remarks>
            Implements IBindingList interface.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.DataFacade.AllowRemove">
            <summary>
            Always false.  Data set changes must occur through the Traversal.
            </summary>
            <remarks>
            Implements IBindingList interface.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.DataFacade.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Apply a sort on a single property.
            </summary>
            <remarks>
            Implements IBindingList interface.
            </remarks>
            <param name="property">
            The property by which to sort.
            </param>
            <param name="direction">
            The direction in which to order the elements.
            </param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Search for the first node with a given single property value.
            </summary>
            <param name="property">The property to check on each element.</param>
            <param name="key">The property value to find.</param>
            <returns>
            The index of first node whose value for the given property matches the 
            key. -1 if no matching node is found.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.FindIndex(System.Predicate{ExplorerFramework.TraversalNode})">
            <summary>
            Find the first node matching the given test.
            </summary>
            <param name="predicate">
            Used to evaluate the nodes, this defines the search conditions.
            </param>
            <returns>
            The index of first node matching the conditions defined by the predicate.
            -1 if no matching node is found.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.Find(System.Predicate{ExplorerFramework.TraversalNode})">
            <summary>
            Find the first node matching the given test.
            </summary>
            <param name="predicate">
            Used to evaluate the nodes, this defines the search conditions.
            </param>
            <returns>
            The first node matching the conditions defined by the predicate.
            null if no matching node is found.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.FindAll(System.Predicate{ExplorerFramework.TraversalNode})">
            <summary>
            Find all nodes matching the given test.
            </summary>
            <param name="predicate">
            Used to evaluate the nodes, this defines the search conditions.
            </param>
            <returns>
            A list of nodes matching the conditions defined by the predicate.
            If no matching node is found, an empty list is returned.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.FindIndexList(System.Predicate{ExplorerFramework.TraversalNode})">
            <summary>
            Get a list of indices for all nodes for which the predicate evaluates to
            true.
            </summary>
            <param name="predicate">
            Used to evaluate the nodes, this defines the search conditions.
            </param>
            <returns>
            A list of indices for all nodes matching the conditions defined by the 
            predicate. If no matching node is found, an empty list is returned.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.FindByKey(System.Object)">
            <summary>
            Find a node by its ID value.
            </summary>
            <param name="keyId">
            A TraversalNode.ID value to use as a search key.
            </param>
            <returns>
            The TraversalNode whose ID matches the given key.  
            null if it is not found.
            </returns>
        </member>
        <member name="P:ExplorerFramework.DataFacade.IsSorted">
            <summary>
            Was a sort applied to these elements?
            </summary>
            <remarks>
            Implements IBindingList interface.
            </remarks>
        </member>
        <member name="E:ExplorerFramework.DataFacade.TraversalNodeItemChanged">
            <summary>
            Signals that a TraversalNode in the list has changed.
            </summary>
        </member>
        <member name="E:ExplorerFramework.DataFacade.ListReset">
            <summary>
            Signals that the list reset is complete. 
            </summary>
            <remarks>
            The old node list will be disposed after all ListReset handlers have run.
            </remarks>
        </member>
        <member name="E:ExplorerFramework.DataFacade.ListResetting">
            <summary>
            Signals that the list is about to be reset. 
            </summary>
        </member>
        <member name="E:ExplorerFramework.DataFacade.PropertyRegistryChanged">
            <summary>
            Signals that the set of exposed data properties has changed.
            </summary>
        </member>
        <member name="E:ExplorerFramework.DataFacade.ListChanged">
            <summary>
            Signals that something about this list has changed.
            </summary>
            <remarks>
            Registering to ListChanged is equivalent to registering to all of 
            TraversalNodeItemChanged, ListReset, and PropertyRegistryChanged, 
            but more abstract.  It exists to support the IBindingList interface.
            </remarks>
        </member>
        <member name="E:ExplorerFramework.DataFacade.mListResetChanged">
            <summary>
            Signals that this list was succefully reset. 
            </summary>
            <remarks>
            This will finally call ListChanged event. Notice this is different with ListReset.
            Client should listen ListChanged event and update critical data, then use ListReset 
            do logical changes.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.DataFacade.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Inherited from the IBindingList interface. Not supported.
            </summary>
            <param name="property">Not used.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.System#ComponentModel#IBindingList#RemoveSort">
            <summary>
            Inherited from the IBindingList interface. Not supported.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.SortDirection">
            <summary>
            The sort direction for the first sort column.
            </summary>
            <remarks>
            Implements IBindingList interface.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.DataFacade.SortProperty">
            <summary>
            The first sort column.
            </summary>
            <remarks>
            Implements IBindingList interface.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.DataFacade.SupportsChangeNotification">
            <summary>
            Indicates if this data source signals its observers of list changes. 
            Always true.
            </summary>
            <remarks>
            Implements IBindingList interface.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.DataFacade.SupportsSearching">
            <summary>
            Indicates if this data source supports its Find methods.  Always true.
            </summary>
            <remarks>
            Implements IBindingList interface.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.DataFacade.SupportsSorting">
            <summary>
            Indicates if this data source supports sorting.  Always true.
            </summary>
            <remarks>
            Implements IBindingList interface.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.DataFacade.System#Collections#IList#Add(System.Object)">
            <summary>
            Inherited from the IBindingList interface. Not supported.
            </summary>
            <param name="value">Not used.</param>
            <returns>Nothing.  Always throws an exception.</returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.System#Collections#IList#Clear">
            <summary>
            Inherited from the IBindingList interface. Not supported.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.Contains(System.Object)">
            <summary>
            Determine if this list contains the given object.
            </summary>
            <param name="value">
            TraversalNode instance to check for membership in this list.
            </param>
            <exception cref="T:System.InvalidCastException">
            If value is not a TraversalNode.
            </exception>
            <returns>
            true if this list contains value, false otherwise.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.IndexOf(System.Object)">
            <summary>
            Find the index of the given object in this list.
            </summary>
            <param name="value">
            TraversalNode instance to find in this list.
            </param>
            <exception cref="T:System.InvalidCastException">
            If value is not a TraversalNode.
            </exception>
            <returns>
            The given object's index in the list if it is found.  -1 otherwise.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inherited from the IBindingList interface. Not supported.
            </summary>
            <param name="index">Not used.</param>
            <param name="value">Not used.</param>
        </member>
        <member name="P:ExplorerFramework.DataFacade.IsFixedSize">
            <summary>
            Returns true because client code is not able to change the list size.
            However, if the Traversal is reset, the number of elements may change.
            </summary>
            <remarks>
            Implements IList interface.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.DataFacade.IsReadOnly">
            <summary>
            Returns true since element membership may not be directly modified.
            </summary>
            <remarks>
            Implements IList interface.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.DataFacade.System#Collections#IList#Remove(System.Object)">
            <summary>
            Inherited from the IBindingList interface. Not supported.
            </summary>
            <param name="value">Not used.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Inherited from the IBindingList interface. Not supported.
            </summary>
            <param name="index">Not used</param>
        </member>
        <member name="P:ExplorerFramework.DataFacade.Item(System.Int32)">
            <summary>
            Access the TraversalNode at index.
            </summary>
            <remarks>
            Since there are no covariant return types in .NET, this is a new method
            returning TraversalNodes on this class's list item accessor.
            </remarks>
            <param name="index">
            Index within this list for the desired element.
            </param>
            <returns>
            The TraversalNode at index.
            </returns>
        </member>
        <member name="P:ExplorerFramework.DataFacade.System#Collections#IList#Item(System.Int32)">
            <summary>
            Access the element at index.
            </summary>
            <remarks>
            The original IList method, forwards to the version returning a 
            TraversalNode.
            </remarks>
            <param name="index">
            Index within this list for the desired element.
            </param>
            <returns>
            The TraversalNode at index.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy this list into the target array, starting at index.
            </summary>
            <param name="array">
            Destination array for this list's elements.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="P:ExplorerFramework.DataFacade.Count">
            <summary>
            Number of elements in this list.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.IsSynchronized">
            <summary>
            Indicates whether access to the ICollection is synchronized (thread safe). 
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection. 
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator for iterating over the elements in this list.
            </summary>
            <returns>
            An enumerator for iterating over the elements in this list.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.GetEnumerator">
            <summary>
            Get an enumerator for iterating over the elements in this list.
            </summary>
            <returns>
            An enumerator for iterating over the elements in this list.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Get the list of properties exposed for the elements in this list.
            </summary>
            <param name="listAccessors">Not used.</param>
            <returns>
            The list of properties exposed for the elements in this list.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.GetItemProperties">
            <summary>
            Get the list of properties exposed for the elements in this list.
            </summary>
            <returns>
            The list of properties exposed for the elements in this list.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Get the name for this list.
            </summary>
            <param name="listAccessors">Not used.</param>
            <returns>this.Name</returns>
        </member>
        <member name="P:ExplorerFramework.DataFacade.Name">
            <summary>
            Access the name for this DataFacade.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.Traversal">
            <summary>
            Access the Traversal used to discover the underlying data set.
            </summary>
        </member>
        <member name="E:ExplorerFramework.DataFacade.TraversalDirty">
            <summary>
            Signals that the data set's tree structure has changed and the 
            Traversal must be re-run using ResetTraversalList.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.HandleFilterChanged(System.Object,System.EventArgs)">
            <summary>
            Refreshes the node list by passing the unfiltered list through the 
            filter again.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.HandleTraversalChanged(System.Object,System.EventArgs)">
            <summary>
            Notifies observers that the data's tree structure has changed and that
            the Traversal list must be reset.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.HandleNodePropertyChanged(System.Object,System.EventArgs)">
            <summary>
            Receives notification that a node's property value has changed.
            </summary>
            <remarks>
            Rechecks the changed node against the current filter and notifies
            observers of a traversal change if its membership in the filtered list 
            should change.  Otherwise, if the changed node is a member of the 
            filtered list, notifies observers that the node has changed.
            </remarks>
            <param name="sender">The source of the event: the changed node</param>
            <param name="e">Data about the event.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.ResetTraversalList">
            <summary>
            Run the Traversal again, resetting this list of elements.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.IncludeTraversalRoot">
            <summary>
            Indicates whether the Traversal's root node should be included in the
            final list.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.IncludeFilteredParents">
            <summary>
            Indicates whether filtered out parent nodes should be included in the
            filtered list if their descendant nodes pass the filter.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.IgnoreFilters">
            <summary>
            If on this ignores all object filters. All object are displayed.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.DataModelDirty">
            <summary>
            Records that the underlying data model has changed, and when set to true 
            signals observers that the list must be reset.
            </summary>
        </member>
        <member name="P:ExplorerFramework.DataFacade.FilteredListDirty">
            <summary>
            Records that the filtered list needs to be updated, but the underlying
            data model has not changed.  When set to true, signals observers that
            the list must be reset.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.OnTraversalDirty">
            <summary>
            Raise a TraversalDirty event.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.OnTraversalNodeItemChanged(ExplorerFramework.TraversalNodeItemChangedEventArgs)">
            <summary>
            Raise a TraversalNodeItemChanged event.
            </summary>
            <param name="e">Data about the event to pass to observers.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.RaiseTraversalNodeItemChanged(ExplorerFramework.TraversalNode)">
            <summary>
            Raise a TraversalNodeItemChanged event.
            </summary>
            <param name="changedNode">The node that changed, causing this event.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.OnListReset(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raise a ListReset event.
            </summary>
            <param name="e">Data about the event to pass to observers.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.RaiseListReset">
            <summary>
            Raise a ListReset event.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.OnListResetting">
            <summary>
            Raise a ListResetting event.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.OnPropertyRegistryChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raise a PropertyRegistryChanged event.
            </summary>
            <param name="e">Data about the event to pass to observers.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.Dispose(System.Boolean)">
            <summary>
            Release resources held by this object.
            </summary>
            <param name="disposing">
            should be true if calling from Dispose, false if finalizing
            </param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.BindNode(ExplorerFramework.TraversalNode)">
            <summary>
            Bind event handlers to this node and add it to the index.
            </summary>
            <param name="node">Node to bind.</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.DiscardNode(ExplorerFramework.TraversalNode)">
            <summary>
            Discard an old node from this DataFacade it.
            </summary>
            <remarks>
            This method undoes most of the work done by BindNode, but does not
            remove it from mNodeIndex.  That has to be done separately, usually 
            more efficiently through a call to mNodeIndex.Clear().
            </remarks>
            <param name="node">Node to discard</param>
        </member>
        <member name="M:ExplorerFramework.DataFacade.ApplyFilter">
            <summary>
            Apply the current filter configuration in the FilterModel to the 
            unfiltered list to produce the final list presented to clients through 
            this facade.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.AddParentsToFilteredList">
            <summary>
            For all nodes in the filtered list, add all parent and ancestor nodes to
            the filtered list.
            </summary>
        </member>
        <member name="M:ExplorerFramework.DataFacade.NodePassesFilter(ExplorerFramework.TraversalNode)">
            <summary>
            Reevaluate the given node to determine if it passes the current filter.
            </summary>
            <param name="node">Node to evaluate.</param>
            <returns>
            true if the given node passes the current filter configuration, taking
            into consideration the current IncludeFilteredParents policy.
            false otherwise
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.GetUnfilteredTraversalList">
            <summary>
            Get the current unfiltered node list generated by the Traversal.  This
            method should be used instead of accessing the mTraversalNodeList member
            directly.
            </summary>
            <returns>The node list generated by the traversal.</returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.GetFilteredTraversalList">
            <summary>
            Get the current filtered node list resulting from filtering the 
            unfiltered node list generated from the Traversal.  This method should be
            used instead of accessing the mFilteredList member directly.
            </summary>
            <returns>
            A node list resulting from filtering the list generated by the Traversal.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.GetTraversalList">
            <summary>
            Get the appropriate node list resulting from the current filtering and
            policy configuration.  
            </summary>
            <remarks>
            This is the list to present to DataFacade clients. This method should be 
            used for most access to the node list.  GetUnfilteredTraversalList and
            GetFilteredTraversalList are available for specific access to the 
            original or filtered lists.  These methods should be preferred over 
            accessing the data members directly.
            </remarks>
            <returns>
            The appropriate node list resulting from the current filtering and
            policy configuration.
            </returns>
        </member>
        <member name="M:ExplorerFramework.DataFacade.CacheTraversalListIndices">
            <summary>
            Cache each node's index in the result traversal list, the list presented
            to DataFacade clients, inside the node.
            </summary>
            <remarks>
            Each node's index in the list presented to the view is cached inside the
            node.  This is called when the list is updated either by a reset due to a
            traversal change or when a new filter is applied.  This cached value is
            used as an optimization to find a node in the final list or in the view's
            list built off of that.  (For example, these map directly to the 
            TreeList's Id values.)
            </remarks>
        </member>
        <member name="M:ExplorerFramework.DataFacade.ResetCachedTraversalListIndices">
            <summary>
            Clear the cached information in each of the TraversalNodes.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mSortSpecification">
            <summary>
            Current sorting configuration.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mTraversalNodeList">
            <summary>
            Node list returned from Traversal.RunTraversal.  This is the original,
            unfiltered list.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mFilteredList">
            <summary>
            Node list resulting from running mTraversalNodeList through the filter.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mNodeIndex">
            <summary>
            Index mapping each node's ID to the node itself.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mTraversal">
            <summary>
            Traversal used to discover the data set and generate the TraversalNode
            list.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mName">
            <summary>
            This data set's name.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mPropertyRegistry">
            <summary>
            Set of PropertyDescriptors defining the data properties exposed on the
            TraversalNodes wrapping the current data set elements.
            </summary>
            <remarks>
            The set of properties in this registry may change at runtime, and this
            facade will update and notify its observers.
            </remarks>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mFilterModel">
            <summary>
            Filter configuration model.  Used to filter the node list produced by
            the Traversal and generate the final list presented to clients.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mDisposed">
            <summary>
            Indicates if this object was disposed.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mIncludeTraversalRoot">
            <summary>
            Filtering policy indicating whether or not to include the traversal 
            root node in the final list presented to clients.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mIncludeFilteredParents">
            <summary>
            Filtering policy indicating whether or not to have the final list include
             all parent and ancestor nodes for any node passing the filter 
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mDataModelDirty">
            <summary>
            Indicates that the underlying data set is dirty and must be refreshed 
            from the Traversal.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mFilteredListDirty">
            <summary>
            Indicates that the filtered list is dirty and must be reset by running
            the unfiltered list through the filter.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mIsResettingTraversalList">
            <summary>
            Prevent datafacade from recusive call of ResetTraversalList.
            </summary>
        </member>
        <member name="F:ExplorerFramework.DataFacade.mIgnoreFilters">
            <summary>
            Indicates if the object filters are ignored. If ignored, all objects will be displayed in the tree.
            </summary>
        </member>
        <member name="T:ExplorerFramework.Explorer">
            <summary>
            Concrete Explorer instances must implement this interface to provide 
            Commands and other components with access to the current data set and 
            selection list.
            </summary>
            <remarks>
            <para>
            To create an Explorer, the programmer must provide a concrete Traversal
            implementation, a concrete TraversalNode implementation and the desired
            PropertyDescriptors and Commands.  The programmer must then provide the
            Traversal and PropertyDescriptor instances to a DataFacade to create the
            model.  See MaxCustomControls.ExplorerControl for the standard Explorer view
            taking a DataFacade.  Commands are provided to the view to expose controller
            functionality to the user.
            </para>
            <para>
            The TraversalNode instances wrap the individual data elements presented in
            the Explorer.
            </para>
            <para>
            The Traversal must traverse the data element set and construct the wrapping
            TraversalNodes, linking them together to create the tree structure.
            </para>
            <para>
            The PropertyDescriptors provide accessors for reading and writing data
            property values on the data elements.
            </para>
            <para>
            Commands provide data manipulation operations to the user or to client code.
            </para>
            </remarks>
            <seealso cref="T:ExplorerFramework.Command"/>
            <seealso cref="P:ExplorerFramework.Explorer.DataFacade"/>
            <seealso cref="T:ExplorerFramework.Traversal"/>
            <seealso cref="T:ExplorerFramework.TraversalNode"/>
        </member>
        <member name="M:ExplorerFramework.Explorer.GetSelectedNodes(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get the list of selected nodes for iteration.
            </summary>
            <param name="onlyMaxNodes">Whether to only return selected explorer nodes wrapping max scene nodes</param>
            <param name="excludeSceneXRefNodes">Whether not to return selected nodes wrapping max scene nodes that are scene xref nodes</param>
            <param name="excludeRootNodes">Whether not to return selected nodes wrapping max scene nodes that are RootNodes</param>
            <returns>
            A new array containing the nodes currently selected in this explorer.
            </returns>
            <remarks>
            WARNING: detects nodes by casting TraversalNode to INodeTraversalNodeBase. But INodeTraversalNodeBase is used only by scene explorer, it is not
            used by Crease Explorer or Material Explorer. See MAXX-21122
            </remarks>
        </member>
        <member name="M:ExplorerFramework.Explorer.GetSelectedNodeCount(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get the current count of selected nodes.
            </summary>
            <param name="onlyMaxNodes">Whether to only count selected nodes wrapping max scene nodes</param>
            <param name="excludeSceneXRefNodes">Whether not to count selected nodes wrapping max scene nodes that are scene xref nodes</param>
            <param name="excludeRootNodes">Whether not to count selected nodes wrapping max scene nodes that are RootNodes</param>
            <remarks>
            If called with onlyMaxNodes=true or excludeSceneXRefNodes=true or excludeRootNodes=true, this needs to examine all nodes, so it may be expensive.
            </remarks>
            <returns>
            The number of nodes currently marked as selected in this explorer.
            </returns>
            <remarks>
            WARNING: detects nodes by casting TraversalNode to INodeTraversalNodeBase. But INodeTraversalNodeBase is used only by scene explorer, it is not
            used by Crease Explorer or Material Explorer. See MAXX-21122
            </remarks>
        </member>
        <member name="M:ExplorerFramework.Explorer.HasSelectedNodes(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns whether any explorer node is selected.
            </summary>
            <param name="onlyMaxNodes">Whether to only consider selected nodes wrapping max scene nodes</param>
            <param name="excludeSceneXRefNodes">Whether not to consider selected nodes wrapping max scene nodes that are scene xref nodes</param>
            <param name="excludeRootNodes">Whether not to consider selected nodes wrapping max scene nodes that are RootNodes</param>
            <returns>
            Whether any nodes are currently marked as selected in this explorer.
            </returns>
            <remarks>
            WARNING: detects nodes by casting TraversalNode to INodeTraversalNodeBase. But INodeTraversalNodeBase is used only by scene explorer, it is not
            used by Crease Explorer or Material Explorer. See MAXX-21122
            </remarks>
        </member>
        <member name="M:ExplorerFramework.Explorer.IsNodeSelected(ExplorerFramework.TraversalNode)">
            <summary>
            Is the given node currently selected in this explorer?
            </summary>
            <param name="node">Node to examine</param>
            <returns>
            true if this node is marked as selected, false otherwise.
            </returns>
        </member>
        <member name="M:ExplorerFramework.Explorer.SelectNode(ExplorerFramework.TraversalNode)">
            <summary>
            Add a node to the set of nodes marked as selected in this explorer.
            </summary>
            <param name="node">
            A node from this explorer's node population to add to the list of 
            selected nodes.
            </param>
        </member>
        <member name="M:ExplorerFramework.Explorer.DeselectNode(ExplorerFramework.TraversalNode)">
            <summary>
            Remove a node from the set of nodes marked as selected in this explorer.
            </summary>
            <param name="node">
            A node from this explorer's node population to remove from to the list of 
            selected nodes.
            </param>
        </member>
        <member name="M:ExplorerFramework.Explorer.SelectNodes(System.Collections.Generic.IEnumerable{ExplorerFramework.TraversalNode})">
            <summary>
            Add a list of nodes to the set of nodes marked as selected in this
            explorer.
            </summary>
            <param name="nodeList">
            An enumerable list of nodes from this explorer's node population to add 
            to the list of selected nodes.
            </param>
        </member>
        <member name="M:ExplorerFramework.Explorer.DeselectNodes(System.Collections.Generic.IEnumerable{ExplorerFramework.TraversalNode})">
            <summary>
            Remove a list of nodes from the set of nodes marked as selected in 
            this explorer.
            </summary>
            <param name="nodeList">
            An enumerable list of nodes from this explorer's node population to  
            remove from the list of selected nodes.
            </param>
        </member>
        <member name="M:ExplorerFramework.Explorer.SetSelectedNodes(System.Collections.Generic.IEnumerable{ExplorerFramework.TraversalNode})">
            <summary>
            Set the list of selected nodes.
            </summary>
            <remarks>
            This produces the same result as ClearNodeSelection followed by 
            SelectNodes, but avoids an intermediate update event.
            </remarks>
            <param name="nodeList">
            An enumerable list of nodes from this explorer's node population to  
            remove from the list of selected nodes.
            </param>
        </member>
        <member name="M:ExplorerFramework.Explorer.ClearNodeSelection">
            <summary>
            Deselect any selected nodes in this explorer.
            </summary>
        </member>
        <member name="P:ExplorerFramework.Explorer.FocusedNode">
            <summary>
            The single node with explicit focus.
            </summary>
            <remarks>
            In an explorer UI, this may be the node with the current keyboard focus
            or the dropped-on target node in a drag and drop operation.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.Explorer.BackgroundCommandRunner">
            <summary>
            Runs Cancelable Commands in a background thread for this explorer.
            </summary>
        </member>
        <member name="P:ExplorerFramework.Explorer.DataFacade">
            <summary>
            The data set exposed by this explorer.
            </summary>
            <remarks>
            Note that the DataFacade received from an Explorer is owned by that Explorer
            and will be Disposed by the owning Explorer.  It is an error to hold on
            to a DataFacade reference for longer than a transient operation.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.Explorer.ExplorerName">
            <summary>
            The name of the explorer.
            </summary>
        </member>
        <member name="M:ExplorerFramework.Explorer.FocusAndRename(System.Int32)">
            <summary>
            causes the explorer to focus on the node matching refod and go into rename mode 
            </summary>
            <param name="refID">
            the reference ID of the node you want to focus and rename
            </param>
        </member>
        <member name="M:ExplorerFramework.Explorer.FindSelected">
            <summary>
            Reveals the next selected node by expanding all of its parent nodes and
            vertically scroll so it is visible.
            <remarks>
            The first call reveals the first selected node.  Any selection change resets
            the next call to the first selected node
            </remarks>
            </summary>
        </member>
        <member name="T:ExplorerFramework.Command">
            <summary>
            Abstract base class for Commands that can be performed by an Explorer.
            </summary>
            <remarks>
            <para>
            Commonly, Commands appear as right-click menu or drag and drop operations
            in an Explorer's UI.
            </para>
            See <see cref="P:ExplorerFramework.Command.Explorer">Explorer</see> for a description of the
            Explorer architecture.
            </remarks>
            <seealso cref="P:ExplorerFramework.Command.Explorer"/>
        </member>
        <member name="P:ExplorerFramework.Command.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="P:ExplorerFramework.Command.Name">
            <summary>
            This Command's name.
            </summary>
            <remarks>
            For example, the Name may appear as a menu item's text in an Explorer UI.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.Command.Cancelable">
            <summary>
            Can this Command handle being canceled while it is running?
            </summary>
            <remarks>
            This should not change during a Command's execution.  It is usually
            called before a Command is started.  An Explorer UI may present a
            Please wait.../Cancel dialog to the user while a Cancelable Command is
            running.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.Command.IsValid">
            <summary>
            Given the current Explorer configuration and data set, would executing
            this Command be a valid operation?
            </summary>
            <remarks>
            An Explorer UI may use IsValid to determine whether to present a Command
            menu item as enabled or disabled.
            </remarks>
            <returns>
            true if executing this command would be a valid operation.  false
            otherwise.
            </returns>
        </member>
        <member name="M:ExplorerFramework.Command.Execute">
            <summary>
            Run this Command.
            </summary>
        </member>
        <member name="M:ExplorerFramework.Command.Cancel">
            <summary>
            Cancel this Command.  This may be implemented as a no-op or throw an
            exception if Cancelable reports false.
            </summary>
        </member>
        <member name="F:ExplorerFramework.Command.mExplorer">
            <summary>
            This Command's Explorer context.
            </summary>
        </member>
        <member name="T:ExplorerFramework.FilterItem">
            <summary>
            Abstract base class partially implementing IFilterItem. FilterItem implements
            the Enabled property and manages its state, including implementing 
            the INotifyPropertyChanged interface.
            </summary>
        </member>
        <member name="F:ExplorerFramework.FilterItem.EnabledPropertyName">
            <summary>
            Property Name for the Enabled property.
            </summary>
        </member>
        <member name="P:ExplorerFramework.FilterItem.Enabled">
            <summary>
            Is this IFilterItem currently enabled? The FilterModel only invokes Filter
            on Enabled items.
            </summary>
        </member>
        <member name="M:ExplorerFramework.FilterItem.Filter(ExplorerFramework.TraversalNode)">
            <summary>
            Remove the given element from the final list?
            </summary>
            <param name="node">The TraversalNode to consider for filtering.</param>
            <returns>
            true if the node is filtered and should be removed from the final list, 
            false if the node passes through the filter.
            </returns>
        </member>
        <member name="E:ExplorerFramework.FilterItem.PropertyChanged">
            <summary>
            Notifies observers that a FilterItem property has changed.
            </summary>
        </member>
        <member name="M:ExplorerFramework.FilterItem.OnPropertyChanged(System.String)">
            <summary>
            Raise a PropertyChanged event for the given property.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:ExplorerFramework.IComparisonPredicate">
            <summary>
            Compares two operands and returns a boolean result. Specific semantics
            are defined by implementing types.
            </summary>
            <remarks>
            To enable serialization, implementing derived types must be public within
            their assembly and must have a public default constructor.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.IComparisonPredicate.Evaluate(System.Object,System.Object)">
            <summary>
            Compare the two given objects.
            </summary>
            <param name="x">The left-hand side argument</param>
            <param name="y">The right-hand side argument</param>
            <returns>
            The result of evaluating the comparison, as defined by the implementing 
            class's semantics.
            </returns>
        </member>
        <member name="P:ExplorerFramework.IComparisonPredicate.DisplayName">
            <summary>
            Descriptive, localized text for this comparison operation to display in
            the UI.
            </summary>
        </member>
        <member name="T:ExplorerFramework.IFilterItem">
            <summary>
            Interface for individual filters in a filter model. Filters remove elements
            from the final list by returning true for Filter.
            </summary>
        </member>
        <member name="P:ExplorerFramework.IFilterItem.Enabled">
            <summary>
            Is this IFilterItem currently enabled? The FilterModel only invokes Filter
            on Enabled items.
            </summary>
        </member>
        <member name="M:ExplorerFramework.IFilterItem.Filter(ExplorerFramework.TraversalNode)">
            <summary>
            Remove the given element from the final list?
            </summary>
            <param name="node">The TraversalNode to consider for filtering.</param>
            <returns>
            true if the node is filtered and should be removed from the final list, 
            false if the node passes through the filter.
            </returns>
        </member>
        <member name="T:ExplorerFramework.FilterModel">
            <summary>
            Manages a set of Filters and their individual enabled/disabled state.
            </summary>
            <remarks>
            <para>
            A FilterModel fires events when its list of enabled filters changes.
            </para>
            <para>
            Filter does the filtering work. Filter returns true when a node should
            be filtered out, or removed from the final list. Filter returns false
            when the node passes through the filter, and should be kept in the final
            list.
            </para>
            <para>
            FilterModel implements IFilterItem, and may therefore be nested.
            </para>
            </remarks>
        </member>
        <member name="M:ExplorerFramework.FilterModel.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:ExplorerFramework.FilterModel.FilterModePropertyName">
            <summary>
            Property name for the FilterMode property.
            </summary>
        </member>
        <member name="P:ExplorerFramework.FilterModel.FilterMode">
            <summary>
            Specifies how to determine if a node passes the filter. 
            The default is FilterMode.PassAll.
            </summary>
        </member>
        <member name="M:ExplorerFramework.FilterModel.AddFilter(ExplorerFramework.IFilterItem)">
            <summary>
            Add a filter to this model.
            </summary>
            <param name="filter">The filter to add.</param>
        </member>
        <member name="M:ExplorerFramework.FilterModel.RemoveFilter(ExplorerFramework.IFilterItem)">
            <summary>
            Remove a filter from this model.
            </summary>
            <param name="filter">The filter to remove</param>
        </member>
        <member name="M:ExplorerFramework.FilterModel.EnableFilterList(System.Collections.Generic.ICollection{ExplorerFramework.IFilterItem})">
            <summary>
            Marks a group of IFilterItems as enabled, firing only a single 
            FilterChanged event when done.
            </summary>
            <param name="filters">
            List of IFilterItems to enable.
            </param>
        </member>
        <member name="M:ExplorerFramework.FilterModel.DisableFilterList(System.Collections.Generic.ICollection{ExplorerFramework.IFilterItem})">
            <summary>
            Marks a group of IFilterItems as enabled, firing only a single 
            FilterChanged event when done.
            </summary>
            <param name="filters">
            List of IFilterItems to enable.
            </param>
        </member>
        <member name="F:ExplorerFramework.FilterModel.FilterListPropertyName">
            <summary>
            Property name for the FilterList property.
            </summary>
        </member>
        <member name="P:ExplorerFramework.FilterModel.FilterList">
            <summary>
            List of IFilterItems. Enabled items are queried during Filter.
            </summary>
        </member>
        <member name="M:ExplorerFramework.FilterModel.Filter(ExplorerFramework.TraversalNode)">
            <summary>
            Remove the given element from the final list?
            </summary>
            <remarks>
            Depending on the FilterMode, Filter asks the enabled IFilterItems in the
            FilterList "filter out this node?" Under FilterMode.PassAll, if any 
            individual IFilterItem.Filter returns true, this method returns true.
            Under FilterMode.PassAny, all IFilterItems must return true for this
            method to return true.
            </remarks>
            <param name="node">The TraversalNode to consider for filtering.</param>
            <returns>
            True if the node is filtered out and should be removed from the final list, 
            and false if the node passes through the filter.
            </returns>
        </member>
        <member name="M:ExplorerFramework.FilterModel.IsAnyFilterEnabled">
            <summary>
            Determine if any filter in this model is currently enabled.
            </summary>
            <remarks>
            Note that if no filter is enabled, this filter model does no filtering
            at all.  All entities just pass through it.  This may be used for 
            optimization.
            </remarks>
            <returns>
            true if a filter is enabled, false if no filters are enabled.
            </returns>
        </member>
        <member name="M:ExplorerFramework.FilterModel.OnFilterChanged">
            <summary>
            Raise a PropertyChanged event for the FilterList.
            </summary>
        </member>
        <member name="M:ExplorerFramework.FilterModel.RefreshFilterCache">
            <summary>
            Rebuild the cache by selecting all currently enabled filters.
            </summary>
        </member>
        <member name="P:ExplorerFramework.FilterModel.LockUpdates">
            <summary>
            Prevents FilterChanged events from firing. Used in EnableFilterList and
            DisableFilterList to only fire a single event at the end.
            </summary>
        </member>
        <member name="F:ExplorerFramework.FilterModel.mEnabledFilterCache">
            <summary>
            Cached list of the currently enabled filters in this filter model.
            Optimizes Evaluate by avoiding looping through disabled filters.
            If null, the cache must be regenerated.
            </summary>
        </member>
        <member name="T:ExplorerFramework.IBounded">
            <summary>
            Tags a numerical property with minimum and maximum bounds.
            </summary>
            <remarks>
            View components, such as spinners, may look for this interface on numerical 
            data elements to constrain allowable input values.
            If applied to a PropertyDescriptor, the PropertyDescriptor is responsible 
              for clamping the value passed to SetValue within the bounds.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.IBounded.GetMaximumBound(ExplorerFramework.TraversalNode)">
            <summary>
            Get the maximum allowable value for the current property on the given node.
            </summary>
            <param name="node">Explorer node data source.</param>
            <returns>The maximum allowable value as an object.</returns>
        </member>
        <member name="M:ExplorerFramework.IBounded.GetMinimumBound(ExplorerFramework.TraversalNode)">
            <summary>
            Get the minimum allowable value for the current property on the given node.
            </summary>
            <param name="node">Explorer node data source.</param>
            <returns>The minimum allowable value as an object.</returns>
        </member>
        <member name="T:ExplorerFramework.IconPropertyReader">
            <summary>
            Interface for properties exposing icon data.
            </summary>
            <seealso cref="T:CSharpUtilities.MultiIcon"/>
        </member>
        <member name="M:ExplorerFramework.IconPropertyReader.GetIcon(ExplorerFramework.TraversalNode)">
            <summary>
            Get the given TraversalNode's icon for this property.
            </summary>
            <param name="node">Node whose icon is requested.</param>
            <returns>
            The given TraversalNode's icon for this property.
            </returns>
        </member>
        <member name="T:ExplorerFramework.NeutralPredicate">
            <summary>
            Concrete PropertyPredicate that always evaluates to true. 
            </summary>
        </member>
        <member name="M:ExplorerFramework.NeutralPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Construct a predicate that always evaluates true
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            Accesses the reference key value from the node passed in to Evaluate.
            </param>
        </member>
        <member name="M:ExplorerFramework.NeutralPredicate.DoEvaluate(System.Object)">
            <summary>
            Primitive operation to do the actual comparison work for Evaluate.  
               Returns true not to influence the filter
            </summary>
            <param name="value">Current property value to be compared.</param>
            <returns>
            Always returns true
            </returns>
        </member>
        <member name="T:ExplorerFramework.NodeCollectionCommand">
            <exclude/>
            <summary>
            Extends the Node Command interface to add the concept of a collection of nodes.
            </summary>
            <remarks>
            This is intended for Commands that use a given collection of Nodes as a 
            specific operand.
            For instance, drag and drop command may affect all the selected nodes in the
            dropped explorer tree list or in the viewport. 
            </remarks>
        </member>
        <member name="P:ExplorerFramework.NodeCollectionCommand.NodeCollection">
            <summary>
            The node collection operand.
            </summary>
        </member>
        <member name="T:ExplorerFramework.NodeCollectionCommandAdapter">
            <exclude/>
            <summary>
            This is a NodeCollectionCommand adapter for any command.
            </summary>
            <remarks>
            <para>
            If the command to be adapted is a NodeCollectionCommand itself or 
            it wraps a NodeCollectionCommand, then the adapted command will use the "wrapped" 
            NodeCollectionCommand's implementation for the interfaces of NodeCollectionCommand 
            and NodeCommand. Or it will just return null or do nothing for the interfaces 
            of NodeCollectionCommand.
            </para>
            <para>
            By using this adapter, you could first decorate a NodeCollectionCommand with any CommandDecorator.
            At last you could convert it to a NodeCollectionCommand.
            </para>
            </remarks>
        </member>
        <member name="M:ExplorerFramework.NodeCollectionCommandAdapter.#ctor(ExplorerFramework.Command)">
            <summary>
            Construct with the wrapped command to decorate.
            </summary>
            <param name="wrappedCommand">
            The internal Command, calls will be forwarded to this Command.
            </param>
        </member>
        <member name="P:ExplorerFramework.NodeCollectionCommandAdapter.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="P:ExplorerFramework.NodeCollectionCommandAdapter.Node">
            <summary>
            The Node operand.
            </summary>
        </member>
        <member name="P:ExplorerFramework.NodeCollectionCommandAdapter.NodeCollection">
            <summary>
            The Node Collection operand.
            </summary>
        </member>
        <member name="P:ExplorerFramework.NodeCollectionCommandAdapter.Name">
            <summary>
            This Command's name.
            </summary>
            <remarks>
            For example, the Name may appear as a menu item's text in an Explorer UI.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.NodeCollectionCommandAdapter.Cancelable">
            <summary>
            Can this Command handle being canceled while it is running?
            </summary>
            <remarks>
            This should not change during a Command's execution.  It is usually
            called before a Command is started.  An Explorer UI may present a
            Please wait.../Cancel dialog to the user while a Cancelable Command is
            running.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.NodeCollectionCommandAdapter.IsValid">
            <summary>
            Given the current Explorer configuration and data set, would executing
            this Command be a valid operation?
            </summary>
            <remarks>
            An Explorer UI may use IsValid to determine whether to present a Command
            menu item as enabled or disabled.
            </remarks>
            <returns>
            true if executing this command would be a valid operation.  false
            otherwise.
            </returns>
        </member>
        <member name="M:ExplorerFramework.NodeCollectionCommandAdapter.Execute">
            <summary>
            Run this Command.
            </summary>
        </member>
        <member name="M:ExplorerFramework.NodeCollectionCommandAdapter.Cancel">
            <summary>
            Cancel this Command.  This may be implemented as a no-op or throw an
            exception if Cancelable reports false.
            </summary>
        </member>
        <member name="P:ExplorerFramework.NodeCollectionCommandAdapter.WrappedCommand">
            <summary>
            The internal, wrapped command to which calls are forwarded.
            </summary>
        </member>
        <member name="F:ExplorerFramework.NodeCollectionCommandAdapter.mWrappedCommand">
            <summary>
            The internal, wrapped command to which calls are forwarded.
            </summary>
        </member>
        <member name="T:ExplorerFramework.NodeCommandAdapter">
            <exclude/>
            <summary>
            This is a NodeCommand adapter for any command.
            </summary>
            <remarks>
            <para>
            If the command to be adapted is a NodeCommand itself or 
            it wraps a NodeCommand, then the adapted command will use the "wrapped" 
            NodeCommand's implementation for the interfaces of NodeCommand 
            and NodeCommand. Or it will just return null or do nothing for the interfaces 
            of NodeCommand.
            </para>
            <para>
            By using this adapter, you could first decorate a NodeCommand with any CommandDecorator.
            At last you could convert it to a NodeCommand.
            </para>
            </remarks>
        </member>
        <member name="M:ExplorerFramework.NodeCommandAdapter.#ctor(ExplorerFramework.Command)">
            <summary>
            Construct with the wrapped command to decorate.
            </summary>
            <param name="wrappedCommand">
            The internal Command, calls will be forwarded to this Command.
            </param>
        </member>
        <member name="P:ExplorerFramework.NodeCommandAdapter.Explorer">
            <summary>
            The Explorer on which this Command will operate and access data.
            </summary>
        </member>
        <member name="P:ExplorerFramework.NodeCommandAdapter.Node">
            <summary>
            The Node operand.
            </summary>
        </member>
        <member name="P:ExplorerFramework.NodeCommandAdapter.Name">
            <summary>
            This Command's name.
            </summary>
            <remarks>
            For example, the Name may appear as a menu item's text in an Explorer UI.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.NodeCommandAdapter.Cancelable">
            <summary>
            Can this Command handle being canceled while it is running?
            </summary>
            <remarks>
            This should not change during a Command's execution.  It is usually
            called before a Command is started.  An Explorer UI may present a
            Please wait.../Cancel dialog to the user while a Cancelable Command is
            running.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.NodeCommandAdapter.IsValid">
            <summary>
            Given the current Explorer configuration and data set, would executing
            this Command be a valid operation?
            </summary>
            <remarks>
            An Explorer UI may use IsValid to determine whether to present a Command
            menu item as enabled or disabled.
            </remarks>
            <returns>
            true if executing this command would be a valid operation.  false
            otherwise.
            </returns>
        </member>
        <member name="M:ExplorerFramework.NodeCommandAdapter.Execute">
            <summary>
            Run this Command.
            </summary>
        </member>
        <member name="M:ExplorerFramework.NodeCommandAdapter.Cancel">
            <summary>
            Cancel this Command.  This may be implemented as a no-op or throw an
            exception if Cancelable reports false.
            </summary>
        </member>
        <member name="P:ExplorerFramework.NodeCommandAdapter.WrappedCommand">
            <summary>
            The internal, wrapped command to which calls are forwarded.
            </summary>
        </member>
        <member name="F:ExplorerFramework.NodeCommandAdapter.mWrappedCommand">
            <summary>
            The internal, wrapped command to which calls are forwarded.
            </summary>
        </member>
        <member name="T:ExplorerFramework.PredicateFilterItem">
            <summary>
            Filters items out according to a Predicate.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PredicateFilterItem.#ctor(System.Predicate{ExplorerFramework.TraversalNode})">
            <summary>
            Construct with the predicate to call to determine if a node should
            be filtered out.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="P:ExplorerFramework.PredicateFilterItem.Predicate">
            <summary>
            Callbed by Filter to determine if a node should be filtered out.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PredicateFilterItem.Filter(ExplorerFramework.TraversalNode)">
            <summary>
            Remove the given element from the final list?
            </summary>
            <param name="node">The TraversalNode to consider for filtering.</param>
            <returns>
            True if the node is filtered out by the Predicate and should be removed
            from the final list, false if the node passes through the filter.
            </returns>
        </member>
        <member name="T:ExplorerFramework.PropertyAnyFilterItem">
            <summary>
            Filters a TraversalNode if its current value for the given property
            matches any of a predefined set of values.
            </summary>
            <remarks>
            Matches are determined using the FilteredValue collection elements' Equals
            method.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyAnyFilterItem.#ctor(System.ComponentModel.PropertyDescriptor,System.Collections.IList)">
            <summary>
            Construct with the property and list of values to filter out.
            </summary>
            <param name="property">
            PropertyDescriptor used to get the current value from a TraversalNode.
            </param>
            <param name="filteredValues">
            When a TraversalNode's current property value matches the any of these
            filtered values, that TraversalNode is filtered out. Matches are determined
            using the collection elements' Equals method.
            </param>
        </member>
        <member name="P:ExplorerFramework.PropertyAnyFilterItem.Property">
            <summary>
            PropertyDescriptor used to get the current value from a TraversalNode.
            </summary>
        </member>
        <member name="P:ExplorerFramework.PropertyAnyFilterItem.FilteredValues">
            <summary>
            When a TraversalNode's current property value matches the any of these
            filtered values, that TraversalNode is filtered out. Matches are 
            determined using the FilteredValue collection elements' Equals
            method.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyAnyFilterItem.Filter(ExplorerFramework.TraversalNode)">
            <summary>
            Determine if the given TraversalNode should be removed from the final 
            list. A node is removed if its current value retrieved by Property matches
            any element in FilteredValues using Equals.
            </summary>
            <param name="node">TraversalNode to consider for filtering.</param>
            <returns>
            True if the node's current value as retrieved by Property Equals any 
            element in FilteredValues. True means the node should be removed from 
            the final list. Returns false if no match is found and the node should
            be kept.
            </returns>
        </member>
        <member name="T:ExplorerFramework.PropertyColorMatchPredicate">
            <summary>
            Predicate used to compare a color property to a user specified key 
            color with a tolerance vaule.
            </summary>
            <remarks>
            Evaluate will return true if the property matches the key color within the
            specified tolerance.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyColorMatchPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.Drawing.Color,System.UInt32)">
            <summary>
            Construct with the comparison operands.
            </summary>
            <param name="property">
            PropertyDescriptor used to access the current value from the node passed
            to Evaluate.
            </param>
            <param name="key">
            Reference comparison operand.
            </param>
            <param name="tolerance">
            Tolerance specifying how close a match is required to Evaluate to true.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyColorMatchPredicate.DoEvaluate(System.Object)">
            <summary>
            Primitive operation to perform the actual comparison.
            </summary>
            <param name="value">
            Property value obtained from the node passed to Evaluate.  The operand
            to compare against the key operand.
            </param>
            <returns>
            true if the property matches the key color within the specified 
            tolerance, false otherwise.
            </returns>
        </member>
        <member name="F:ExplorerFramework.PropertyColorMatchPredicate.mTolerance">
            <summary>
            Tolerance specifying how close a match is required to Evaluate to true.
            </summary>
        </member>
        <member name="T:ExplorerFramework.PropertyEqualsFilterItem">
            <summary>
            Filters a TraversalNode if its current value for the given property
            matches the predefined FilteredValue, determined using Object.Equals.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyEqualsFilterItem.#ctor(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Construct with the property and the value to filter out.
            </summary>
            <param name="property">
            PropertyDescriptor used to get the current value from a TraversalNode.
            </param>
            <param name="filteredValue">
            When a TraversalNode's current property value equals this 
            filtered value, that TraversalNode is filtered out. Matches are determined
            using Object.Equals.
            </param>
        </member>
        <member name="P:ExplorerFramework.PropertyEqualsFilterItem.Property">
            <summary>
            PropertyDescriptor used to get the current value from a TraversalNode.
            </summary>
        </member>
        <member name="P:ExplorerFramework.PropertyEqualsFilterItem.FilteredValue">
            <summary>
            When a TraversalNode's current property value equals this 
            filtered value, that TraversalNode is filtered out. Matches are determined
            using Object.Equals.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyEqualsFilterItem.Filter(ExplorerFramework.TraversalNode)">
            <summary>
            Determine if the given TraversalNode should be removed from the final 
            list. A node is removed if its current value retrieved by Property matches
            FilteredValue according to Object.Equals.
            </summary>
            <param name="node">TraversalNode to consider for filtering.</param>
            <returns>
            True if the node's current value, as retrieved by Property, is equal to
            FilteredValue, and this node should be removed from the final, filtered 
            list. Returns false if the node should be kept because its does not 
            match FilteredValue.
            </returns>
        </member>
        <member name="T:ExplorerFramework.PropertyRegistry">
            <summary>
            Holds the set of Properties exposed over the data set in a DataFacade.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyRegistry.#ctor">
            <summary>
            Construct.  Initializes to include the default tree structure 
            TraversalNode properties as defined by KeyFieldName and ParentFieldName.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyRegistry.AddProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Add a PropertyDescriptor to the repository.  
            </summary>
            <remarks>
            <para>
            Raises a RegistryChanged event.
            </para>
            <para>
            If another property with the same name already exists in the repository, 
            it will be replaced with the property argument.
            </para>
            </remarks>
            <param name="property">
            PropertyDescriptor to add. 
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyRegistry.GetProperty(System.String)">
            <summary>
            Get a PropertyDescriptor from this registry by name.
            </summary>
            <param name="name">Property name to find.</param>
            <returns>The found property with the given name, or null if nothing
            was found.</returns>
        </member>
        <member name="M:ExplorerFramework.PropertyRegistry.RemoveProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Remove a PropertyDescriptor from the repository.  
            </summary>
            <remarks>
            <para>
            Raises a RegistryChanged event.
            </para>
            <para>
            Removes any property with the property argument's name.
            </para>
            </remarks>
            <param name="property">
            PropertyDescriptor to remove. 
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyRegistry.RemoveProperty(System.String)">
            <summary>
            Remove a PropertyDescriptor by name.
            </summary>
            <remarks>
            <para>
            Raises a RegistryChanged event.
            </para>
            <para>
            Removes any property with the given propertyName.
            </para>
            </remarks>
            <param name="propertyName">
            Name of the property to remove.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyRegistry.GetCollection">
            <summary>
            Get the collection of all PropertyDescriptor values.
            </summary>
            <returns>
            All PropertyDescriptor values in this repository packaged as a
            PropertyDescriptorCollection.
            </returns>
        </member>
        <member name="P:ExplorerFramework.PropertyRegistry.KeyFieldName">
            <summary>
            Field name for value used as a primary key for each data element.
            </summary>
        </member>
        <member name="P:ExplorerFramework.PropertyRegistry.ParentFieldName">
            <summary>
            Field name for value used as a parent key for each data element.
            </summary>
        </member>
        <member name="E:ExplorerFramework.PropertyRegistry.RegistryChanged">
            <summary>
            Event signaling that the set of properties in this registry has changed.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyRegistry.OnRegistryChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises a RegistryChanged event.
            </summary>
            <param name="e">
            EventArgs to pass to RegistryChanged event listeners.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyRegistry.RaisePropertyAdded(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Raise a RegistryChanged event to notify listeners that a property was
            added.
            </summary>
            <param name="property">The added property.</param>
        </member>
        <member name="M:ExplorerFramework.PropertyRegistry.RaisePropertyChanged(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Raise a RegistryChanged event to notify listeners that a property was
            changed.
            </summary>
            <param name="property">The new version of the property.</param>
        </member>
        <member name="M:ExplorerFramework.PropertyRegistry.RaisePropertyDeleted(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Raise a RegistryChanged event to notify listeners that a property was
            removed.
            </summary>
            <param name="property">The removed property.</param>
        </member>
        <member name="F:ExplorerFramework.PropertyRegistry.KEY_FIELD_NAME">
            <summary>
            Default field name for value used as a primary key for each data element.
            </summary>
        </member>
        <member name="F:ExplorerFramework.PropertyRegistry.PARENT_FIELD_NAME">
            <summary>
            Default field name for value used as a parent key for each data element.
            </summary>
        </member>
        <member name="F:ExplorerFramework.PropertyRegistry.mPropertyCollection">
            <summary>
            The set of properties in this registry, indexed by name.
            </summary>
        </member>
        <member name="T:ExplorerFramework.StringContainsComparison">
            <summary>
            Evaluates to true if the left-hand side argument contains the 
            right-hand side argument as a substring, ignoring case. 
            </summary>
        </member>
        <member name="M:ExplorerFramework.StringContainsComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Evaluates to true if the left-hand side argument contains the 
            right-hand side argument as a substring, ignoring case. 
            </summary>
            <param name="x">The source string</param>
            <param name="y">The substring to find in the source string.</param>
            <returns>True if y is a substring of x, false otherwise.</returns>
        </member>
        <member name="P:ExplorerFramework.StringContainsComparison.DisplayName">
            <summary>
            Localized text for this comparison.
            </summary>
        </member>
        <member name="T:ExplorerFramework.StringDoesNotContainComparison">
            <summary>
            Evaluates to true if the left-hand side argument does not contain the 
            right-hand side argument as a substring, ignoring case. 
            </summary>
        </member>
        <member name="M:ExplorerFramework.StringDoesNotContainComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Evaluates to true if the left-hand side argument does not contain the 
            right-hand side argument as a substring, ignoring case. 
            </summary>
            <param name="x">The source string</param>
            <param name="y">The substring to find in the source string.</param>
            <returns>True if y is not a substring of x, false otherwise.</returns>
        </member>
        <member name="P:ExplorerFramework.StringDoesNotContainComparison.DisplayName">
            <summary>
            Localized text for this comparison.
            </summary>
        </member>
        <member name="T:ExplorerFramework.StringEndsWithComparison">
            <summary>
            Evaluates to true if the left-hand side string ends with the right-hand
            side string, ignoring case
            </summary>
        </member>
        <member name="M:ExplorerFramework.StringEndsWithComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Evaluates to true if the left-hand side string ends with the right-hand
            side string, ignoring case
            </summary>
            <param name="x">Source string</param>
            <param name="y">String to find at the end of the source string</param>
            <returns>True if x ends with y, ignoring case, false otherwise</returns>
        </member>
        <member name="P:ExplorerFramework.StringEndsWithComparison.DisplayName">
            <summary>
            Localized text for this comparison.
            </summary>
        </member>
        <member name="T:ExplorerFramework.StringIsComparison">
            <summary>
            Evaluates to true if the left-hand side string is equal to the right-hand
            side string, ignoring case
            </summary>
        </member>
        <member name="M:ExplorerFramework.StringIsComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Evaluates to true if the left-hand side string is equal to the right-hand
            side string, ignoring case
            </summary>
            <param name="x">First string</param>
            <param name="y">Second string</param>
            <returns>True if x and y are equal ignoring case, false otherwise</returns>
        </member>
        <member name="P:ExplorerFramework.StringIsComparison.DisplayName">
            <summary>
            Localized text for this comparison.
            </summary>
        </member>
        <member name="T:ExplorerFramework.StringIsNotComparison">
            <summary>
            Evaluates to true if the left-hand side string is not equal to the right-hand
            side string, ignoring case
            </summary>
        </member>
        <member name="M:ExplorerFramework.StringIsNotComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Evaluates to true if the left-hand side string is not equal to the 
            right-hand side string, ignoring case
            </summary>
            <param name="x">First string</param>
            <param name="y">Second string</param>
            <returns>True if x and y are equal ignoring case, false otherwise</returns>
        </member>
        <member name="P:ExplorerFramework.StringIsNotComparison.DisplayName">
            <summary>
            Localized text for this comparison.
            </summary>
        </member>
        <member name="T:ExplorerFramework.StringStartsWithComparison">
            <summary>
            Evaluates to true if the left-hand side string starts with the right-hand
            side string, ignoring case
            </summary>
        </member>
        <member name="M:ExplorerFramework.StringStartsWithComparison.Evaluate(System.Object,System.Object)">
            <summary>
            Evaluates to true if the left-hand side string starts with the right-hand
            side string, ignoring case
            </summary>
            <param name="x">Source string</param>
            <param name="y">String to find at the start of the source string</param>
            <returns>True if x starts with y, ignoring case, false otherwise</returns>
        </member>
        <member name="P:ExplorerFramework.StringStartsWithComparison.DisplayName">
            <summary>
            Localized text for this comparison.
            </summary>
        </member>
        <member name="T:ExplorerFramework.TraversalNodeActionQueryEventArgs">
            <summary>
            Arguments for a drag event targeting a TraversalNode.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNodeActionQueryEventArgs.#ctor(ExplorerFramework.TraversalNode,System.Windows.Forms.IDataObject)">
            <summary>
            Constructor.
            </summary>
            <param name="node">The target node for this drag event.</param>
            <param name="data">The source data being dragged for the event.</param>
        </member>
        <member name="P:ExplorerFramework.TraversalNodeActionQueryEventArgs.ActionIsValid">
            <summary>
            Used as a way for delegate methods to signal whether
            this drag action would or is considered to be valid, given the context.
            </summary>
        </member>
        <member name="F:ExplorerFramework.TraversalNodeActionQueryEventArgs.mActionIsValid">
            <summary>
            Holds the value for the DragActionIsValid property.
            </summary>
        </member>
        <member name="T:ExplorerFramework.TraversalNodeEventArgs">
            <summary>
            Contains data for events about a TraversalNode.  Holds the node affected
            by the event.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNodeEventArgs.#ctor(ExplorerFramework.TraversalNode,System.Windows.Forms.IDataObject)">
            <summary>
            Construct with the node affected by the current event.
            </summary>
            <param name="node">Node affected by the current event.</param>
            <param name="data">source data of the current event.</param>
        </member>
        <member name="P:ExplorerFramework.TraversalNodeEventArgs.Node">
            <summary>
            The affected node.
            </summary>
        </member>
        <member name="P:ExplorerFramework.TraversalNodeEventArgs.Data">
            <summary>
            The source data of the event
            </summary>
        </member>
        <member name="F:ExplorerFramework.TraversalNodeEventArgs.mNode">
            <summary>
            The affected node.
            </summary>
        </member>
        <member name="F:ExplorerFramework.TraversalNodeEventArgs.mData">
            <summary>
            The data of the event
            </summary>
        </member>
        <member name="T:ExplorerFramework.NotPredicate">
            <summary>
            Applies a logical 'not' to a single predicate delegate.  Evaluate can be 
            used as a Predicate&lt;TraversalNode&gt; delegate.
            </summary>
        </member>
        <member name="M:ExplorerFramework.NotPredicate.Create(System.Predicate{ExplorerFramework.TraversalNode})">
            <summary>
            Factory method.  Construct a Predicate from the logical-not of the given
            predicate.
            </summary>
            <remarks>
            This is a convenience method for dealing with possible null parameters.
            </remarks>
            <param name="predicate">
            Predicate to wrap and to which to apply a logical-not operation.
            </param>
            <returns>
            Returns null if predicate is null.
            Otherwise,
            <c>new NotPredicate(lhs, rhs).Evaluate</c> is returned.
            </returns>
        </member>
        <member name="M:ExplorerFramework.NotPredicate.#ctor(System.Predicate{ExplorerFramework.TraversalNode})">
            <summary>
            Create a NotPredicate instance around the given predicate.
            </summary>
            <param name="wrapped">
            Predicate to wrap and to which to apply a logical-not operation.
            </param>
        </member>
        <member name="M:ExplorerFramework.NotPredicate.Evaluate(ExplorerFramework.TraversalNode)">
            <summary>
            Evaluate the logical not of the wrapped predicate, passing it the 
            argument.
            </summary>
            <param name="argument">
            TraversalNode argument to pass to the wrapped predicate.
            </param>
            <returns>
            The logical-not wrapped predicate's result when called, passing in the
            given argument.
            </returns>
        </member>
        <member name="F:ExplorerFramework.NotPredicate.mWrapped">
            <summary>
            The wrapped predicate.
            </summary>
        </member>
        <member name="T:ExplorerFramework.OrPredicate">
            <summary>
            Apply a logical 'or' to the results of two predicate delegates.  Evaluate
            can be used as a Predicate&lt;TraversalNode&gt; delegate.
            </summary>
        </member>
        <member name="M:ExplorerFramework.OrPredicate.Create(System.Predicate{ExplorerFramework.TraversalNode},System.Predicate{ExplorerFramework.TraversalNode})">
            <summary>
            Factory method.  Construct a Predicate from the Or of two other 
            Predicate instances.
            </summary>
            <remarks>
            This is a convenience method for dealing with possibly null Predicates.
            </remarks>
            <param name="lhs">Left hand side boolean function.</param>
            <param name="rhs">Right hand side boolean function.</param>
            <returns>
            If both lhs and rhs are null, returns null.
            If either parameter is null, Create will return the other parameter
            directly.  Otherwise, 
            <c>new OrPredicate(lhs, rhs).Evaluate</c> is returned.
            </returns>
        </member>
        <member name="M:ExplorerFramework.OrPredicate.#ctor(System.Predicate{ExplorerFramework.TraversalNode},System.Predicate{ExplorerFramework.TraversalNode})">
            <summary>
            Construct an OrPredicate whose Evaluate method will return the logical-or
            of lhs's result and rhs's result.
            </summary>
            <param name="lhs">Left hand side boolean function.</param>
            <param name="rhs">Right hand side boolean function.</param>
        </member>
        <member name="M:ExplorerFramework.OrPredicate.Evaluate(ExplorerFramework.TraversalNode)">
            <summary>
            Evaluate the predicate, returning the result of
            <c>lhs(argument) || rhs(argument)</c>.
            </summary>
            <param name="argument">
            The TraversalNode argument to pass to the lhs and rhs predicates.
            </param>
            <returns>
            The result of <c>lhs(argument) || rhs(argument)</c>.
            </returns>
        </member>
        <member name="F:ExplorerFramework.OrPredicate.mLhs">
            <summary>
            Left hand side boolean function.
            </summary>
        </member>
        <member name="F:ExplorerFramework.OrPredicate.mRhs">
            <summary>
            Right hand side boolean function.
            </summary>
        </member>
        <member name="T:ExplorerFramework.IterativeCommand">
            <summary>
            Applies a NodeCommand iteratively over all selected nodes in the Explorer.
            </summary>
            <remarks>
            Many commands are merely a simple operation on a single node applied to every
            node in the current selection list.  This common pattern is factored into two
            classes: a concrete NodeCommand implementation expressing the simple 
            single-node operation, and IterativeCommand, performing the iteration.  The
            advantages of composing the command in this way are that NodeCommand 
            implementation need only concern itself with its principal operation, and 
            that IterativeCommand implements the details for canceling the command and
            reporting progress.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.IterativeCommand.#ctor">
            <summary>
            Construct without a NodeCommand.
            </summary>
        </member>
        <member name="M:ExplorerFramework.IterativeCommand.#ctor(ExplorerFramework.NodeCommand)">
            <summary>
            Construct with the wrapped NodeCommand.
            </summary>
            <param name="wrapped">
            The NodeCommand to be applied to each selected node when this Command
            is executed.
            </param>
        </member>
        <member name="M:ExplorerFramework.IterativeCommand.IsValid">
            <summary>
            Given the current Explorer configuration and data set, would executing
            this Command be a valid operation?
            </summary>
            <returns>
            true if there are selected nodes in the Explorer, false otherwise.
            </returns>
        </member>
        <member name="P:ExplorerFramework.IterativeCommand.NodeCommand">
            <summary>
            The NodeCommand to be applied to each selected node when this Command
            is executed.
            </summary>
        </member>
        <member name="M:ExplorerFramework.IterativeCommand.Execute">
            <summary>
            Execute this Command by iteratively applying the NodeCommand to each 
            node in the Explorer's selected node list.
            </summary>
        </member>
        <member name="P:ExplorerFramework.IterativeCommand.Name">
            <summary>
            This Command's name.
            </summary>
            <remarks>
            Forwards to the NodeCommand's Name property.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.IterativeCommand.Cancelable">
            <summary>
            Can this Command handle being canceled while it is running?
            </summary>
            <remarks>
            Always true for IterativeCommand, since each iteration provides a valid
            stopping point.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.IterativeCommand.Cancel">
            <summary>
            Cancel this Command.  It will stop before starting the NodeCommand on
            the next selected node.
            </summary>
        </member>
        <member name="M:ExplorerFramework.IterativeCommand.IsCanceled">
            <summary>
            Was this Command canceled?
            </summary>
            <returns>
            true if this Command was canceled, false if not.
            </returns>
        </member>
        <member name="M:ExplorerFramework.IterativeCommand.ResetProgress">
            <summary>
            Resets the progress counter and total.
            </summary>
        </member>
        <member name="M:ExplorerFramework.IterativeCommand.IncrementProgress">
            <summary>
            Increments the current progress and reports it to the Explorer.
            </summary>
        </member>
        <member name="F:ExplorerFramework.IterativeCommand.mNodeCommand">
            <summary>
            The NodeCommand to be applied to each selected node when this Command
            is executed.
            </summary>
        </member>
        <member name="F:ExplorerFramework.IterativeCommand.mLastProgressReported">
            <summary>
            The last progress percentage reported to the Explorer.
            </summary>
        </member>
        <member name="F:ExplorerFramework.IterativeCommand.mTotalCount">
            <summary>
            The total number of progress "ticks."  This is essentially the selected
            node count.
            </summary>
        </member>
        <member name="F:ExplorerFramework.IterativeCommand.mCurrentCount">
            <summary>
            The current progress tick.
            </summary>
        </member>
        <member name="F:ExplorerFramework.IterativeCommand.mCanceled">
            <summary>
            Indicates whether the current Command execution was canceled or a 
            cancel was requested but is still pending.
            </summary>
        </member>
        <member name="T:ExplorerFramework.PropertySortComparer">
            <summary>
            IComparer implementation for sorting TraversalNodes according to a 
            ListSortDescriptionCollection.
            </summary>
            <remarks>
            <para>
            Used for advanced sorting where nodes can be sorted by multiple columns.
            For example, this could be used to sort ascending by hidden, descending by
            frozen, then ascending by name.
            </para>
            <para>
            This is used for sorting directly inside the DataFacade.  Views built on
            top of DataFacade may find it easier or more efficient to perform sorting 
            at the presentation level.
            </para>
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertySortComparer.#ctor(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Construct with ListDescriptionCollection defining the sort specification.
            </summary>
            <param name="sortSpecification">
            Defines how to sort.  The sort may sort by multiple columns, each
            indivdually ascending or descending.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertySortComparer.Compare(ExplorerFramework.TraversalNode,ExplorerFramework.TraversalNode)">
            <summary>
            Compare the two nodes to apply an ordering according to the sort 
            specification.
            </summary>
            <param name="lhs">Left hand side node operand.</param>
            <param name="rhs">Right hand side node operand.</param>
            <returns>
            <list>
            <item>-1 if lhs should come before rhs.</item>
            <item>0 if lhs and rhs are equal according to the sort ordering.</item>
            <item>1 if lhs should come after rhs.</item>
            </list>
            </returns>
        </member>
        <member name="F:ExplorerFramework.PropertySortComparer.mSortSpecification">
            <summary>
            Specifies the sort ordering rules for ranking nodes.
            </summary>
        </member>
        <member name="T:ExplorerFramework.GenericPropertyDescriptor`2">
            <summary>
            Abstract intermediate base class between PropertyDescriptor and concrete
            property descriptors.  Uses generics to express common code at this level
            and avoid reimplementation in concrete derived classes.
            </summary>
            <remarks>
            <para>
            A PropertyDescriptor is essentially an object expression of a get-function 
            and set-function pair for a data property exposed on another type.  It
            resembles the Visitor pattern from Design Patterns by Gamma et al, although
            the Elements do not implement an Accept method.
            </para>
            <para>
            In an Explorer context, concrete PropertyDescriptors define the data columns.
            </para>
            <para>
            Concrete derived classes must implement DoGetValue and DoSetValue.
            If a localizable property name is required, concrete classes must either 
            override DisplayName to return the localized value, or pass the internal name 
            and the localized value to the constructor of GenericPropertyDescriptor.
            </para>
            </remarks>
            <seealso cref="T:ExplorerFramework.Explorer"/>
            <typeparam name="ComponentType_">
            Type on which this property is exposed.
            </typeparam>
            <typeparam name="PropertyType_">
            Type of the property value accessed by this descriptor.
            </typeparam>
        </member>
        <member name="M:ExplorerFramework.GenericPropertyDescriptor`2.#ctor(System.String)">
            <summary>
            Construct with the property's name.
            </summary>
            <param name="name">The name of this property.</param>
        </member>
        <member name="M:ExplorerFramework.GenericPropertyDescriptor`2.#ctor(System.String,System.String)">
            <summary>
            Construct with the property's name and its localized name.
            </summary>
            <param name="propertyName">
            Name used internally to identify the property. This must remain constant 
            across localized builds.
            </param>
            <param name="displayName">
            The localized name string. This may appear in the UI and should be 
            internationalized.
            </param>
        </member>
        <member name="M:ExplorerFramework.GenericPropertyDescriptor`2.CanResetValue(System.Object)">
            <summary>
            Does the given object have reset capabilities?  Returns false by default.
            </summary>
            <remarks>
            Override in a derived class to change the implementation away from the
            default.
            </remarks>
            <param name="component">Object being queried for reset capability.</param>
            <returns>
            false unless overridden.
            </returns>
        </member>
        <member name="P:ExplorerFramework.GenericPropertyDescriptor`2.ComponentType">
            <summary>
            The type on which this property is exposed.
            </summary>
            <remarks>
            Returns the type of the ComponentType_ generic parameter.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.GenericPropertyDescriptor`2.GetValue(System.Object)">
            <summary>
            Get the current value of the property on the passed-in object.
            </summary>
            <remarks>
            Following the Template Method design pattern, GetValue casts
            the passed-in component to the ComponentType specified by the generic 
            parameter before passing control to the primitive operation implemented
            by concrete specialized classes.
            </remarks>
            <param name="component">
            The object from which to obtain the property value.
            </param>
            <returns>
            The current property value accessed by this property descriptor for the
            given object.  May return null.
            </returns>
        </member>
        <member name="P:ExplorerFramework.GenericPropertyDescriptor`2.IsReadOnly">
            <summary>
            Is this property read-only or can the property value be set through 
            this PropertyDescriptor?
            </summary>
            <remarks>
            By default, this returns false and concrete classes are expected to 
            supply an implementation for DoSetValue.  If setting the value through
            the concrete PropertyDescriptor is inappropriate, the derived class
            must override IsReadOnly to have it return true.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.GenericPropertyDescriptor`2.PropertyType">
            <summary>
            Type of the property value accessed by this descriptor.
            </summary>
            <remarks>
            <para>
            GetValue returns objects of this type and SetValue expects objects
            of this type as its value parameter.
            </para>
            <para>
            Returns the type of the PropertyType_ generic parameter.
            </para>
            </remarks>
        </member>
        <member name="P:ExplorerFramework.GenericPropertyDescriptor`2.DisplayName">
            <summary>
            The localized name string. This may appear in the UI and should be 
            internationalized.
            </summary>
            <returns>
            The localized name.
            </returns>
        </member>
        <member name="M:ExplorerFramework.GenericPropertyDescriptor`2.ResetValue(System.Object)">
            <summary>
            Reset this property value to its default value.
            </summary>
            <remarks>
            By default, this method does nothing and CanResetValue returns false.
            </remarks>
            <param name="component">Object to reset.</param>
        </member>
        <member name="M:ExplorerFramework.GenericPropertyDescriptor`2.SetValue(System.Object,System.Object)">
            <summary>
            Set the current value of the property accessed by this descriptor on
            the given object.
            </summary>
            <remarks>
            Following the template method design pattern, SetValue casts
            the passed-in component to the ComponentType specified as a generic 
            parameter and the passed-in value to the specified property type
            before passing control to the primitive operation implemented by 
            concrete specialized classes.
            </remarks>
            <param name="component">Object on which to set the property value.</param>
            <param name="value">New value for the property.</param>
        </member>
        <member name="M:ExplorerFramework.GenericPropertyDescriptor`2.ShouldSerializeValue(System.Object)">
            <summary>
            Does this value need to be persisted?
            </summary>
            <remarks>
            In an Explorer context, this method is meaningless.  Returns false by 
            default.
            </remarks>
            <param name="component">Object being queried.</param>
            <returns>
            false unless overridden.
            </returns>
        </member>
        <member name="M:ExplorerFramework.GenericPropertyDescriptor`2.DoGetValue(`0)">
            <summary>
            Primitive operation for getting the current property value in the 
            component.
            </summary>
            <remarks>
            This is called as a primitive operation by GetValue, allowing GetValue
            to handle much of the common code across all PropertyDescriptors.  
            Concrete derived classes must implement this method.
            </remarks>
            <param name="component">
            The object from which to obtain the property value.
            </param>
            <returns>
            The current value in component for the property accessed by this 
            descriptor.
            </returns>
        </member>
        <member name="M:ExplorerFramework.GenericPropertyDescriptor`2.DoSetValue(`0,`1)">
            <summary>
            Primitive operation for setting the current property value in the 
            component.
            </summary>
            <remarks>
            This is called as a primitive operation by SetValue, allowing SetValue
            to handle much of the common code across all PropertyDescriptors.  
            Concrete derived classes must implement this method, but if IsReadOnly is
            overridden to return true, the implementation may do nothing or 
            even throw an exception.
            </remarks>
            <param name="component">
            The object from which to obtain the property value.
            </param>
            <param name="property">
            New value for the property accessed by this descriptor.
            </param>
        </member>
        <member name="F:ExplorerFramework.GenericPropertyDescriptor`2.mDisplayName">
            <summary>
            Localized name, used for displaying.
            </summary>
        </member>
        <member name="T:ExplorerFramework.NodeCommand">
            <summary>
            Extends the Command interface to add the concept of a target Node.
            </summary>
            <remarks>
            This is intended for Commands that use a given Node as a specific operand.
            For instance, drag and drop Commands use the drop target as a target Node 
            operand in addition to the dragged selected nodes.  IterativeCommands 
            specify one "current" node after the other and apply the NodeCommand to it.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.NodeCommand.Node">
            <summary>
            The Node operand.
            </summary>
        </member>
        <member name="T:ExplorerFramework.PropertyEqualPredicate">
            <summary>
            Concrete PropertyPredicate that evaluates to true when the current node's
            property is equal to the key value, as determined by the key value's Equals
            method. 
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyEqualPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Construct a predicate that evaluates using two operands dynamically drawn
            from the given property values.  This can compare one property to another.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            Accesses the reference key value from the node passed in to Evaluate.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyEqualPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Construct a predicate that evaluates by comparing an operand dynamically
            drawn from the given property against a set key value.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            The set reference key.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyEqualPredicate.DoEvaluate(System.Object)">
            <summary>
            Primitive operation to do the actual comparison work for Evaluate.  
            Compares the passed in value to this.KeyValue.
            </summary>
            <remarks>
            Calls <c>this.KeyValue.Equals(value)</c> to determine equality.
            </remarks>
            <param name="value">Current property value to be compared.</param>
            <returns>
            The result of <c>this.KeyValue.Equals(value)</c>.
            </returns>
        </member>
        <member name="T:ExplorerFramework.PropertyComparePredicate">
            <summary>
            Intermediate abstract parent class for PropertyPredicates based on 
            IComparable.CompareTo.
            </summary>
            <remarks>
            Uses the Template Method pattern to consolidate common
            code for these types of comparison predicates.  Concrete classes must 
            implement the CheckCompare primitive operation to interpret the result of
            applying the current node value's CompareTo method to the current key value.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyComparePredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Construct a predicate that evaluates using two operands dynamically drawn
            from the given property values.  This can compare one property to another.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            Accesses the reference key value from the node passed in to Evaluate.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyComparePredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.IComparable)">
            <summary>
            Construct a predicate that evaluates by comparing an operand dynamically
            drawn from the given property against a set key value.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            The set reference key.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyComparePredicate.DoEvaluate(System.Object)">
            <summary>
            Primitive operation to do the actual comparison work for Evaluate.  
            Compares the passed in value to this.KeyValue.
            </summary>
            <remarks>
            Calls CheckCompare to interpret the result of 
            <c>value.CompareTo(this.KeyValue)</c>.
            </remarks>
            <param name="value">Current property value to be compared.</param>
            <returns>
            The result of <c>CheckCompare(value.CompareTo(KeyValue))</c>.
            </returns>
        </member>
        <member name="M:ExplorerFramework.PropertyComparePredicate.CheckCompare(System.Int32)">
            <summary>
            Apply the concrete comparison operator to the result of 
            NodeValue.CompareTo(KeyValue) 
            </summary>
            <remarks>
            This allows for the common code to be consolidated in DoEvaluate for
            a number of different operator semantics defined in concrete derived
            classes. Each of these concrete classes is responsible for interpreting 
            CompareTo's result according to the comparison operator that it
            represents. 
            </remarks>
            <param name="compareResult">
            The result of <c>value.CompareTo(KeyValue)</c> computed by DoEvaluate.
            </param>
            <returns>
            true or false according to the derived class's operator semantics.
            </returns>
        </member>
        <member name="T:ExplorerFramework.PropertyGreaterThanOrEqualPredicate">
            <summary>
            Concrete PropertyPredicate that Evaluates to true when the current node's 
            property value is greater than or equal to the current key value, as 
            determined by the current value's CompareTo method. 
            </summary>
            <remarks>
            The current value must implement IComparable. Evaluate will return true if 
            CompareTo's return value is &gt;= 0.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyGreaterThanOrEqualPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.IComparable)">
            <summary>
            Construct a predicate that evaluates using two operands dynamically drawn
            from the given property values.  This can compare one property to another.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            Accesses the reference key value from the node passed in to Evaluate.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyGreaterThanOrEqualPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Construct a predicate that evaluates by comparing an operand dynamically
            drawn from the given property against a set key value.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            The set reference key.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyGreaterThanOrEqualPredicate.CheckCompare(System.Int32)">
            <summary>
            Interpret the comparison result to determine if the current value is
            greater than or equal to the Key value.
            </summary>
            <param name="compareResult">
            The CompareTo result to interpret.
            </param>
            <returns>
            true if <c>compareResult &gt;= 0</c>, false otherwise.
            </returns>
        </member>
        <member name="T:ExplorerFramework.PropertyGreaterThanPredicate">
            <summary>
            Concrete PropertyPredicate that Evaluates to true when the current node's 
            property value is greater than the current key value, as determined by the 
            current value's CompareTo method.  
            </summary>
            <remarks>
            The current value must implement IComparable. 
            Evaluate will return true if CompareTo's return value is &gt; 0.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyGreaterThanPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Construct a predicate that evaluates using two operands dynamically drawn
            from the given property values.  This can compare one property to another.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            Accesses the reference key value from the node passed in to Evaluate.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyGreaterThanPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.IComparable)">
            <summary>
            Construct a predicate that evaluates by comparing an operand dynamically
            drawn from the given property against a set key value.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            The set reference key.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyGreaterThanPredicate.CheckCompare(System.Int32)">
            <summary>
            Interpret the comparison result to determine if the current value is
            greater than the Key value.
            </summary>
            <param name="compareResult">
            The CompareTo result to interpret.
            </param>
            <returns>
            true if <c>compareResult &gt; 0</c>, false otherwise.
            </returns>
        </member>
        <member name="T:ExplorerFramework.PropertyLessThanOrEqualPredicate">
            <summary>
            Concrete PropertyPredicate that Evaluates to true when the current node's 
            property value is less than or equal to the current key value, as 
            determined by the current value's CompareTo method.  
            </summary>
            <remarks>
            The current value must implement IComparable. Evaluate will return true 
            if CompareTo's return value is &lt;= 0.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyLessThanOrEqualPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Construct a predicate that evaluates using two operands dynamically drawn
            from the given property values.  This can compare one property to another.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            Accesses the reference key value from the node passed in to Evaluate.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyLessThanOrEqualPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.IComparable)">
            <summary>
            Construct a predicate that evaluates by comparing an operand dynamically
            drawn from the given property against a set key value.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            The set reference key.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyLessThanOrEqualPredicate.CheckCompare(System.Int32)">
            <summary>
            Interpret the comparison result to determine if the current value is
            less than or equal to the Key value.
            </summary>
            <param name="compareResult">
            The CompareTo result to interpret.
            </param>
            <returns>
            true if <c>compareResult &lt;= 0</c>, false otherwise.
            </returns>
        </member>
        <member name="T:ExplorerFramework.PropertyLessThanPredicate">
            <summary>
            Concrete PropertyPredicate that Evaluates to true when the current node's 
            property value is less than the current key value, as determined by the 
            current value's CompareTo method. 
            </summary>
            <remarks>
            The current value must implement IComparable. Evaluate will return true 
            if CompareTo's return value is &lt; 0.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyLessThanPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Construct a predicate that evaluates using two operands dynamically drawn
            from the given property values.  This can compare one property to another.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            Accesses the reference key value from the node passed in to Evaluate.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyLessThanPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.IComparable)">
            <summary>
            Construct a predicate that evaluates by comparing an operand dynamically
            drawn from the given property against a set key value.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            The set reference key.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyLessThanPredicate.CheckCompare(System.Int32)">
            <summary>
            Interpret the comparison result to determine if the current value is
            less than the Key value.
            </summary>
            <param name="compareResult">
            The CompareTo result to interpret.
            </param>
            <returns>
            true if <c>compareResult &lt; 0</c>, false otherwise.
            </returns>
        </member>
        <member name="T:ExplorerFramework.PropertyNotEqualPredicate">
            <summary>
            Concrete PropertyPredicate that evaluates to true when the current node's
            property is not equal to the key value, as determined by the key value's 
            Equals method. 
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyNotEqualPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Construct a predicate that evaluates using two operands dynamically drawn
            from the given property values.  This can compare one property to another.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            Accesses the reference key value from the node passed in to Evaluate.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyNotEqualPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Construct a predicate that evaluates by comparing an operand dynamically
            drawn from the given property against a set key value.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            The set reference key.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyNotEqualPredicate.DoEvaluate(System.Object)">
            <summary>
            Primitive operation to do the actual comparison work for Evaluate.  
            Compares the passed in value to this.KeyValue.
            </summary>
            <remarks>
            Calls <c>this.KeyValue.Equals(value)</c> to determine equality.
            </remarks>
            <param name="value">Current property value to be compared.</param>
            <returns>
            The result of <c>this.KeyValue.Equals(value)</c>.
            </returns>
        </member>
        <member name="T:ExplorerFramework.PropertyPredicate">
            <summary>
            Encapsulation of a boolean function that evaluates a property.
            </summary>
            <remarks>
            PropertyPredicates are intended to be used for DataFacade's Find and Filter
            capabilities.  Client code can instantiate a concrete property predicate to
            search for TraversalNodes with Properties where Evaluate returns true when
            evaluated against either a static key value or a value obtained from another 
            PropertyDescriptor on the same node.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Evaluate one property against a key property. 
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            Accesses the reference key value from the node passed in to Evaluate.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Evaluate one property against a static key value. 
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            The set reference key.
            </param>
        </member>
        <member name="P:ExplorerFramework.PropertyPredicate.Property">
            <summary>
            PropertyDescriptor used to access the current value from the 
            TraversalNode passed to in Evaluate.
            </summary>
        </member>
        <member name="P:ExplorerFramework.PropertyPredicate.KeyValue">
            <summary>
            The current Key value.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyPredicate.Evaluate(ExplorerFramework.TraversalNode)">
            <summary>
            Perform the property evaluation for the given TraversalNode. 
            </summary>
            <remarks>
            This follows the Template Method design pattern.  this.Property is used 
            to access the current property value, and this value is passed to 
            DoEvaluate for interpretation by a concrete derived class. The KeyValue
            property is available for derived classes to access the reference key 
            value for comparison.
            </remarks>
            <param name="node">
            Current TraversalNode being evaluated.  
            </param>
            <returns>
            The result of the evaluation as determined by a concrete derived class.
            </returns>
        </member>
        <member name="M:ExplorerFramework.PropertyPredicate.DoEvaluate(System.Object)">
            <summary>
            Perform the evluation for the current value. 
            </summary>
            <remarks>
            This primitive operation must be implemented in concrete derived classes.
            The current key value is available using KeyValue.
            </remarks>
            <param name="value">
            Current value obtained from the TraversalNode being evaluated.
            </param>
            <returns>
            The result of the evaluation as determined by a concrete derived class.
            </returns>
        </member>
        <member name="F:ExplorerFramework.PropertyPredicate.mProperty">
            <summary>
            PropertyDescriptor used to access the current value from the 
            TraversalNode passed to in Evaluate.
            </summary>
        </member>
        <member name="F:ExplorerFramework.PropertyPredicate.mKey">
            <summary>
            Polymorphic key object used to determine the current key value.
            </summary>
        </member>
        <member name="T:ExplorerFramework.PropertyPredicate.Key">
            <summary>
            Internal polymorphic class used to obtain the key value.
            </summary>
            <remarks>
            Hides the details of using either a static key or a dynamic key
            accessed through a property.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyPredicate.Key.GetValue">
            <summary>
            Get the current Key value.
            </summary>
            <returns>
            The current Key value.
            </returns>
        </member>
        <member name="P:ExplorerFramework.PropertyPredicate.Key.CurrentNode">
            <summary>
            The current node under evaluation.  Assigned by Evaluate to make 
            Key.GetValue available.
            </summary>
        </member>
        <member name="F:ExplorerFramework.PropertyPredicate.Key.mCurrentNode">
            <summary>
            Storage for the CurrentNode.
            </summary>
        </member>
        <member name="T:ExplorerFramework.PropertyPredicate.StaticKey">
            <summary>
            Key class used for static key values.  It doesn't use the CurrentNode. 
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyPredicate.StaticKey.#ctor(System.Object)">
            <summary>
            Construct with the static key value.
            </summary>
            <param name="value">
            The static key value.  GetValue will always return this value.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyPredicate.StaticKey.GetValue">
            <summary>
            Get the static key value.
            </summary>
            <returns>
            The static key value.
            </returns>
        </member>
        <member name="F:ExplorerFramework.PropertyPredicate.StaticKey.mValue">
            <summary>
            The static key value.
            </summary>
        </member>
        <member name="T:ExplorerFramework.PropertyPredicate.PropertyKey">
            <summary>
            Key class used for key values obtained from a property on the CurrentNode.
            </summary>
        </member>
        <member name="M:ExplorerFramework.PropertyPredicate.PropertyKey.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Construct with the PropertyDescriptor used to access the Key value 
            from the CurrentNode.
            </summary>
            <param name="keyProperty">
            PropertyDescriptor used to access the Key value from the CurrentNode.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyPredicate.PropertyKey.GetValue">
            <summary>
            Get the current Key value from the CurrentNode using the key 
            PropertyDescriptor passed to the constructor.
            </summary>
            <returns>
            The current key value in the CurrentNode.
            </returns>
        </member>
        <member name="F:ExplorerFramework.PropertyPredicate.PropertyKey.mKeyProperty">
            <summary>
            PropertyDescriptor used to access the Key value from the CurrentNode.
            </summary>
        </member>
        <member name="T:ExplorerFramework.PropertyRegexPredicate">
            <summary>
            Concrete PropertyPredicate for comparing a property to a regular expression. 
            </summary>
            <remarks>
            Evaluates to true when Regex.IsMatch returns true when applied to the
            current node property value String.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.PropertyRegexPredicate.#ctor(System.ComponentModel.PropertyDescriptor,System.Text.RegularExpressions.Regex)">
            <summary>
            Construct with PropertyDescriptor used to access the current value
            from evaluated TraversalNodes and the Regex pattern to match.
            </summary>
            <param name="property">
            Accesses the node property comparison operand.
            </param>
            <param name="key">
            Key reference regex value used to match the extracted property value
            in Evaluate.
            </param>
        </member>
        <member name="M:ExplorerFramework.PropertyRegexPredicate.DoEvaluate(System.Object)">
            <summary>
            Perform the evaluation. Evaluate the regex against the given value.
            </summary>
            <param name="value">
            Value to evaluate against the Regex key value.
            </param>
            <returns>
            The result of <c>Regex.IsMatch(value.ToString())</c>.
            </returns>
        </member>
        <member name="T:ExplorerFramework.Traversal">
            <summary>
            Defines a tree structure data set as TraversalNodes for a DataFacade.
            </summary>
            <remarks>
            <para>
            To create a concrete Traversal, the methods GetRootNode and UpdateChildList
            must be implemented.  The common details, such as managing the result list
            and performing the tree recursion are handled at this base class level.
            </para>
            <para>
            See <see cref="T:ExplorerFramework.Explorer">Explorer</see> for a description of the
            Explorer architecture.
            </para>
            </remarks>
            <seealso cref="T:ExplorerFramework.Explorer"/>
        </member>
        <member name="M:ExplorerFramework.Traversal.RunTraversal">
            <summary>
            Traverse the data element set and create the list of TraversalNodes.
            </summary>
            <returns>
            The list of TraversalNodes wrapping the data elements.
            </returns>
        </member>
        <member name="P:ExplorerFramework.Traversal.CurrentRootNode">
            <summary>
            The root node from the last call to RunTraversal. 
            </summary>
        </member>
        <member name="P:ExplorerFramework.Traversal.CurrentTraversalList">
            <summary>
            The node list resulting from the last call to RunTraversal. 
            </summary>
        </member>
        <member name="M:ExplorerFramework.Traversal.UpdateChildList(ExplorerFramework.TraversalNode)">
            <summary>
            Update a node's list of children.  This must be implemented in a concrete
            Traversal.
            </summary>
            <remarks>
            The DataFacade will request a new traversal run whenever its client
            requests a reset after the traversal has been marked dirty.  Derived
            classes are free to try to optimize the tree regeneration in
            UpdateChildList.
            </remarks>
            <param name="parent">
            Node whose child list must be updated.
            </param>
        </member>
        <member name="M:ExplorerFramework.Traversal.GetRootNode">
            <summary>
            Create a TraversalNode wrapping the data set's root element.
            </summary>
            <remarks>
            This method is called by RunTraversal and the result is kept as the 
            CurrentRootNode until RunTraversal is called again.
            </remarks>
            <returns>
            TraversalNode wrapping the data set's root element, as created by a 
            concrete Traversal implementation.
            </returns>
        </member>
        <member name="M:ExplorerFramework.Traversal.ResetList">
            <summary>
            Reset the result list to a new empty list.
            </summary>
        </member>
        <member name="M:ExplorerFramework.Traversal.AppendNode(ExplorerFramework.TraversalNode)">
            <summary>
            Append the given node to the result list.
            </summary>
            <param name="node">Node to append to the result list.</param>
        </member>
        <member name="M:ExplorerFramework.Traversal.VisitNode(ExplorerFramework.TraversalNode,ExplorerFramework.TraversalNode)">
            <summary>
            Visit a node in the traversal, filling in its parent and children, and
            adding it to the result list.
            </summary>
            <param name="node">Node to visit</param>
            <param name="parent">node's parent node</param>
        </member>
        <member name="M:ExplorerFramework.Traversal.TraverseChildren(ExplorerFramework.TraversalNode)">
            <summary>
            Recursively traverse the children of the given parent node.
            </summary>
            <param name="parent">
            Node whose children will be recursively traversed and visited.
            </param>
        </member>
        <member name="F:ExplorerFramework.Traversal.mTraversalList">
            <summary>
            Resulting list of nodes encountered by the traversal.
            </summary>
        </member>
        <member name="F:ExplorerFramework.Traversal.mCurrentRootNode">
            <summary>
            Root node from the last call to RunTraversal.
            </summary>
        </member>
        <member name="T:ExplorerFramework.TraversalNode">
            <summary>
            Data element component of the Explorer framework.
            </summary>
            <remarks>
            <para>
            Wraps the actual data set elements under exploration, providing tree 
            structure and subject-observer events.  TraversalNodes make up the data
            set presented by the DataFacade.  Concrete TraversalNode implementations are
            created by a concrete Traversal.  To create a concrete TraversalNode, the
            GetHashCode and Equals methods must be implemented.
            </para>
            <para>
            See <see cref="T:ExplorerFramework.Explorer">Explorer</see> for a description of the
            Explorer architecture.
            </para>
            </remarks>
            <seealso cref="T:ExplorerFramework.Explorer"/>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.Dispose">
            <summary>
            Release the resources held by this object.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.DropReferences">
            <summary>
            Drops references to other objects, such as the event observers, the 
            parent node, and child nodes.
            </summary>
        </member>
        <member name="P:ExplorerFramework.TraversalNode.IsDisposed">
            <summary>
            Was this object disposed?
            </summary>
        </member>
        <member name="P:ExplorerFramework.TraversalNode.ID">
            <summary>
            This Node's identifying object.
            </summary>
            <remarks>
            ID is specifically named ID to fit in with the TreeList component's 
            default KeyFieldName property value.
            </remarks>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.AnimatableID">
            <summary>
            Get the 3dsMax AnimHandle of the wrapped entity.
            returns -1 if no Animatable is contained by this node
            This function allows the SceneExplorers to get wrappers
            for their held items from Autodesk.Max.dll using
            Autodesk.Max.IAnimatable.HandleToAnim.
            </summary>
        </member>
        <member name="P:ExplorerFramework.TraversalNode.ParentID">
            <summary>
            Identifier object for the parent node.
            </summary>
            <remarks>
            ParentID is specifically named ParentID to fit in with the TreeList 
            component's default ParentFieldName property value. 
            </remarks>
        </member>
        <member name="P:ExplorerFramework.TraversalNode.ParentNode">
            <summary>
            This node's parent Node.  
            </summary>
            <remarks>
            ParentNode may be null if this is a root node.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.TraversalNode.Children">
            <summary>
            This node's list of child nodes.
            </summary>
            <remarks>
            Children is never null, but will be empty if this is a leaf node.
            </remarks>
        </member>
        <member name="E:ExplorerFramework.TraversalNode.TraversalChanged">
            <summary>
            Signals that the node tree structure has changed, such as when a child
            is added or removed.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.RaiseTraversalChanged">
            <summary>
            Raise a TraversalChanged event.
            </summary>
        </member>
        <member name="E:ExplorerFramework.TraversalNode.NodePropertyChanged">
            <summary>
            Signals that a data property on this node has changed.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.RaiseNodePropertyChanged">
            <summary>
            Raise a NodePropertyChanged event.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.Equals(System.Object)">
            <summary>
            Equals must return true as long as the wrapped values are equal. 
            </summary>
            <param name="other">
            Object to compare for equality against this one.
            </param>
            <returns>
            true if the wrapped value in this TraversalNode is equal to the wrapped
            value in the other TraversalNode. false otherwise.
            </returns>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.GetHashCode">
            <summary>
            GetHashCode must be implemented such that two Equal objects return
            the same hash code value. 
            </summary>
            <returns>
            A hash code value for this node.
            </returns>
        </member>
        <member name="P:ExplorerFramework.TraversalNode.CachedListIndex">
            <summary>
            This node's index in the DataFacade list. Managed from DataFacade.
            </summary>
            <remarks>
            Placeholder property for the DataFacade to keep the index of each node
            in the final list after applying any filters, before presenting it to the
            views.  This is intended for optimization only and may be transient data.
            </remarks>
        </member>
        <member name="P:ExplorerFramework.TraversalNode.PassedFilter">
            <summary>
            Indicates if the node passed the filter in the owning DataFacade's 
            FilterModel. 
            </summary>
            <remarks>
            This is intended for optimization only and may be transient data.
            </remarks>
        </member>
        <member name="T:ExplorerFramework.TraversalNode.PickState">
            <summary>
            Indicates the state of picking a node
            </summary>
        </member>
        <member name="F:ExplorerFramework.TraversalNode.PickState.PickOk">
            <summary>
            A picking has started and the node is an acceptable choice.
            </summary>
        </member>
        <member name="F:ExplorerFramework.TraversalNode.PickState.PickNo">
            <summary>
            A picking has started and the node is not an acceptable choice.
            </summary>
        </member>
        <member name="F:ExplorerFramework.TraversalNode.PickState.None">
            <summary>
            There is no picking.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.GetPickState">
            <summary>
            Returns the state of the pick for the current node, default implementation returns no picking.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.OnPicked">
            <summary>
            Handles a node being picked in a max picking session
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.OnTraversalChanged">
            <summary>
            Raise a TraversalChanged event.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.OnNodePropertyChanged">
            <summary>
            Raise a NodePropertyChanged event.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNode.Dispose(System.Boolean)">
            <summary>
            Release resources held by this object.
            </summary>
            <param name="disposing">
            true if this object is being disposed, but yet not finalized.
            </param>
        </member>
        <member name="F:ExplorerFramework.TraversalNode.mDisposed">
            <summary>
            Was this object disposed?
            </summary>
        </member>
        <member name="F:ExplorerFramework.TraversalNode.mCachedListIndex">
            <summary>
            Index in the DataFacade list.
            </summary>
        </member>
        <member name="F:ExplorerFramework.TraversalNode.mParentNode">
            <summary>
            This node's parent node.
            </summary>
        </member>
        <member name="F:ExplorerFramework.TraversalNode.mChildList">
            <summary>
            This node's list of child nodes.
            </summary>
        </member>
        <member name="T:ExplorerFramework.TraversalNodeItemChangedEventArgs">
            <summary>
            ListChangedEventArgs specialization for events pertaining to an item change
            in a list of TraversalNodes.
            </summary>
        </member>
        <member name="M:ExplorerFramework.TraversalNodeItemChangedEventArgs.#ctor(ExplorerFramework.TraversalNode)">
            <summary>
            Construct with the changed node.
            </summary>
            <param name="node">The changed item in the TraversalNode list.</param>
        </member>
        <member name="M:ExplorerFramework.TraversalNodeItemChangedEventArgs.#ctor(ExplorerFramework.TraversalNode,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Construct with the changed node and the PropertyDescriptor to access the
            changed data.
            </summary>
            <param name="node">The changed item in the TraversalNode list.</param>
            <param name="changedProperty">
            PropertyDescriptor to access the specific property that changed.
            </param>
        </member>
        <member name="P:ExplorerFramework.TraversalNodeItemChangedEventArgs.TraversalNode">
            <summary>
            The changed node.
            </summary>
        </member>
        <member name="F:ExplorerFramework.TraversalNodeItemChangedEventArgs.mTraversalNode">
            <summary>
            The changed node.
            </summary>
        </member>
    </members>
</doc>
