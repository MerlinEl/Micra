<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="_poly_8cs" kind="file">
    <compoundname>Poly.cs</compoundname>
    <innerclass refid="class_micra_1_1_core_1_1_poly" prot="public">Micra::Core::Poly</innerclass>
    <innerclass refid="struct_micra_1_1_core_1_1_poly_1_1_ngon" prot="public">Micra::Core::Poly::Ngon</innerclass>
    <innernamespace refid="namespace_micra_1_1_core">Micra::Core</innernamespace>
    <innernamespace refid="namespace_autodesk_1_1_max_1_1_wrappers">Autodesk::Max::Wrappers</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Autodesk.Max;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Autodesk.Max.Wrappers;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Linq;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//http://www.illusioncatalyst.com/3dsmax_files/snippets/editable_poly_sub_obj.php</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Micra.Core<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>[Serializable]</highlight></codeline>
<codeline lineno="15" refid="class_micra_1_1_core_1_1_poly" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_micra_1_1_core_1_1_poly" kindref="compound">Poly</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Serializable]</highlight></codeline>
<codeline lineno="20" refid="struct_micra_1_1_core_1_1_poly_1_1_ngon" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_micra_1_1_core_1_1_poly_1_1_ngon" kindref="compound">Ngon</ref><sp/>{</highlight></codeline>
<codeline lineno="21" refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a2943b01bc99d13e6be8a42a4eefed4ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>IMNFace<sp/>_IMNFace<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="23" refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a293fe003d76d13be99a6d247793dce8a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IList&lt;int&gt;<sp/>verts<sp/>=&gt;<sp/>_IMNFace.Vtx;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_micra_1_1_core_1_1_poly_1_1_ngon" kindref="compound">Ngon</ref>(IMNFace<sp/>f)<sp/>=&gt;<sp/>_IMNFace<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="25" refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a1a9a1e3ec4bf814ad8de9331d9f14a3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Vnum<sp/>=&gt;<sp/>_IMNFace.Vtx.Count;</highlight></codeline>
<codeline lineno="27" refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a71aa9eb2dfe084863d407532cf74dc06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsTriangle<sp/>=&gt;<sp/>Vnum<sp/>==<sp/>3;</highlight></codeline>
<codeline lineno="29" refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a021a36e86f68ff5294db1d7309195953" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsQuad<sp/>=&gt;<sp/>Vnum<sp/>==<sp/>4;</highlight></codeline>
<codeline lineno="31" refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a3c74cf4f6d192fdfe2f1a72ad536d0cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsNgon<sp/>=&gt;<sp/>Vnum<sp/>&gt;<sp/>4;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref><sp/>VertPos(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertIndex)<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref>(_IMNMesh.V(vertIndex).P);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>bool<sp/>IsNGon(int<sp/>faceIndex)<sp/>=&gt;<sp/>_IMNMesh.F(faceIndex).Vtx.Count<sp/>&gt;<sp/>4;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="class_micra_1_1_core_1_1_poly_1a5e95b08bccc28a57fca1c3643d62081c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref><sp/><ref refid="class_micra_1_1_core_1_1_poly_1a5e95b08bccc28a57fca1c3643d62081c" kindref="member">FaceCenter</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>faceIndex)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMNFace<sp/>face<sp/>=<sp/>_IMNMesh.F(faceIndex);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref><sp/>center<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.Vtx.ForEach(v<sp/>=&gt;<sp/>center<sp/>+=<sp/>VertPos(v));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>center<sp/>/<sp/>face.Vtx.Count;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44" refid="class_micra_1_1_core_1_1_poly_1aba8c9efd28421de7973ff3719e7577df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>IMNMesh<sp/>_IMNMesh<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">internal</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_poly" kindref="compound">Poly</ref>(IMNMesh<sp/>m)<sp/>=&gt;<sp/>_IMNMesh<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>static<sp/>List&lt;int&gt;<sp/>GetSelectedFaces(Poly<sp/>p)<sp/>=&gt;<sp/>GetSelectedFaces(p);<sp/>100<sp/>crash<sp/>recu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_micra_1_1_core_1_1_poly_1ad1c0c6dd034f7b816ca6afe3f3d81048" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>List&lt;int&gt;<sp/><ref refid="class_micra_1_1_core_1_1_poly_1ad1c0c6dd034f7b816ca6afe3f3d81048" kindref="member">GetSelectedFaces</ref>()<sp/>{<sp/></highlight><highlight class="comment">//pm:Autodesk.Max.Wrappers.MNMesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Max.Log(&quot;GetSelectedFaces<sp/>&gt;<sp/>on<sp/>Poly!&quot;);</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>fsel<sp/>=<sp/>new<sp/>List&lt;int&gt;()<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IBitArray<sp/>ba<sp/>=<sp/>Kernel._Global.BitArray.Create();</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_IMNMesh.GetFaceSel(ba);</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ba.IEnumerable().ForEach((item,<sp/>index)<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>item<sp/>==<sp/>1<sp/>)<sp/>fsel.Add(index);<sp/>//+3DsMax<sp/>count<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fsel;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max.Log(</highlight><highlight class="stringliteral">&quot;GetSelectedFaces<sp/>&gt;<sp/>on<sp/>Poly!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>fsel<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;()<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_IMNMesh.Numf;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>IsFaceSelected(i)<sp/>)<sp/>fsel.Add(i);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsel;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66" refid="class_micra_1_1_core_1_1_poly_1a60e3d4a8165d525976b1bbb31bd8c81f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>List&lt;int&gt;<sp/><ref refid="class_micra_1_1_core_1_1_poly_1a60e3d4a8165d525976b1bbb31bd8c81f" kindref="member">GetSelectedEdges</ref>()<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max.Log(</highlight><highlight class="stringliteral">&quot;GetSelectedEdges<sp/>&gt;<sp/>on<sp/>Poly!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>esel<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;()<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_IMNMesh.Numf;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>IsEdgeSelected(i)<sp/>)<sp/>esel.Add(i);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>esel;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="class_micra_1_1_core_1_1_poly_1a64490d818f0923d42f1b49117c0934e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_poly_1a64490d818f0923d42f1b49117c0934e7" kindref="member">GetArea</ref>()<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMesh<sp/>imesh<sp/>=<sp/>Kernel._Global.Mesh.Create();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_IMNMesh.OutToTri(imesh);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imesh.Faces.Sum(f<sp/>=&gt;<sp/>GetFaceArea(imesh,<sp/>f));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91" refid="class_micra_1_1_core_1_1_poly_1ae6c3f38aaa18675ffc3c16a1b2897449" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_poly_1ae6c3f38aaa18675ffc3c16a1b2897449" kindref="member">GetFaceArea</ref>(IMesh<sp/>imesh,<sp/>IFace<sp/>face)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref><sp/>corner<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref>(imesh.GetVert((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)face.V[0]));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_micra_1_1_core_1_1_vector3" kindref="compound">Vector3</ref><sp/>a<sp/>=<sp/>Vector3.FromPoints(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref>(imesh.GetVert((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)face.V[1])),<sp/>corner);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_micra_1_1_core_1_1_vector3" kindref="compound">Vector3</ref><sp/>b<sp/>=<sp/>Vector3.FromPoints(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref>(imesh.GetVert((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)face.V[2])),<sp/>corner);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector3.Cross(a,<sp/>b).Length<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104" refid="class_micra_1_1_core_1_1_poly_1ac428c9a94c168c9efc4bd16ace675cd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_poly_1ac428c9a94c168c9efc4bd16ace675cd5" kindref="member">GetFaceArea</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>faceIndex)<sp/>{<sp/></highlight><highlight class="comment">//TODO<sp/>-under<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_micra_1_1_core_1_1_poly_1_1_ngon" kindref="compound">Ngon</ref><sp/>face<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_micra_1_1_core_1_1_poly_1_1_ngon" kindref="compound">Ngon</ref>(_IMNMesh.F(faceIndex));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>there<sp/>is<sp/>more<sp/>than<sp/>4<sp/>vertices<sp/>use<sp/>centralized<sp/>triangulation<sp/>method<sp/>(MerlinEl<sp/>2020)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>face.<ref refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a3c74cf4f6d192fdfe2f1a72ad536d0cd" kindref="member">IsNgon</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref><sp/>center<sp/>=<sp/>FaceCenter(faceIndex);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>area<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>triangle<sp/>from<sp/>two<sp/>verts<sp/>in<sp/>order<sp/>and<sp/>center<sp/>(I<sp/>hope<sp/>that<sp/>Vtx<sp/>indexes<sp/>are<sp/>in<sp/>order)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>face.Vnum<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>edge<sp/>p1<sp/>p2<sp/>and<sp/>center<sp/>for<sp/>triangle<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>area<sp/>+=<sp/>Utility.GetTriangleArea(center,<sp/>VertPos(face.<ref refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a293fe003d76d13be99a6d247793dce8a" kindref="member">verts</ref>[i]),<sp/>VertPos(face.<ref refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a293fe003d76d13be99a6d247793dce8a" kindref="member">verts</ref>[i<sp/>+<sp/>1]));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>area;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref><sp/>p1<sp/>=<sp/>VertPos(face.<ref refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a293fe003d76d13be99a6d247793dce8a" kindref="member">verts</ref>[0]);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref><sp/>p2<sp/>=<sp/>VertPos(face.<ref refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a293fe003d76d13be99a6d247793dce8a" kindref="member">verts</ref>[1]);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_micra_1_1_core_1_1_point3" kindref="compound">Point3</ref><sp/>p3<sp/>=<sp/>VertPos(face.<ref refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a293fe003d76d13be99a6d247793dce8a" kindref="member">verts</ref>[2]);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculate<sp/>area<sp/>of<sp/>triangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>area1<sp/>=<sp/>Utility.GetTriangleArea(p1,<sp/>p2,<sp/>p3);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>is<sp/>quad,<sp/>calc<sp/>area<sp/>of<sp/>second<sp/>triangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>area2<sp/>=<sp/>face.IsQuad<sp/>?<sp/>Utility.GetTriangleArea(p1,<sp/>p3,<sp/>VertPos(face.<ref refid="struct_micra_1_1_core_1_1_poly_1_1_ngon_1a293fe003d76d13be99a6d247793dce8a" kindref="member">verts</ref>[3]))<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>area1<sp/>+<sp/>area2;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">internal</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsFaceSelected(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>faceIndex)<sp/>=&gt;<sp/>_IMNMesh.F(faceIndex).GetFlag((uint)<ref refid="class_micra_1_1_core_1_1_enum_flags" kindref="compound">EnumFlags</ref>.MNMeshComponent.MN_SEL);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsEdgeSelected(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edgeIndex)<sp/>=&gt;<sp/>_IMNMesh.E(edgeIndex).GetFlag((uint)<ref refid="class_micra_1_1_core_1_1_enum_flags" kindref="compound">EnumFlags</ref>.MNMeshComponent.MN_SEL);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsVertSelected(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edgeIndex)<sp/>=&gt;<sp/>_IMNMesh.V(edgeIndex).GetFlag((uint)<ref refid="class_micra_1_1_core_1_1_enum_flags" kindref="compound">EnumFlags</ref>.MNMeshComponent.MN_SEL);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShowFace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>faceIncex)<sp/>=&gt;<sp/>_IMNMesh.F(faceIncex).SetFlag((uint)<ref refid="class_micra_1_1_core_1_1_enum_flags" kindref="compound">EnumFlags</ref>.MNMeshComponent.MN_HIDDEN,<sp/>false);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HideFace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>faceIncex)<sp/>=&gt;<sp/>_IMNMesh.F(faceIncex).SetFlag((uint)<ref refid="class_micra_1_1_core_1_1_enum_flags" kindref="compound">EnumFlags</ref>.MNMeshComponent.MN_HIDDEN,<sp/>true);</highlight></codeline>
<codeline lineno="143" refid="class_micra_1_1_core_1_1_poly_1a05ac10c459d9794b905ba966dff6b328" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HideFaces(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>selected)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max.Log(</highlight><highlight class="stringliteral">&quot;HideFaces<sp/>&gt;<sp/>on<sp/>Poly!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_IMNMesh.Numf;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSelected<sp/>=<sp/>IsFaceSelected(i);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Max.Log(&quot;face:{0}<sp/>selected:{1}<sp/>&quot;,<sp/>i,<sp/>isSelected);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>selected<sp/>&amp;&amp;<sp/>isSelected<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max.Log(</highlight><highlight class="stringliteral">&quot;hide<sp/>face:{0}&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HideFace(i);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!selected<sp/>&amp;&amp;<sp/>!isSelected<sp/>)<sp/>HideFace(i);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//MNTempData<sp/>mtd<sp/>=<sp/>new<sp/>MNTempData(_IMNMesh,<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mtd.Invalidate((uint)EnumChannels.SELECT_CHANNEL<sp/>|<sp/>(uint)EnumChannels.TOPO_CHANNEL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mtd.FreeAll();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_IMNMesh.InvalidateGeomCache();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_IMNMesh.InvalidateHardwareMesh(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_IMNMesh.InvalidateTopoCache(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_IMNMesh.InvalidateGeomCache();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163" refid="class_micra_1_1_core_1_1_poly_1a5d44e75354847f56c63fc3287d7d5e0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">internal</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_micra_1_1_core_1_1_poly_1a5d44e75354847f56c63fc3287d7d5e0d" kindref="member">UnhideFaces</ref>()<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_IMNMesh.F.ForEach&lt;IMNFace&gt;(f<sp/>=&gt;<sp/>ShowFace(f));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max.Log(</highlight><highlight class="stringliteral">&quot;UnhideFaces<sp/>&gt;<sp/>on<sp/>Poly!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_IMNMesh.Numf;<sp/>i++<sp/>)<sp/>ShowFace(i);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_IMNMesh.InvalidateTopoCache(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_IMNMesh.InvalidateGeomCache();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="174"><highlight class="comment">Data<sp/>Invalidation<sp/>Methods:</highlight></codeline>
<codeline lineno="175"><highlight class="comment">Prototype:</highlight></codeline>
<codeline lineno="176"><highlight class="comment">void<sp/>Invalidate(DWORD<sp/>part);</highlight></codeline>
<codeline lineno="177"><highlight class="comment">Remarks:</highlight></codeline>
<codeline lineno="178"><highlight class="comment">Invalidates<sp/>all<sp/>data<sp/>based<sp/>on<sp/>the<sp/>specified<sp/>part<sp/>of<sp/>the<sp/>mesh.<sp/>In<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="179"><highlight class="comment">chart,<sp/>the<sp/>columns<sp/>represent<sp/>the<sp/>channels<sp/>GEOM_CHANNEL<sp/>(G),</highlight></codeline>
<codeline lineno="180"><highlight class="comment">TOPO_CHANNEL<sp/>(T),<sp/>SELECT_CHANNEL<sp/>(S),<sp/>and</highlight></codeline>
<codeline lineno="181"><highlight class="comment">SUBSEL_TYPE_CHANNEL<sp/>(U).</highlight></codeline>
<codeline lineno="182"><highlight class="comment">X&apos;s<sp/>indicate<sp/>dependency<sp/>of<sp/>the<sp/>specified<sp/>data<sp/>cache<sp/>on<sp/>the<sp/>given<sp/>channel.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="189"><highlight class="comment">void<sp/>MakeEdgeVisAndSel(MNMesh<sp/>&amp;<sp/>mm,<sp/>int<sp/>ee)</highlight></codeline>
<codeline lineno="190"><highlight class="comment">{</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/>assert(mm.GetFlag(MN_MESH_FILLED_IN));</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/>MNEdge<sp/>*me<sp/>=<sp/>mm.E(ee);</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/>MNFace<sp/>*mf1<sp/>=<sp/>mm.F(me-&gt;f1);</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/>MNFace<sp/>*mf2<sp/>=(me-&gt;f2&gt;-1)<sp/>?<sp/>mm.F(me-&gt;f2)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/>//<sp/>Change<sp/>the<sp/>edge<sp/>as<sp/>desired</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/>me-&gt;ClearFlag(MN_EDGE_INVIS<sp/>|<sp/>MN_EDGE_HALF_INVIS);</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/>me-&gt;SetFlag(MN_SEL);</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/>//<sp/>Make<sp/>the<sp/>corresponding<sp/>changes<sp/>in<sp/>face<sp/>1</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/>inti;</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/>i<sp/>=<sp/>mf1-&gt;EdgeIndex(ee);</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/>mf1-&gt;visedg.Set(i);</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/>mf1-&gt;edgsel.Set(i);</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/>//<sp/>Make<sp/>the<sp/>corresponding<sp/>changes<sp/>in<sp/>face<sp/>2</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/>if(mf2)</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>mf2-&gt;EdgeIndex(ee);</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>mf2-&gt;visedg.Set(i);</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>mf2-&gt;edgsel.Set(i);</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="comment">}</highlight></codeline>
<codeline lineno="214"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="221"><highlight class="comment">public<sp/>Point3<sp/>FaceCenter;</highlight></codeline>
<codeline lineno="222"><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/>public<sp/>double<sp/>Area(int<sp/>ngonIndex)<sp/>{<sp/>//TODO<sp/>-not<sp/>tested<sp/>-not<sp/>used</highlight></codeline>
<codeline lineno="224"><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ngon<sp/>face<sp/>=<sp/>ngons[ngonIndex];</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//if<sp/>there<sp/>is<sp/>more<sp/>than<sp/>4<sp/>vertices<sp/>use<sp/>centralized<sp/>triangulation<sp/>method</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>face.IsNgon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="comment"></highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3<sp/>center<sp/>=<sp/>GetFaceCenter(face);</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>area<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//take<sp/>two<sp/>verts<sp/>in<sp/>order<sp/>and<sp/>make<sp/>triangle<sp/>to<sp/>center</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>face.Vtx.Count-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//face.Vtx.ForEach(v=&gt;<sp/>verts[v])</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>area;</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//get<sp/>points<sp/>into<sp/>a<sp/>nice,<sp/>concise<sp/>format</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point3[]<sp/>pts<sp/>=<sp/>new<sp/>Point3[4];</highlight></codeline>
<codeline lineno="243"><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pts[0]<sp/>=<sp/>verts[face.a];</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pts[1]<sp/>=<sp/>verts[face.b];</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pts[2]<sp/>=<sp/>verts[face.c];</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>face.IsQuad<sp/>)<sp/>pts[3]<sp/>=<sp/>verts[face.d];</highlight></codeline>
<codeline lineno="248"><highlight class="comment"></highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//calculate<sp/>areas<sp/>of<sp/>triangles</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>a<sp/>=<sp/>pts[0].DistanceTo(pts[1]);</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>b<sp/>=<sp/>pts[1].DistanceTo(pts[2]);</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>c<sp/>=<sp/>pts[2].DistanceTo(pts[0]);</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>p<sp/>=<sp/>0.5<sp/>*<sp/>(<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>area1<sp/>=<sp/>Math.Sqrt(p<sp/>*<sp/>(<sp/>p<sp/>-<sp/>a<sp/>)<sp/>*<sp/>(<sp/>p<sp/>-<sp/>b<sp/>)<sp/>*<sp/>(<sp/>p<sp/>-<sp/>c<sp/>));</highlight></codeline>
<codeline lineno="255"><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//double<sp/>area1<sp/>=<sp/>GetTriangleArea(pts[0],<sp/>pts[1],<sp/>pts[2]);</highlight></codeline>
<codeline lineno="257"><highlight class="comment"></highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//if<sp/>quad,<sp/>calc<sp/>area<sp/>of<sp/>second<sp/>triangle</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>area2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>face.IsQuad<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>pts[0].DistanceTo(pts[2]);</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>pts[2].DistanceTo(pts[3]);</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>pts[3].DistanceTo(pts[0]);</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>0.5<sp/>*<sp/>(<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>area2<sp/>=<sp/>Math.Sqrt(p<sp/>*<sp/>(<sp/>p<sp/>-<sp/>a<sp/>)<sp/>*<sp/>(<sp/>p<sp/>-<sp/>b<sp/>)<sp/>*<sp/>(<sp/>p<sp/>-<sp/>c<sp/>));</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//double<sp/>area2<sp/>=<sp/>GetTriangleArea(pts[0],<sp/>pts[2],<sp/>pts[3]);</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>area1<sp/>+<sp/>area2;</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment"></highlight></codeline>
<codeline lineno="272"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/ReneBaca/Aprog/Micra/Micra_Csharp/Micra.Core/Poly.cs"/>
  </compounddef>
</doxygen>
