public int NumFaces {
            get {
                switch ( ClassOf() ) {

                    case nameof(ClassID.EditableMesh): return GetImesh().NumFaces;
                    case nameof(ClassID.EditablePoly): return GetIpoly().FNum;
                }
                if ( SuperClassOf() == nameof(SuperClassID.GeometricObject) ) {

                    return GetImesh().NumFaces;
                }
                return -1;
            }
        }

        public int NumEdges {
            get {
                switch ( ClassOf() ) {

                    case nameof(ClassID.EditableMesh): return GetImesh().EdgeSel.Size; //TODO -not tested -not used
                    case nameof(ClassID.EditablePoly): return GetIpoly().ENum;
                }
                if ( SuperClassOf() == nameof(SuperClassID.GeometricObject) ) {

                    return GetImesh().NumFaces;
                }
                return -1;
            }
        }

        public int NumVerts {
            get {
                switch ( ClassOf() ) {

                    case nameof(ClassID.EditableMesh): return GetImesh().NumVerts;
                    case nameof(ClassID.EditablePoly): return GetIpoly().Numv;
                }
                if ( SuperClassOf() == nameof(SuperClassID.GeometricObject) ) {

                    return GetImesh().NumFaces;
                }
                return -1;
            }
        }

        public List<int> GetSelectedFaces() {

            switch ( ClassOf() ) {

                case nameof(ClassID.EditableMesh): return GetMesh().GetSelectedFaces();
                case nameof(ClassID.EditablePoly): return GetPoly().GetSelectedFaces();
            }
            return null;
        }

        public List<int> GetSelectedEdges() {

            switch ( ClassOf() ) {

                case nameof(ClassID.EditableMesh): return GetMesh().GetSelectedEdges();
                case nameof(ClassID.EditablePoly): return GetPoly().GetSelectedEdges();
            }
            return null;
        }

        public List<int> GetSelectedVerts() {

            switch ( ClassOf() ) {

                case nameof(ClassID.EditableMesh): return GetMesh().GetSelectedVerts();
                case nameof(ClassID.EditablePoly): return GetPoly().GetSelectedVerts();
            }
            return null;
        }
                public double GetArea() {

            switch ( ClassOf() ) {

                case nameof(ClassID.EditableMesh): return GetMesh().GetArea();
                case nameof(ClassID.EditablePoly): return GetPoly().GetArea();
            }
            if ( SuperClassOf() == nameof(SuperClassID.GeometricObject) ) {

                return GetMesh().GetArea();
            }
            return -1;
        }
           public void SetSelectedFaces(List<int> faceIndexes, bool redraw = true) {
            
            switch ( ClassOf() ) {

                case nameof(ClassID.EditableMesh): GetMesh().SetSelectedFaces(faceIndexes); break;
                case nameof(ClassID.EditablePoly): GetPoly().SetSelectedFaces(faceIndexes); break;
            }
            _IGeomObject.InvalidateChannels(( uint )EnumChannels.SELECT_CHANNEL); //test if works like (update $)
            if ( redraw ) Kernel.RedrawViews();
        }

        public void SetSelectedEdges(List<int> faceIndexes, bool redraw) {

            switch ( ClassOf() ) {

                case nameof(ClassID.EditableMesh): GetMesh().SetSelectedEdges(faceIndexes); break;
                case nameof(ClassID.EditablePoly): GetPoly().SetSelectedEdges(faceIndexes); break;
            }
            if ( redraw ) Kernel.RedrawViews();
        }

        public void SetSelectedVerts(List<int> faceIndexes, bool redraw) {

            switch ( ClassOf() ) {

                case nameof(ClassID.EditableMesh): GetMesh().SetSelectedVerts(faceIndexes); break;
                case nameof(ClassID.EditablePoly): GetPoly().SetSelectedVerts(faceIndexes); break;
            }
            if ( redraw ) Kernel.RedrawViews();
        }
